{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! \u00b6 Welcome to the Smart Citizen project documentation! Check the different sections or get started with our guides . A note about versions The new Smart Citizen Kit and the Smart Citizen Station development has been developed as part of the iSCAPE project under European Community\u2019s H2020 Programme under Grant Agreement No. 689954 Sections \u00b6 Main: Contains the Smart Citizen Kit and Smart Citizen Station documentation to help you get started. Visit the Hardware architecture page to understand a bit better how you can better use all the SCK possibilities Data: Contains all the documentation on data, from collection, storage to analysis and calibration: Platform: Contains all the documentation on the online platform where data is collected, stored and visualised API: the documentation of our RESTFUL API and how to interact with it Data Analysis: Contains all the documentation on the data post-processing framework to analyse the sensors data Use cases: Contains documentation and use cases examples how to use our tools with your local community. Guides: Contains step-by-step guides for different features of the kit, how to get started, use the shell, or make some more advanced analysis of the sensor readings! Legacy Hardware: Are you a pioneer of participatory sensing looking for the original SCK 1.0 and SCK 1.1 documentation? Check the Legacy Hardware section! Guides \u00b6 The documentation contains multiple guides as step-by-step tutorials to perform essential tasks as installing a kit or upgrading it's firmware: Example guides Installing the Smart Citizen Kit Installing the Smart Citizen Station Installing the Smart Citizen Kit 1.0 / 1.1 Onboarding new Sensors Uploading SD Card Data Update the Firmware Edit the Firmware Open Source \u00b6 We're against black boxes! The entire project is released under open source licenses:\u2028 Hardware components: CERN Open Hardware License v1.2 Core firmware: GNU GPL v3.0 Software platform: GNU AGLP v3.0 Info Check the Source files section for each component and explore the software source code and the hardware blueprints.","title":"Welcome"},{"location":"#welcome","text":"Welcome to the Smart Citizen project documentation! Check the different sections or get started with our guides . A note about versions The new Smart Citizen Kit and the Smart Citizen Station development has been developed as part of the iSCAPE project under European Community\u2019s H2020 Programme under Grant Agreement No. 689954","title":"Welcome!"},{"location":"#sections","text":"Main: Contains the Smart Citizen Kit and Smart Citizen Station documentation to help you get started. Visit the Hardware architecture page to understand a bit better how you can better use all the SCK possibilities Data: Contains all the documentation on data, from collection, storage to analysis and calibration: Platform: Contains all the documentation on the online platform where data is collected, stored and visualised API: the documentation of our RESTFUL API and how to interact with it Data Analysis: Contains all the documentation on the data post-processing framework to analyse the sensors data Use cases: Contains documentation and use cases examples how to use our tools with your local community. Guides: Contains step-by-step guides for different features of the kit, how to get started, use the shell, or make some more advanced analysis of the sensor readings! Legacy Hardware: Are you a pioneer of participatory sensing looking for the original SCK 1.0 and SCK 1.1 documentation? Check the Legacy Hardware section!","title":"Sections"},{"location":"#guides","text":"The documentation contains multiple guides as step-by-step tutorials to perform essential tasks as installing a kit or upgrading it's firmware: Example guides Installing the Smart Citizen Kit Installing the Smart Citizen Station Installing the Smart Citizen Kit 1.0 / 1.1 Onboarding new Sensors Uploading SD Card Data Update the Firmware Edit the Firmware","title":"Guides"},{"location":"#open-source","text":"We're against black boxes! The entire project is released under open source licenses:\u2028 Hardware components: CERN Open Hardware License v1.2 Core firmware: GNU GPL v3.0 Software platform: GNU AGLP v3.0 Info Check the Source files section for each component and explore the software source code and the hardware blueprints.","title":"Open Source"},{"location":"Smart%20Citizen%20Kit/","text":"Smart Citizen Kit \u00b6 A note about versions The SCK 2.0 was the development version for the now commercially available SCK 2.1 sponsored thanks to the iSCAPE project under European Community\u2019s H2020 Programme under Grant Agreement No. 689954 Quick links Buy: seeedstudio.com Installation: start.smartcitizen.me Platform: smartcitizen.me Discuss: forum.smartcitizen.me Support: support@smartcitizen.me Something big?: info@smartcitizen.me Platform status: uptimerobot.com What is it? \u00b6 The Smart Citizen Kit is the core of what we call the Smart Citizen System: a complete set of modular hardware components aiming to provide tools for environmental monitoring , ranging from citizen science and educational activities to more advanced scientific research . The system is designed in a extendable way, with a central data logger (the Data Board ) with network connectivity to which the different components are branched. The system is based on the principle of reproducibility, also integrating non-hardware components such as a dedicated Storage platform and a Sensor analysis framework . On top of that, the system is meant to serve as a base solution for more complex settings , not only related with air quality monitoring. For that purpose, in addition to the Urban Board , the system also provides off-the-shelf support for a wide variety of third party sensors, using the expansion bus as a common port. One example is what we call the Smart Citizen Station : a full solution for low cost air pollution monitoring. The sensors Have a look a the supported sensors in the Firmware ! Measurements \u00b6 All the Smart Citizen Kit new sensors generation measure at least air temperature, relative humidity, noise level, ambient light, barometric pressure and particulate matter (PM). SCK 2.1 \u00b6 Here is the table summarising the sensors: Measurement Units Sensors Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light Lux Rohm BH1721FVC Barometric pressure Pa NXP MPL3115A26 Equivalent Carbon Dioxide ppm AMS CCS811 Volatile Organic Compounds ppb AMS CCS811 Particulate Matter PM 1 / 2.5 / 10 \u00b5g/m3 Planttower PMS 5003 Sensor performance Make sure you visit the sensor performance page for further information about the sensors. Installation instructions \u00b6 The sensor comes mounted and almost ready to be used: The first step is to connect the battery. The kit will light in red (configuration mode) and we will be able to configure it by following the instructions at start.smartcitizen.me . Detailed guide Have a look at this guide for a step-by-step installation. After the configuration process, data will be available on the SmartCitizen platform. You can explore the data there or download it using the CSV Download option (you can check a more detailed guide here ) Power management \u00b6 Battery duration \u00b6 The SCK comes with a 2000mAh LiPo battery. The battery is meant to be a complete power option for short-term measurements and a backup solution when the kit it is used for long periods. For long exposures, we recommend to permanently connect the USB to kit. The battery duration is dependent on which sensors are enabled or disabled. You will note that the kit turns itself off while operating on battery. Actually, this is what we call sleep-mode , an operation mode implemented to reduce consumption while on battery operation. Check the operation modes section below. PM Sensor management If you want to save battery, the basic interval for the sensors shouldn't be below 30s. This is because the minimum stabilisation time the PM sensor requires to take stable readings is around 15-20s. For this reason, the minimum interval available without turning off the PM sensor between readings is 30s . If a lower interval is required, the PM sensor will be permanently ON and battery will drain faster. Battery calculator \u00b6 You can use the battery calculator to estimate how much your battery would last. SCK Battery Calculator WIP! What's the SCK's Shell? Learn how to use the powerful SCK Shell. Check the guide . fetch('https://api.github.com/repos/fablabbcn/smartcitizen-tools/contents/calculator.htm') .then(function(response) { return response.json(); }).then(function(data) { var iframe = document.getElementById('github-iframe'); iframe.src = 'data:text/html;base64,' + encodeURIComponent(data['content']); }); Battery charging \u00b6 The SCK has a micro USB port and can be charged like any smartphone or tablet using a dedicated adapter or a computer USB port. We recommend using an external USB power adaptor, instead of a computer USB port, for quicker charging. Autonomy can be extended by using a Power Bank, or a 5V PV Panel . Power Supply \u00b6 The SCK needs 5V input via the micro USB connector. A normal 5V power charger can be used, although for outdoor developments we recommend using a waterproof power supply. Find more info in the power supply section . User feedback \u00b6 The LED serves as an indication of the battery status. If the LED is flashing orange it indicates that the battery must be charged. The battery takes about 4 hours to fully charge. When the battery is fully charged, the LED will change from orange to green . Remember that in addition to these colors you will have the state color of the kit: configuration, network and sd. More details Find more details under the data board section User interfaces \u00b6 The data board features a set of user interfaces which provide feedback to the user, as well as two buttons with different functionalities. The main RGB LED provides general feedback of the data board status. Additionally, two buttons are provided for user action. A hardware reset button, which forces a power cut to the board, and a power button, used to change the device's mode, turn on and off the device, and to perform a factory reset. You can see both buttons below: The button \u00b6 The main button interaction is detailed below: Function Button action ON Push the button OFF Push the button for 5 seconds CHANGE MODE Push the button multiple times to choose: Setup Wi-Fi Pink FACTORY RESET Push the button 15 seconds for a full reset An example is shown below: Troubleshooting Have a look at the troubleshoothing section to check how you can use the buttons in case of problems with your SCK! Operation modes \u00b6 New WARNING feature After release 0.9.8 , a new warning feature was introduced. In an overall sense, this is the interpretation of each state: Normal : no problem! Slow fading in the LED. Warning : can take readings, but can't save them in the sdcard or can't send them to the platform (problem with network). Data is stored in the onboard Flash memory and will be saved after the problem is solved - either network comes back or the sdcard is OK. Partial blink in LED. Error : can't take readings. Either there is \"no time\", or there is a big problem that prevents data to be read. Full fast blink in LED. Remember, you can check your SCK firmware version quickly following this guide . Setup mode \u00b6 In this mode, the Kit is ready to be configured in network mode or SD card in start.smartcitizen.me . LED color Kit status Ready to be setup Ready to be setup but battery is low, charge the Kit Ready to be setup, battery charging Ready to be setup, battery charged Wi-Fi mode \u00b6 This is the standard mode for a network that requires a Wi-Fi connection. In this way, the device will publish the data every minute on the smartcitizen.me platform. If there is an inserted micro SD card, the data will be stored in it as well. LED color Kit status Collecting data online Warning. Collecting data but not sending it online \u274c Error. Not collecting data Collecting data online but battery is low, charge the Kit Collecting data online, battery charging Collecting data online, battery charged Sleep-mode. Collecting data online and saving battery Warning The kit supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. But, it does not support WPA/WPA2 Enterprise networks such as EDUROAM or networks with captive portals such as those found in Airports and Hotels Error in network mode If you configure the SCK with a network that is not visible at the moment of configuring it, it will raise an error and it will not take data. Flash memory \u00b6 After firmware version 0.9.8 , a new flash memory feature was implemented. That changed completely the arrangement of sensor readings vs publication/storage, and how errors are handled. From there on, data is always stored in flash memory before stored in SD card or published over Wi-Fi . That means that data can be always recovered if there is a problem with the SD card or the connection to the Internet fails, i.e. if we lose connection, the SCK will still store data and publish it in batch once the network is back! Check and update your Kit software version Remember, you can check your SCK firmware version quickly following this guide . Later, learn here how to update it. Flash chip and sizes The flash chip S25FL064L that we use is an 8 MB SPI flash nonvolatile memory. The minimum erasable unit is a 4kb sector, the full memory contains 2,048 sectors with a total of 8,388,608 bytes or 8 MB. A normal reading group with the default urban board hardware installed is composed of 11 readings, hence we expect each reading to take 7 bytes: an average of 5 bytes for the reading itself plus 2 overhead bytes for SensorType and size. Each group should have a total of 77 bytes of readings, 2 bytes of size, 2 bytes of flags and 4 bytes of the time stamp. That means we can expect a normal group to be around 85 bytes. This means we can store almost 100,000 groups of readings, or around 70 days of readings with standard sensor hardware . This number can vary a little, though. About flash memory lifespan, rounding numbers we can say we have enough space to store 2 months (60 days) of readings, according to the Flash memory datasheet we have at least 100,000 erase cycles: 2 months per cycle means 200,000 months, so we can expect more than 16k years! . That can be very useful in many situations, for instance, where we cannot use permanent network connectivity, or we have intermittent electrical blackouts (standard battery required). Of course, everything has its limitations, and the flash memory follows a circular buffer , which means that when the flash memory is full, it will start overwriting data no matter if it was published or not. In a normal SCK, the flash memory will last for some weeks though, but it's better to always be on the safe side and not lose any data. When the SCK loses connection, after three attempts to connect , it will enter warning mode (see here ). After this, it will try again after 5 times the publication interval (by default 3'), which means, after the Internet connection is back the SCK will take a maximum of 15' to connect to it and start pushing data. The data publication is not immediate and will take some minutes. If you are in a hurry, click the user button twice (blue-red-blue mode) or reset the kit and data will start being posted right away. Be careful! Having a non-permanent WiFi connection means that we can also risk entering error mode if the SCK runs out of battery because it obtains the time from the internet (or from a phone during the SD card setup process). Losing the network connection and running out of battery means the device will lose the internal clock time, and the device will stop taking readings until it has power and can connect to the internet to sync, again. Debugging commands Check this guide for more debugging commands. SD card mode (offline) \u00b6 If we do not have an internet connection we can use the SD mode. In this case the device will record the data on the micro SD card. Later we can read the card using a card reader. The data can be visually spaced in a spreadsheet but also published on the smartcitizen.me platform using the UPLOAD CSV option. LED color Kit status Collecting data offline Warning. Collecting data but not storing it in sdcard \u274c Error. Not collecting data Collecting data offline but battery is low, charge the Kit Collecting data offline, battery charging Collecting data offline, battery charged Sleep-mode. Collecting data offline and saving battery Guide Check the guide on how to upload the sd card data here Weird files? The files in the sdcard have the following naming: YYYY-MM-DD.CSV, however, you will find in the some extra files (.01, .02...) These are data files that the sensor creates once there is a reset and, to avoid corruption, it creates a new file in the sd-card, by changing the file-extension. A reset takes place every night at 3-4am with the purpose to avoid data loss because a problem. The SCK then stores the data in a file with a sequential name, and does so by changing the filename to YYYY-MM-DD.01, .02\u2026 etc depending on the amount of resets it sees during that day. You can see the data and work with it by changing the name from YYYY-MM-DD.01 to YYYY-MM-DD_01.CSV. Check the guide on how to organise your data to automatise this. Especial status \u00b6 You will see these colors in special moments, mostly when the kit is booting or being updated. LED color Kit status Busy, please wait! Software update going on! Shell mode more info here Software Updates \u00b6 Sofware updates are release frequently in the Firmware repository . These updates will need to be applied periodically to the two main components of the SCK: the SAMD21 (main processor) and the ESP8266 (Wi-Fi module). Check the instructions under the Update the Firmware section for more information. Test plan You can find the Test plan, in case you are producing the SCK here .","title":"What is it?"},{"location":"Smart%20Citizen%20Kit/#smart-citizen-kit","text":"A note about versions The SCK 2.0 was the development version for the now commercially available SCK 2.1 sponsored thanks to the iSCAPE project under European Community\u2019s H2020 Programme under Grant Agreement No. 689954 Quick links Buy: seeedstudio.com Installation: start.smartcitizen.me Platform: smartcitizen.me Discuss: forum.smartcitizen.me Support: support@smartcitizen.me Something big?: info@smartcitizen.me Platform status: uptimerobot.com","title":"Smart Citizen Kit"},{"location":"Smart%20Citizen%20Kit/#what-is-it","text":"The Smart Citizen Kit is the core of what we call the Smart Citizen System: a complete set of modular hardware components aiming to provide tools for environmental monitoring , ranging from citizen science and educational activities to more advanced scientific research . The system is designed in a extendable way, with a central data logger (the Data Board ) with network connectivity to which the different components are branched. The system is based on the principle of reproducibility, also integrating non-hardware components such as a dedicated Storage platform and a Sensor analysis framework . On top of that, the system is meant to serve as a base solution for more complex settings , not only related with air quality monitoring. For that purpose, in addition to the Urban Board , the system also provides off-the-shelf support for a wide variety of third party sensors, using the expansion bus as a common port. One example is what we call the Smart Citizen Station : a full solution for low cost air pollution monitoring. The sensors Have a look a the supported sensors in the Firmware !","title":"What is it?"},{"location":"Smart%20Citizen%20Kit/#measurements","text":"All the Smart Citizen Kit new sensors generation measure at least air temperature, relative humidity, noise level, ambient light, barometric pressure and particulate matter (PM).","title":"Measurements"},{"location":"Smart%20Citizen%20Kit/#sck-21","text":"Here is the table summarising the sensors: Measurement Units Sensors Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light Lux Rohm BH1721FVC Barometric pressure Pa NXP MPL3115A26 Equivalent Carbon Dioxide ppm AMS CCS811 Volatile Organic Compounds ppb AMS CCS811 Particulate Matter PM 1 / 2.5 / 10 \u00b5g/m3 Planttower PMS 5003 Sensor performance Make sure you visit the sensor performance page for further information about the sensors.","title":"SCK 2.1"},{"location":"Smart%20Citizen%20Kit/#installation-instructions","text":"The sensor comes mounted and almost ready to be used: The first step is to connect the battery. The kit will light in red (configuration mode) and we will be able to configure it by following the instructions at start.smartcitizen.me . Detailed guide Have a look at this guide for a step-by-step installation. After the configuration process, data will be available on the SmartCitizen platform. You can explore the data there or download it using the CSV Download option (you can check a more detailed guide here )","title":"Installation instructions"},{"location":"Smart%20Citizen%20Kit/#power-management","text":"","title":"Power management"},{"location":"Smart%20Citizen%20Kit/#battery-duration","text":"The SCK comes with a 2000mAh LiPo battery. The battery is meant to be a complete power option for short-term measurements and a backup solution when the kit it is used for long periods. For long exposures, we recommend to permanently connect the USB to kit. The battery duration is dependent on which sensors are enabled or disabled. You will note that the kit turns itself off while operating on battery. Actually, this is what we call sleep-mode , an operation mode implemented to reduce consumption while on battery operation. Check the operation modes section below. PM Sensor management If you want to save battery, the basic interval for the sensors shouldn't be below 30s. This is because the minimum stabilisation time the PM sensor requires to take stable readings is around 15-20s. For this reason, the minimum interval available without turning off the PM sensor between readings is 30s . If a lower interval is required, the PM sensor will be permanently ON and battery will drain faster.","title":"Battery duration"},{"location":"Smart%20Citizen%20Kit/#battery-calculator","text":"You can use the battery calculator to estimate how much your battery would last. SCK Battery Calculator WIP! What's the SCK's Shell? Learn how to use the powerful SCK Shell. Check the guide . fetch('https://api.github.com/repos/fablabbcn/smartcitizen-tools/contents/calculator.htm') .then(function(response) { return response.json(); }).then(function(data) { var iframe = document.getElementById('github-iframe'); iframe.src = 'data:text/html;base64,' + encodeURIComponent(data['content']); });","title":"Battery calculator"},{"location":"Smart%20Citizen%20Kit/#battery-charging","text":"The SCK has a micro USB port and can be charged like any smartphone or tablet using a dedicated adapter or a computer USB port. We recommend using an external USB power adaptor, instead of a computer USB port, for quicker charging. Autonomy can be extended by using a Power Bank, or a 5V PV Panel .","title":"Battery charging"},{"location":"Smart%20Citizen%20Kit/#power-supply","text":"The SCK needs 5V input via the micro USB connector. A normal 5V power charger can be used, although for outdoor developments we recommend using a waterproof power supply. Find more info in the power supply section .","title":"Power Supply"},{"location":"Smart%20Citizen%20Kit/#user-feedback","text":"The LED serves as an indication of the battery status. If the LED is flashing orange it indicates that the battery must be charged. The battery takes about 4 hours to fully charge. When the battery is fully charged, the LED will change from orange to green . Remember that in addition to these colors you will have the state color of the kit: configuration, network and sd. More details Find more details under the data board section","title":"User feedback"},{"location":"Smart%20Citizen%20Kit/#user-interfaces","text":"The data board features a set of user interfaces which provide feedback to the user, as well as two buttons with different functionalities. The main RGB LED provides general feedback of the data board status. Additionally, two buttons are provided for user action. A hardware reset button, which forces a power cut to the board, and a power button, used to change the device's mode, turn on and off the device, and to perform a factory reset. You can see both buttons below:","title":"User interfaces"},{"location":"Smart%20Citizen%20Kit/#the-button","text":"The main button interaction is detailed below: Function Button action ON Push the button OFF Push the button for 5 seconds CHANGE MODE Push the button multiple times to choose: Setup Wi-Fi Pink FACTORY RESET Push the button 15 seconds for a full reset An example is shown below: Troubleshooting Have a look at the troubleshoothing section to check how you can use the buttons in case of problems with your SCK!","title":"The button"},{"location":"Smart%20Citizen%20Kit/#operation-modes","text":"New WARNING feature After release 0.9.8 , a new warning feature was introduced. In an overall sense, this is the interpretation of each state: Normal : no problem! Slow fading in the LED. Warning : can take readings, but can't save them in the sdcard or can't send them to the platform (problem with network). Data is stored in the onboard Flash memory and will be saved after the problem is solved - either network comes back or the sdcard is OK. Partial blink in LED. Error : can't take readings. Either there is \"no time\", or there is a big problem that prevents data to be read. Full fast blink in LED. Remember, you can check your SCK firmware version quickly following this guide .","title":"Operation modes"},{"location":"Smart%20Citizen%20Kit/#setup-mode","text":"In this mode, the Kit is ready to be configured in network mode or SD card in start.smartcitizen.me . LED color Kit status Ready to be setup Ready to be setup but battery is low, charge the Kit Ready to be setup, battery charging Ready to be setup, battery charged","title":"  Setup mode"},{"location":"Smart%20Citizen%20Kit/#wi-fi-mode","text":"This is the standard mode for a network that requires a Wi-Fi connection. In this way, the device will publish the data every minute on the smartcitizen.me platform. If there is an inserted micro SD card, the data will be stored in it as well. LED color Kit status Collecting data online Warning. Collecting data but not sending it online \u274c Error. Not collecting data Collecting data online but battery is low, charge the Kit Collecting data online, battery charging Collecting data online, battery charged Sleep-mode. Collecting data online and saving battery Warning The kit supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. But, it does not support WPA/WPA2 Enterprise networks such as EDUROAM or networks with captive portals such as those found in Airports and Hotels Error in network mode If you configure the SCK with a network that is not visible at the moment of configuring it, it will raise an error and it will not take data.","title":"  Wi-Fi mode"},{"location":"Smart%20Citizen%20Kit/#flash-memory","text":"After firmware version 0.9.8 , a new flash memory feature was implemented. That changed completely the arrangement of sensor readings vs publication/storage, and how errors are handled. From there on, data is always stored in flash memory before stored in SD card or published over Wi-Fi . That means that data can be always recovered if there is a problem with the SD card or the connection to the Internet fails, i.e. if we lose connection, the SCK will still store data and publish it in batch once the network is back! Check and update your Kit software version Remember, you can check your SCK firmware version quickly following this guide . Later, learn here how to update it. Flash chip and sizes The flash chip S25FL064L that we use is an 8 MB SPI flash nonvolatile memory. The minimum erasable unit is a 4kb sector, the full memory contains 2,048 sectors with a total of 8,388,608 bytes or 8 MB. A normal reading group with the default urban board hardware installed is composed of 11 readings, hence we expect each reading to take 7 bytes: an average of 5 bytes for the reading itself plus 2 overhead bytes for SensorType and size. Each group should have a total of 77 bytes of readings, 2 bytes of size, 2 bytes of flags and 4 bytes of the time stamp. That means we can expect a normal group to be around 85 bytes. This means we can store almost 100,000 groups of readings, or around 70 days of readings with standard sensor hardware . This number can vary a little, though. About flash memory lifespan, rounding numbers we can say we have enough space to store 2 months (60 days) of readings, according to the Flash memory datasheet we have at least 100,000 erase cycles: 2 months per cycle means 200,000 months, so we can expect more than 16k years! . That can be very useful in many situations, for instance, where we cannot use permanent network connectivity, or we have intermittent electrical blackouts (standard battery required). Of course, everything has its limitations, and the flash memory follows a circular buffer , which means that when the flash memory is full, it will start overwriting data no matter if it was published or not. In a normal SCK, the flash memory will last for some weeks though, but it's better to always be on the safe side and not lose any data. When the SCK loses connection, after three attempts to connect , it will enter warning mode (see here ). After this, it will try again after 5 times the publication interval (by default 3'), which means, after the Internet connection is back the SCK will take a maximum of 15' to connect to it and start pushing data. The data publication is not immediate and will take some minutes. If you are in a hurry, click the user button twice (blue-red-blue mode) or reset the kit and data will start being posted right away. Be careful! Having a non-permanent WiFi connection means that we can also risk entering error mode if the SCK runs out of battery because it obtains the time from the internet (or from a phone during the SD card setup process). Losing the network connection and running out of battery means the device will lose the internal clock time, and the device will stop taking readings until it has power and can connect to the internet to sync, again. Debugging commands Check this guide for more debugging commands.","title":"Flash memory"},{"location":"Smart%20Citizen%20Kit/#sd-card-mode-offline","text":"If we do not have an internet connection we can use the SD mode. In this case the device will record the data on the micro SD card. Later we can read the card using a card reader. The data can be visually spaced in a spreadsheet but also published on the smartcitizen.me platform using the UPLOAD CSV option. LED color Kit status Collecting data offline Warning. Collecting data but not storing it in sdcard \u274c Error. Not collecting data Collecting data offline but battery is low, charge the Kit Collecting data offline, battery charging Collecting data offline, battery charged Sleep-mode. Collecting data offline and saving battery Guide Check the guide on how to upload the sd card data here Weird files? The files in the sdcard have the following naming: YYYY-MM-DD.CSV, however, you will find in the some extra files (.01, .02...) These are data files that the sensor creates once there is a reset and, to avoid corruption, it creates a new file in the sd-card, by changing the file-extension. A reset takes place every night at 3-4am with the purpose to avoid data loss because a problem. The SCK then stores the data in a file with a sequential name, and does so by changing the filename to YYYY-MM-DD.01, .02\u2026 etc depending on the amount of resets it sees during that day. You can see the data and work with it by changing the name from YYYY-MM-DD.01 to YYYY-MM-DD_01.CSV. Check the guide on how to organise your data to automatise this.","title":"  SD card mode (offline)"},{"location":"Smart%20Citizen%20Kit/#especial-status","text":"You will see these colors in special moments, mostly when the kit is booting or being updated. LED color Kit status Busy, please wait! Software update going on! Shell mode more info here","title":"Especial status"},{"location":"Smart%20Citizen%20Kit/#software-updates","text":"Sofware updates are release frequently in the Firmware repository . These updates will need to be applied periodically to the two main components of the SCK: the SAMD21 (main processor) and the ESP8266 (Wi-Fi module). Check the instructions under the Update the Firmware section for more information. Test plan You can find the Test plan, in case you are producing the SCK here .","title":"Software Updates"},{"location":"Smart%20Citizen%20Station/","text":"Smart Citizen Station \u00b6 The Smart Citizen Station is a modular open-source environmental monitoring system . Multiple sensors can be added easily added, expanding the capabilities of the installation or replaced when they are damaged or the sensors lifetime is over. From a costs perspective, while being more expensive than the Smart Citizen Kit, it is also conceived as a low-cost solution. The design builds on top of the Smart Citizen Kit, adding an extra set of more accurate sensors, primarily aimed at measuring air pollutants. It aims at providing a solution that can be used by Citizens and Researchers to gather advanced air pollution data not only from a scientific point of view but also as a tool to engage local communities on air pollution-related issues. Questions? How can we collaborate for my next research project? How much will it cost to make one? Is it hard to install? Contact our team at info@smartcitizen.me Intentionally fabbable The Smart Citizen Station enclosure, as well as some of the electronics, can be fabricated and assembled in a Fablab . By doing so, we hope to encourage fully open environmental systems , ensuring reproducibility through accessible resources. The sensors can include some, or all of : Up to 16 analog sensors! , some of which can be gas sensors detailed as below Gas sensors for gases such as B4 or A4 sensors from Alphasense Ltd. such as: CO, NO2, NO, O3, SO2, H2S. These are normally in configurations of 2, 4, or 6 sensors (normally O3 needs NO2 to compensate for cross-sensitivity) CO2 NDIR Sensor with a sensirion SCD30 PM sensors from Plantower or others similar optical particle counters ( OPC ) Temperature probe : external temperature probe for more reliable air temperature sensing Ultra-violet radiation Noise levels and FFT spectrum from the Smart Citizen Kit Environmental metrics : temperature, humidity, ambient pressure from the Smart Citizen Kit From the ground up The station uses the same core functionality, interface and feedback as the Smart Citizen Kit. Make sure you are familiar with them before jumping into the station! User feedback LED states and operation modes User interfaces Dimensions If you are looking at the dimensions and mechanical/electrical information about the Smart Citizen Station, have a look at the enclosures repository Exposure methods \u00b6 Two possible options are available: Passive sensor exposure Forced ventilation sensor exposure (experimental) Passive exposure example Power \u00b6 Currently, the Smart Citizen Station is only available with an external power supply (230VAC to 5V). Find more info in the power supply section . Battery operation? The Smart Citizen Station currently does not support battery operation. Connectivity \u00b6 Currently, the Smart Citizen Station requires a Wi-Fi connection to report data to the online platform and it can also store data offline locally. Read more about the operation modes and the supported networks. Connectivity Units We tested customized connectivity units capable of deploying a local Wi-Fi network where multiple Smart Citizen Station can connect, data can be relied over GSM (\u00be/5G) or other IoT connectivity standards. Development versions \u00b6 Final iSCAPE Station version (iSCAPE-V2.0) A note about versions The iScape Living Lab Station 1.0 was the development version for the 2.0 version. It was sponsored thanks to the iSCAPE project under European Community\u2019s H2020 Programme under Grant Agreement No. 689954 Middle iSCAPE Station version (iSCAPE-V1.0)","title":"What is it?"},{"location":"Smart%20Citizen%20Station/#smart-citizen-station","text":"The Smart Citizen Station is a modular open-source environmental monitoring system . Multiple sensors can be added easily added, expanding the capabilities of the installation or replaced when they are damaged or the sensors lifetime is over. From a costs perspective, while being more expensive than the Smart Citizen Kit, it is also conceived as a low-cost solution. The design builds on top of the Smart Citizen Kit, adding an extra set of more accurate sensors, primarily aimed at measuring air pollutants. It aims at providing a solution that can be used by Citizens and Researchers to gather advanced air pollution data not only from a scientific point of view but also as a tool to engage local communities on air pollution-related issues. Questions? How can we collaborate for my next research project? How much will it cost to make one? Is it hard to install? Contact our team at info@smartcitizen.me Intentionally fabbable The Smart Citizen Station enclosure, as well as some of the electronics, can be fabricated and assembled in a Fablab . By doing so, we hope to encourage fully open environmental systems , ensuring reproducibility through accessible resources. The sensors can include some, or all of : Up to 16 analog sensors! , some of which can be gas sensors detailed as below Gas sensors for gases such as B4 or A4 sensors from Alphasense Ltd. such as: CO, NO2, NO, O3, SO2, H2S. These are normally in configurations of 2, 4, or 6 sensors (normally O3 needs NO2 to compensate for cross-sensitivity) CO2 NDIR Sensor with a sensirion SCD30 PM sensors from Plantower or others similar optical particle counters ( OPC ) Temperature probe : external temperature probe for more reliable air temperature sensing Ultra-violet radiation Noise levels and FFT spectrum from the Smart Citizen Kit Environmental metrics : temperature, humidity, ambient pressure from the Smart Citizen Kit From the ground up The station uses the same core functionality, interface and feedback as the Smart Citizen Kit. Make sure you are familiar with them before jumping into the station! User feedback LED states and operation modes User interfaces Dimensions If you are looking at the dimensions and mechanical/electrical information about the Smart Citizen Station, have a look at the enclosures repository","title":"Smart Citizen Station"},{"location":"Smart%20Citizen%20Station/#exposure-methods","text":"Two possible options are available: Passive sensor exposure Forced ventilation sensor exposure (experimental) Passive exposure example","title":"Exposure methods"},{"location":"Smart%20Citizen%20Station/#power","text":"Currently, the Smart Citizen Station is only available with an external power supply (230VAC to 5V). Find more info in the power supply section . Battery operation? The Smart Citizen Station currently does not support battery operation.","title":"Power"},{"location":"Smart%20Citizen%20Station/#connectivity","text":"Currently, the Smart Citizen Station requires a Wi-Fi connection to report data to the online platform and it can also store data offline locally. Read more about the operation modes and the supported networks. Connectivity Units We tested customized connectivity units capable of deploying a local Wi-Fi network where multiple Smart Citizen Station can connect, data can be relied over GSM (\u00be/5G) or other IoT connectivity standards.","title":"Connectivity"},{"location":"Smart%20Citizen%20Station/#development-versions","text":"Final iSCAPE Station version (iSCAPE-V2.0) A note about versions The iScape Living Lab Station 1.0 was the development version for the 2.0 version. It was sponsored thanks to the iSCAPE project under European Community\u2019s H2020 Programme under Grant Agreement No. 689954 Middle iSCAPE Station version (iSCAPE-V1.0)","title":"Development versions"},{"location":"Troubleshooting/","text":"Troubleshooting \u00b6 First, reboot your kit \u00b6 The magical reset button Before trying anything else, the data board of your SCK comes with a very functional button that makes a hardware reset on the whole device. This is probably our best first try once the kit has any problem. You can see it here: Some issues this might help solving: The kit hasn't been posting data for a while The kit doesn't respond to user interaction with the ON/OFF button The LED is fixed and does not react to anything ... Pressing the reset button will not delete any configuration, it will simply restart your device. The light will go off and on and the device will start again with a white LED. This button is also to be used when reflashing the firmware, by double clicking it. Have a look at the guide here . You can also perform a reboot by disconnecting the battery and the USB cable so that the kit is restarted. In this way we will not lose any data or configuration. However, if we are in SD card mode , the kit won't know what time it is and we will need to give to him. For doing so: Press the ON/OFF button once. The LED should be breathing RED. Connect to the network SmartCitizen[...] and set it up again to log in SD card mode . The network won't show up \u00b6 Before configuring the Kit, if the SmartCitizen[...] network doesn't show up, make sure the LED is red. If not, press the button until the LED turns red. Factory reset your kit \u00b6 You can fully reset the Kit to the default settings so you can register again your device. Press the main button for 15 seconds . After 5 seconds the light will go off and will go on again after 15 seconds. Then you can release the button and your device will be fully resetted as a brand new Kit. The LED does not turn on and the kit does not work \u00b6 First of all, push the kit button. Maybe it's simply off. If this does not work, most likely the kit has been left without battery. You will have to charge it using the USB charger. Any other mobile charger will also work. We will know that it is charging when the LED emits orange pulses and once the battery is charged it will emit green . If the kit does not respond at all, it is probably worth trying with another USB cable, in case there is some problem there. If not, drop us an email or post on the forum The kit does not store the data on the SD card \u00b6 Some SD cards may have problems over time. We can try formatting it, but in case it does not work any micro SD card we buy at any mobile or computer store it will work. The size is not important and any micro SD or micro SDHC 512MB card up to 32GB will work. The kit does not boot with the PMS Sensor \u00b6 Make sure that you power the Smart Citizen Kit with a good enough USB cable and with an adaptor that can provide at least 1A. We have found some issues when powering the sensor with a thin cable, or from a weak power source, like a screen. Known (fixed) issues \u00b6 In this section, we will detail some problems you might have found in the early firmware versions of SCK 2.1. Light sensor reads 0 and temperature/humidity sensor does not work \u00b6 The issue is caused due to a firmware bug (light) and a problem with some SHT31 sensors (also fixed by firmware). A full explanation is detailed in the forum and the fix was released with V0.9.4 of the SAMD firmware. Noise readings don't go below 45dBA \u00b6 This issue is caused due to a firmware bug that initialized badly the I2S microphone in SCK2.0 and SCK2.1 sensors. A full explanation is detailed in the forum and and the fix was released with a pre-releasue V0.9.8 of the SAMD firmware.","title":"Troubleshooting"},{"location":"Troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"Troubleshooting/#first-reboot-your-kit","text":"The magical reset button Before trying anything else, the data board of your SCK comes with a very functional button that makes a hardware reset on the whole device. This is probably our best first try once the kit has any problem. You can see it here: Some issues this might help solving: The kit hasn't been posting data for a while The kit doesn't respond to user interaction with the ON/OFF button The LED is fixed and does not react to anything ... Pressing the reset button will not delete any configuration, it will simply restart your device. The light will go off and on and the device will start again with a white LED. This button is also to be used when reflashing the firmware, by double clicking it. Have a look at the guide here . You can also perform a reboot by disconnecting the battery and the USB cable so that the kit is restarted. In this way we will not lose any data or configuration. However, if we are in SD card mode , the kit won't know what time it is and we will need to give to him. For doing so: Press the ON/OFF button once. The LED should be breathing RED. Connect to the network SmartCitizen[...] and set it up again to log in SD card mode .","title":"First, reboot your kit"},{"location":"Troubleshooting/#the-network-wont-show-up","text":"Before configuring the Kit, if the SmartCitizen[...] network doesn't show up, make sure the LED is red. If not, press the button until the LED turns red.","title":"The network won't show up"},{"location":"Troubleshooting/#factory-reset-your-kit","text":"You can fully reset the Kit to the default settings so you can register again your device. Press the main button for 15 seconds . After 5 seconds the light will go off and will go on again after 15 seconds. Then you can release the button and your device will be fully resetted as a brand new Kit.","title":"Factory reset your kit"},{"location":"Troubleshooting/#the-led-does-not-turn-on-and-the-kit-does-not-work","text":"First of all, push the kit button. Maybe it's simply off. If this does not work, most likely the kit has been left without battery. You will have to charge it using the USB charger. Any other mobile charger will also work. We will know that it is charging when the LED emits orange pulses and once the battery is charged it will emit green . If the kit does not respond at all, it is probably worth trying with another USB cable, in case there is some problem there. If not, drop us an email or post on the forum","title":"The LED does not turn on and the kit does not work"},{"location":"Troubleshooting/#the-kit-does-not-store-the-data-on-the-sd-card","text":"Some SD cards may have problems over time. We can try formatting it, but in case it does not work any micro SD card we buy at any mobile or computer store it will work. The size is not important and any micro SD or micro SDHC 512MB card up to 32GB will work.","title":"The kit does not store the data on the SD card"},{"location":"Troubleshooting/#the-kit-does-not-boot-with-the-pms-sensor","text":"Make sure that you power the Smart Citizen Kit with a good enough USB cable and with an adaptor that can provide at least 1A. We have found some issues when powering the sensor with a thin cable, or from a weak power source, like a screen.","title":"The kit does not boot with the PMS Sensor"},{"location":"Troubleshooting/#known-fixed-issues","text":"In this section, we will detail some problems you might have found in the early firmware versions of SCK 2.1.","title":"Known (fixed) issues"},{"location":"Troubleshooting/#light-sensor-reads-0-and-temperaturehumidity-sensor-does-not-work","text":"The issue is caused due to a firmware bug (light) and a problem with some SHT31 sensors (also fixed by firmware). A full explanation is detailed in the forum and the fix was released with V0.9.4 of the SAMD firmware.","title":"Light sensor reads 0 and temperature/humidity sensor does not work"},{"location":"Troubleshooting/#noise-readings-dont-go-below-45dba","text":"This issue is caused due to a firmware bug that initialized badly the I2S microphone in SCK2.0 and SCK2.1 sensors. A full explanation is detailed in the forum and and the fix was released with a pre-releasue V0.9.8 of the SAMD firmware.","title":"Noise readings don't go below 45dBA"},{"location":"_FAQ/","text":"Frequently asked questions \u00b6 Can the sensors be placed outdoors? \u00b6 Yes. The sensor is designed for both indoors and outdoors use. But if you\u2019re planning to use it outdoors, you will have to consider purchasing or making a rainproof enclosure. Can I make my own rainproof enclosure? \u00b6 Of course! The manufacturing files for the 3D printed enclosure will be available to download in the Enclosures repository . Throughout the history of the Smart Citizen project, we\u2019ve seen many inventive solutions for placing the sensor outdoors. Can I charge the sensors with a solar panel? \u00b6 Sure! But note that the sensor requires a 5V solar panel to work properly. More information here Can I add external sensors to the system? \u00b6 Yes. The sensor has an independently configurable auxiliary bus at 3.3V with a SEEED Grove connector. The Bus has native support for I2C, but it can also be setup on firmware as a GPIO or UART. It can supply power up to 750mA, and it can be enabled or disabled by software. More info here What happens if there is a loss of network connectivity? \u00b6 If the sensor is working in network mode and at any time the network is not available, it will store the data on its internal memory and publish all the collected data as soon as the network is available again. Which external sensors can be added? \u00b6 Quite a few! Check here Will I be able to access the collected data? \u00b6 Of course! The data collected by your sensor is available for anyone on the Smart Citizen Platform , and you can download it at any time as a CSV file. Besides, you can also use the API to built custom applications to interact with your device. If you are familiar with python, check also scdata How does the kit record the data? \u00b6 The sensor can work in network and SD card modes. In network mode, the sensor publish data to the SC platform over Wi-Fi (every minute by default, but configurable). In SD card mode, all the collected data is stored locally in CSV format, and it can be later uploaded manually to the platform using the \"Manual Data Upload\" option. What networks does it support? \u00b6 The SCK supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. However, like many other embedded devices such as Apple TV\u00ae or Chromecast\u00ae, it does not support networks with captive portals such as those found in Airports and Hotels. Currently, it also does not WPA/WPA2 Enterprise networks such as EDUROAM. However, they will be supported in the future after a firmware updated. I have a firewall. What do I need to know? \u00b6 Here are the ports and protocols used by the Kit to communicate with the platform: Service Function Protocol Port Address MQTT Send Data TCP 80/443 mqtt.smartcitizen.me NTP Sync Time UDP 80 ntp.smartcitizen.me Notice we use custom ports already to avoid some firewall restrictions Is there a mobile phone app that lets me view the data? \u00b6 Currently there is an android app available, but we are working to make the website fully mobile device friendly, so that no mobile phone app is required. We would rather focus the time of our small team on the kits themselves instead of maintaining apps. So our final aim is to be app free, but fully mobile friendly. How accurate are the measurements? \u00b6 Weather, noise, light and PM sensor measurements have been calibrated and validated against reference sensors through both in-house and external validations and they provide accurate data. Make sure you check the performance section for more information. Are there any notable case studies using similar sensors? \u00b6 Yes! Check all of them here . A particularly interesting case study is the Making Sense project at Plac\u0327a del Sol in Barcelona, where a group of 15 technology enthusiasts and environmentalists joined a community of neighbours from a middle-class district that has been suffering from noise issues due to the nightlife in the square. You can find more information about this case study at: www.making-sense.eu What happens if I want to move the device or give it to someone else? \u00b6 Just by pressing the button you can fully reset your sensor and configure it again using your account or a new one. All your previous data will remain available on the platform as it was before the reset. What about using other wireless technologies? \u00b6 We are working closely with Barcelona\u2019s The Things Network community to develop a TTN enabled sensor. A LoRA prototype has been tested, but we don\u2019t have dates for the final version yet. BLE, Zigbee, or others are not currently supported, and except for G5, we are not planning to implement them unless there is a custom hardware integration demand. Can I remove my data from the platform? \u00b6 Of course. You are the owner of the data that you collect, and you can download and/or delete all your sensor data at any time. How can I retrieve the MAC address from my device? \u00b6 You can retrieve the MAC address with two methods: either you can use your phone (see below), or follow this guide if you want to try out the console interface in the kit. Using your phone Set the SCK in setup mode (press the button once, the LED should turn red). With your phone, join the Wi-Fi network created by your Kit; it should be SmartCitizen[\u2026]. Once you are on your Kit configuration page, go to the Info section. You will see a page with all the information about your Kit. Your MAC address is listed as seen below: What batteries are shipped with the kits? \u00b6 The default SCK 2.1 Kits come with a 2000mAh LiPo battery model PL804050 (see datasheet and material safety data sheets ). For custom projects we also offer a bigger 6000mAh LiPo battery model DTP605068 (see datasheet and material safety data sheets ). We are working on a new dynamic battery calculator. Currently, you can find some approximate data here for the SCK 2.1. Are the electronics waterproof? \u00b6 No. They cannot be exposed to water, high humidity, corrosive environments, or moisture. Always use an enclosure when exposed outdoors. Highly humid environments can provoke corrosion in the sensors (symptom of this is blue powder near the sensors in the urban board). To help protect them, we recommend using transparent nail polish in these areas. Do not obscure the areas in red : If you are using any enclosure from the repository , we also recommend using a filtration foam (PPI-20/10) like this one . More info here","title":"FAQ"},{"location":"_FAQ/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"_FAQ/#can-the-sensors-be-placed-outdoors","text":"Yes. The sensor is designed for both indoors and outdoors use. But if you\u2019re planning to use it outdoors, you will have to consider purchasing or making a rainproof enclosure.","title":"Can the sensors be placed outdoors?"},{"location":"_FAQ/#can-i-make-my-own-rainproof-enclosure","text":"Of course! The manufacturing files for the 3D printed enclosure will be available to download in the Enclosures repository . Throughout the history of the Smart Citizen project, we\u2019ve seen many inventive solutions for placing the sensor outdoors.","title":"Can I make my own rainproof enclosure?"},{"location":"_FAQ/#can-i-charge-the-sensors-with-a-solar-panel","text":"Sure! But note that the sensor requires a 5V solar panel to work properly. More information here","title":"Can I charge the sensors with a solar panel?"},{"location":"_FAQ/#can-i-add-external-sensors-to-the-system","text":"Yes. The sensor has an independently configurable auxiliary bus at 3.3V with a SEEED Grove connector. The Bus has native support for I2C, but it can also be setup on firmware as a GPIO or UART. It can supply power up to 750mA, and it can be enabled or disabled by software. More info here","title":"Can I add external sensors to the system?"},{"location":"_FAQ/#what-happens-if-there-is-a-loss-of-network-connectivity","text":"If the sensor is working in network mode and at any time the network is not available, it will store the data on its internal memory and publish all the collected data as soon as the network is available again.","title":"What happens if there is a loss of network connectivity?"},{"location":"_FAQ/#which-external-sensors-can-be-added","text":"Quite a few! Check here","title":"Which external sensors can be added?"},{"location":"_FAQ/#will-i-be-able-to-access-the-collected-data","text":"Of course! The data collected by your sensor is available for anyone on the Smart Citizen Platform , and you can download it at any time as a CSV file. Besides, you can also use the API to built custom applications to interact with your device. If you are familiar with python, check also scdata","title":"Will I be able to access the collected data?"},{"location":"_FAQ/#how-does-the-kit-record-the-data","text":"The sensor can work in network and SD card modes. In network mode, the sensor publish data to the SC platform over Wi-Fi (every minute by default, but configurable). In SD card mode, all the collected data is stored locally in CSV format, and it can be later uploaded manually to the platform using the \"Manual Data Upload\" option.","title":"How does the kit record the data?"},{"location":"_FAQ/#what-networks-does-it-support","text":"The SCK supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. However, like many other embedded devices such as Apple TV\u00ae or Chromecast\u00ae, it does not support networks with captive portals such as those found in Airports and Hotels. Currently, it also does not WPA/WPA2 Enterprise networks such as EDUROAM. However, they will be supported in the future after a firmware updated.","title":"What networks does it support?"},{"location":"_FAQ/#i-have-a-firewall-what-do-i-need-to-know","text":"Here are the ports and protocols used by the Kit to communicate with the platform: Service Function Protocol Port Address MQTT Send Data TCP 80/443 mqtt.smartcitizen.me NTP Sync Time UDP 80 ntp.smartcitizen.me Notice we use custom ports already to avoid some firewall restrictions","title":"I have a firewall. What do I need to know?"},{"location":"_FAQ/#is-there-a-mobile-phone-app-that-lets-me-view-the-data","text":"Currently there is an android app available, but we are working to make the website fully mobile device friendly, so that no mobile phone app is required. We would rather focus the time of our small team on the kits themselves instead of maintaining apps. So our final aim is to be app free, but fully mobile friendly.","title":"Is there a mobile phone app that lets me view the data?"},{"location":"_FAQ/#how-accurate-are-the-measurements","text":"Weather, noise, light and PM sensor measurements have been calibrated and validated against reference sensors through both in-house and external validations and they provide accurate data. Make sure you check the performance section for more information.","title":"How accurate are the measurements?"},{"location":"_FAQ/#are-there-any-notable-case-studies-using-similar-sensors","text":"Yes! Check all of them here . A particularly interesting case study is the Making Sense project at Plac\u0327a del Sol in Barcelona, where a group of 15 technology enthusiasts and environmentalists joined a community of neighbours from a middle-class district that has been suffering from noise issues due to the nightlife in the square. You can find more information about this case study at: www.making-sense.eu","title":"Are there any notable case studies using similar sensors?"},{"location":"_FAQ/#what-happens-if-i-want-to-move-the-device-or-give-it-to-someone-else","text":"Just by pressing the button you can fully reset your sensor and configure it again using your account or a new one. All your previous data will remain available on the platform as it was before the reset.","title":"What happens if I want to move the device or give it to someone else?"},{"location":"_FAQ/#what-about-using-other-wireless-technologies","text":"We are working closely with Barcelona\u2019s The Things Network community to develop a TTN enabled sensor. A LoRA prototype has been tested, but we don\u2019t have dates for the final version yet. BLE, Zigbee, or others are not currently supported, and except for G5, we are not planning to implement them unless there is a custom hardware integration demand.","title":"What about using other wireless technologies?"},{"location":"_FAQ/#can-i-remove-my-data-from-the-platform","text":"Of course. You are the owner of the data that you collect, and you can download and/or delete all your sensor data at any time.","title":"Can I remove my data from the platform?"},{"location":"_FAQ/#how-can-i-retrieve-the-mac-address-from-my-device","text":"You can retrieve the MAC address with two methods: either you can use your phone (see below), or follow this guide if you want to try out the console interface in the kit. Using your phone Set the SCK in setup mode (press the button once, the LED should turn red). With your phone, join the Wi-Fi network created by your Kit; it should be SmartCitizen[\u2026]. Once you are on your Kit configuration page, go to the Info section. You will see a page with all the information about your Kit. Your MAC address is listed as seen below:","title":"How can I retrieve the MAC address from my device?"},{"location":"_FAQ/#what-batteries-are-shipped-with-the-kits","text":"The default SCK 2.1 Kits come with a 2000mAh LiPo battery model PL804050 (see datasheet and material safety data sheets ). For custom projects we also offer a bigger 6000mAh LiPo battery model DTP605068 (see datasheet and material safety data sheets ). We are working on a new dynamic battery calculator. Currently, you can find some approximate data here for the SCK 2.1.","title":"What batteries are shipped with the kits?"},{"location":"_FAQ/#are-the-electronics-waterproof","text":"No. They cannot be exposed to water, high humidity, corrosive environments, or moisture. Always use an enclosure when exposed outdoors. Highly humid environments can provoke corrosion in the sensors (symptom of this is blue powder near the sensors in the urban board). To help protect them, we recommend using transparent nail polish in these areas. Do not obscure the areas in red : If you are using any enclosure from the repository , we also recommend using a filtration foam (PPI-20/10) like this one . More info here","title":"Are the electronics waterproof?"},{"location":"Components/","text":"Hardware Architecture \u00b6 The Smart Citizen sensor portfolio aims to create a boilerplate for individuals and communities with different sensing expertise levels in a modular, expandable and intuitive way . Building on the legacy of previous Smart Citizen Kit generations, the hardware is especially aimed at providing meaningful data insights on a low budget. The core of the system is a central data logger with network connectivity to which the different components can be connected and aims to give support to a wide range of activities ranging from education to more advanced scientific research, in various environmental fields such as air, water or soil quality . A bit of philosophy The hardware architecture is always evolving , and it will always remain as a set of tools for experimentation. As so, it should be seen more as a toolset for communities, research, education, and not as a final commercial product with full-fledged big-corporation-type-of-support . Core \u00b6 The core system provides the logging, interface and management features creating a solid while highly configurable framework for environmental monitoring activities. It's made out of the two main components listed below: Data Board : A datalogger at the heart of the sensors architecure supporting the Smart Citizen Kit and the Smart Citizen Stations . Firmware : The software running inside the Data Board. Air \u00b6 Sensor Boards: Multiple sensor board have been developed. They can be combined to built the different sensor solutions as the Smart Citizen Kit and the Smart Citizen Stations : Urban Sensor Board : A selection of low-cost sensors in a board ready to measure the urban environment: temperature, humidity, noise, light, and PM2.5, among others. Together with the Data Board they create the Smart Citizen Kit . PM Sensor Board : An auxiliary board capable of driving two Particulate Matter sensor as well as other auxiliary sensors required for specific deployments as an external temperature sensor or an anemometer. It is used in the Smart Citizen Stations . Gas Pro Sensor Board : An auxiliary board driving 3 Alphasense Ltd. Electrochemical Series B Gas Sensors designed for ultra-low noise, high-performance and low power operation. It is used in the Smart Citizen Stations for sensors with no offset voltage compensation, i.e. it's not valid for NO, NO2 or OX sensors Analog Sensors Board : An auxiliary board using a high-resolution ADC capable of reading 4 or 8 analog channels at 16bit resolution. It is used in the Smart Citizen Stations for the Analog front-end by Alphasense Ltd. which interface with any type of Electrochemical Series B Gas Sensors (NO, NO2 or OX sensors as well) Expand the SCK Check how to expand the SCK for air quality in the auxiliary connector section Soil and Water \u00b6 Having a robust portfolio of the sensor for measuring soil and water characteristics is a need found by many research communities. In this direction, we include a collection of sensors that despite not being low cost or open source, they are still affordable and well documented when compared to other commercial solution. From a cost perspective, they are not aimed at being massively deployed but instead used individually in a specific site for specific needs. Take a deeper look Soil and water sensors are fully detailed in the Soil and water section . Open Source \u00b6 We're against black boxes! The entire project it is released under open source licenses:\u2028 Hardware components: CERN Open Hardware License v1.2 Core firmware: GNU GPL v3.0 Software platform: GNU AGLP v3.0 Info Check the Source files section for each component and explore the software source code and the hardware blueprints.","title":"Hardware Ecosystem"},{"location":"Components/#hardware-architecture","text":"The Smart Citizen sensor portfolio aims to create a boilerplate for individuals and communities with different sensing expertise levels in a modular, expandable and intuitive way . Building on the legacy of previous Smart Citizen Kit generations, the hardware is especially aimed at providing meaningful data insights on a low budget. The core of the system is a central data logger with network connectivity to which the different components can be connected and aims to give support to a wide range of activities ranging from education to more advanced scientific research, in various environmental fields such as air, water or soil quality . A bit of philosophy The hardware architecture is always evolving , and it will always remain as a set of tools for experimentation. As so, it should be seen more as a toolset for communities, research, education, and not as a final commercial product with full-fledged big-corporation-type-of-support .","title":"Hardware Architecture"},{"location":"Components/#core","text":"The core system provides the logging, interface and management features creating a solid while highly configurable framework for environmental monitoring activities. It's made out of the two main components listed below: Data Board : A datalogger at the heart of the sensors architecure supporting the Smart Citizen Kit and the Smart Citizen Stations . Firmware : The software running inside the Data Board.","title":"Core"},{"location":"Components/#air","text":"Sensor Boards: Multiple sensor board have been developed. They can be combined to built the different sensor solutions as the Smart Citizen Kit and the Smart Citizen Stations : Urban Sensor Board : A selection of low-cost sensors in a board ready to measure the urban environment: temperature, humidity, noise, light, and PM2.5, among others. Together with the Data Board they create the Smart Citizen Kit . PM Sensor Board : An auxiliary board capable of driving two Particulate Matter sensor as well as other auxiliary sensors required for specific deployments as an external temperature sensor or an anemometer. It is used in the Smart Citizen Stations . Gas Pro Sensor Board : An auxiliary board driving 3 Alphasense Ltd. Electrochemical Series B Gas Sensors designed for ultra-low noise, high-performance and low power operation. It is used in the Smart Citizen Stations for sensors with no offset voltage compensation, i.e. it's not valid for NO, NO2 or OX sensors Analog Sensors Board : An auxiliary board using a high-resolution ADC capable of reading 4 or 8 analog channels at 16bit resolution. It is used in the Smart Citizen Stations for the Analog front-end by Alphasense Ltd. which interface with any type of Electrochemical Series B Gas Sensors (NO, NO2 or OX sensors as well) Expand the SCK Check how to expand the SCK for air quality in the auxiliary connector section","title":"Air"},{"location":"Components/#soil-and-water","text":"Having a robust portfolio of the sensor for measuring soil and water characteristics is a need found by many research communities. In this direction, we include a collection of sensors that despite not being low cost or open source, they are still affordable and well documented when compared to other commercial solution. From a cost perspective, they are not aimed at being massively deployed but instead used individually in a specific site for specific needs. Take a deeper look Soil and water sensors are fully detailed in the Soil and water section .","title":"Soil and Water"},{"location":"Components/#open-source","text":"We're against black boxes! The entire project it is released under open source licenses:\u2028 Hardware components: CERN Open Hardware License v1.2 Core firmware: GNU GPL v3.0 Software platform: GNU AGLP v3.0 Info Check the Source files section for each component and explore the software source code and the hardware blueprints.","title":"Open Source"},{"location":"Components/Auxiliary%20Connector/","text":"The data board features a standard Grove connector where off-the-shelf modules from the same manufacturer can be connected. The connector supports an independent I2C bus by default, but by software it can be configured to support other uses (GPIO, I2C and UART). It can supply power up to 750mA, and it can be enabled or disabled by software to save power. There is a lot more to it! The Smart Citizen Kit is designed with a modular approach in mind. This means that the Urban Board is only a selection of low cost sensors for air quality, but the hardware itself can be expanded for other use cases such as a more advanced air quality monitoring setup, soil monitoring, or water quality. Make sure you check our guide on how to use them . Supported sensors \u00b6 General purpose \u00b6 Seeed Grove ADC - 12 bit ADC from Seeed Studio Adafruit INA219 - Supports Bus voltage, shunt voltage, current and load voltage SparkFun ToF Range Finder Sensor - VL6180 - supports distance and light. Can be used for water level measurements ADS1X15 - 16 bit ADC from Texas instruments also found in Adafruit development boards Air \u00b6 Seeed Grove SHT31 Temperature/Humidity Adafruit dev kit for Bosch BME680 - supports temperature, humidity, barometric pressure and VOC gas Sparkfun dev kit for AMS CCS811 - supports temperature, humidity, barometric pressure and VOC gas Atlas Scientific Temperature - can be used with any PT-100 or PT-1000 temperature probes Smart Citizen Station Expanding the base air quality solution, the Smart Citizen Station is a more advanced setup in a more rugged enclosure. The sensors below can be directly plugged in and detected by the SCK: Smart Citizen Gases Pro Board : supports 3 electrochemical alphasense sensors, temperature and humidity Smart Citizen PM Board : supports 2 Plantower PMS5003 sensors, I2C extension, 4 ADC pins, 2 GPIO and a UART Serial port Smart Citizen Analog Sensor Board : supports 4 or 8 analog channels at 16bit resolution. Soil and Water \u00b6 Check the Soil and water measurements documentation with examples on sensors such as: Atlas Scientific Dissolved Oxygen DS18B20 Water Temperature for water Chirp Soil Moisture , with support of soil moisture (requires calibration), temperature and ambient light. Other auxiliaries \u00b6 Seeed Grove OLED screen (128x128) , check the documentation for more details. Sparkfun GPS NEO-M8U SparkFun GPS XA1110 SEEED Grove GPS Module (only via PM Board as it uses UART to communicate) Implement your own Contact on how to implement sensors made by others. Full list \u00b6 This is a list of supported sensors. Find also the datasheets for more information regarding accuracies: WIP This list is always a WIP! Field SCK sensor name Units Location Sensor and datasheet Air Temperature \u00baC Urban Board Sensirion SHT31 Air Humidity %RH Urban Board Sensirion SHT31 Air Light lux Urban Board ROHM BH1730 Air Noise dBA na (dBA scale) Urban Board INVENSENSE 43432 Air Noise dBC na (dBC scale) Urban Board INVENSENSE 43432 Air Noise dBZ na (dBZ scale) Urban Board INVENSENSE 43432 Air Noise FFT na Urban Board INVENSENSE 43432 Air Barometric pressure kPa Urban Board NXP MPL3115A2 Air VOC Gas CCS811 ppb Urban Board AMS CCS811 Air eCO2 Gas CCS811 ppm Urban Board AMS CCS811 Air PM_X (X = [1.0, 2.5, 10]) ug/m3 Urban Board PLANTOWER PMS5003 Air PN_X (X = [0.3, 0.5, 1.0, 2.5, 5.0, 10]) #/0.1l Urban Board PLANTOWER PMS5003 Air, soil and water PM board Dallas Temperature \u00baC External Sensor MAXIM DS18B20 Air Ext PM_X (X = [1.0, 2.5, 10]) ug/m3 External Sensor PLANTOWER PMS5003 Air Ext PN_X (X = [0.3, 0.5, 1.0, 2.5, 5.0, 10]) #/0.1l External Sensor PLANTOWER PMS5003 Air SCD30_CO2 ppm External Sensor Sensirion SCD30 Air SCD30_T \u00baC External Sensor Sensirion SCD30 Air SCD30_H %RH External Sensor Sensirion SCD30 Generic ADS1x15 ADC 0x4X ChY (X = [8, 9, A, B)], Y = [0, 1, 2, 3]) V External Sensor ADS 1115 Generic Grove ADC V External Sensor Seeed Grove ADC Location GPS Fix Quality na External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Latitude Deg External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Longitude Deg External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Altitude m External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Speed m/s External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Horizontal Dilution of Position - External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Traked Satellites - External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Soil and water Atlas PH PH External Sensor Atlas Scientific pH Driver - Probe - Calibration Solution Water Atlas Dissolved Oxygen mg/L External Sensor Atlas Scientific Dissolved Oxygen Driver - Probe - Calibration solution Water Atlas DO Saturation % External Sensor Atlas Scientific Oxygen Saturation Driver - Probe - Calibration solution Soil and water Atlas Conductivity \u00b5S/cm External Sensor Atlas Scientific Electric Conductivity Driver - Probe - Calibration Solution Soil and water Atlas Total Dissolved Solids ppm External Sensor Atlas Scientific Electric Conductivity Driver - Probe - Calibration Solution Soil and water Atlas Salinity PSU(ppt) External Sensor Atlas Scientific Electric Conductivity Driver - Probe - Calibration Solution Soil and water Atlas Specific gravity - External Sensor Atlas Scientific Electric Conductivity Driver - Probe - Calibration Solution Soil Soil Moisture Raw - External Sensor Chirp Soil Moisture Soil Soil Moisture Percent % External Sensor Chirp Soil Moisture Soil Soil Temperature degC External Sensor Chirp Soil Moisture Soil Soil Light - External Sensor Chirp Soil Moisture Air, soil and water Atlas Temperature degC External Sensor PT-100 or PT-1000 Atlas Scientific Temperature Other Battery % Urban Board - Other Battery Voltage V Urban Board - Other INA219 Bus voltage V External Sensor Adafruit INA219 Other INA219 Shunt voltage mV External Sensor Adafruit INA219 Other INA219 Current mA External Sensor Adafruit INA219 Other INA219 Load voltage V External Sensor Adafruit INA219","title":"Supported sensors"},{"location":"Components/Auxiliary%20Connector/#supported-sensors","text":"","title":"Supported sensors"},{"location":"Components/Auxiliary%20Connector/#general-purpose","text":"Seeed Grove ADC - 12 bit ADC from Seeed Studio Adafruit INA219 - Supports Bus voltage, shunt voltage, current and load voltage SparkFun ToF Range Finder Sensor - VL6180 - supports distance and light. Can be used for water level measurements ADS1X15 - 16 bit ADC from Texas instruments also found in Adafruit development boards","title":"General purpose"},{"location":"Components/Auxiliary%20Connector/#air","text":"Seeed Grove SHT31 Temperature/Humidity Adafruit dev kit for Bosch BME680 - supports temperature, humidity, barometric pressure and VOC gas Sparkfun dev kit for AMS CCS811 - supports temperature, humidity, barometric pressure and VOC gas Atlas Scientific Temperature - can be used with any PT-100 or PT-1000 temperature probes Smart Citizen Station Expanding the base air quality solution, the Smart Citizen Station is a more advanced setup in a more rugged enclosure. The sensors below can be directly plugged in and detected by the SCK: Smart Citizen Gases Pro Board : supports 3 electrochemical alphasense sensors, temperature and humidity Smart Citizen PM Board : supports 2 Plantower PMS5003 sensors, I2C extension, 4 ADC pins, 2 GPIO and a UART Serial port Smart Citizen Analog Sensor Board : supports 4 or 8 analog channels at 16bit resolution.","title":"Air"},{"location":"Components/Auxiliary%20Connector/#soil-and-water","text":"Check the Soil and water measurements documentation with examples on sensors such as: Atlas Scientific Dissolved Oxygen DS18B20 Water Temperature for water Chirp Soil Moisture , with support of soil moisture (requires calibration), temperature and ambient light.","title":"Soil and Water"},{"location":"Components/Auxiliary%20Connector/#other-auxiliaries","text":"Seeed Grove OLED screen (128x128) , check the documentation for more details. Sparkfun GPS NEO-M8U SparkFun GPS XA1110 SEEED Grove GPS Module (only via PM Board as it uses UART to communicate) Implement your own Contact on how to implement sensors made by others.","title":"Other auxiliaries"},{"location":"Components/Auxiliary%20Connector/#full-list","text":"This is a list of supported sensors. Find also the datasheets for more information regarding accuracies: WIP This list is always a WIP! Field SCK sensor name Units Location Sensor and datasheet Air Temperature \u00baC Urban Board Sensirion SHT31 Air Humidity %RH Urban Board Sensirion SHT31 Air Light lux Urban Board ROHM BH1730 Air Noise dBA na (dBA scale) Urban Board INVENSENSE 43432 Air Noise dBC na (dBC scale) Urban Board INVENSENSE 43432 Air Noise dBZ na (dBZ scale) Urban Board INVENSENSE 43432 Air Noise FFT na Urban Board INVENSENSE 43432 Air Barometric pressure kPa Urban Board NXP MPL3115A2 Air VOC Gas CCS811 ppb Urban Board AMS CCS811 Air eCO2 Gas CCS811 ppm Urban Board AMS CCS811 Air PM_X (X = [1.0, 2.5, 10]) ug/m3 Urban Board PLANTOWER PMS5003 Air PN_X (X = [0.3, 0.5, 1.0, 2.5, 5.0, 10]) #/0.1l Urban Board PLANTOWER PMS5003 Air, soil and water PM board Dallas Temperature \u00baC External Sensor MAXIM DS18B20 Air Ext PM_X (X = [1.0, 2.5, 10]) ug/m3 External Sensor PLANTOWER PMS5003 Air Ext PN_X (X = [0.3, 0.5, 1.0, 2.5, 5.0, 10]) #/0.1l External Sensor PLANTOWER PMS5003 Air SCD30_CO2 ppm External Sensor Sensirion SCD30 Air SCD30_T \u00baC External Sensor Sensirion SCD30 Air SCD30_H %RH External Sensor Sensirion SCD30 Generic ADS1x15 ADC 0x4X ChY (X = [8, 9, A, B)], Y = [0, 1, 2, 3]) V External Sensor ADS 1115 Generic Grove ADC V External Sensor Seeed Grove ADC Location GPS Fix Quality na External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Latitude Deg External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Longitude Deg External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Altitude m External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Speed m/s External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Horizontal Dilution of Position - External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Traked Satellites - External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Soil and water Atlas PH PH External Sensor Atlas Scientific pH Driver - Probe - Calibration Solution Water Atlas Dissolved Oxygen mg/L External Sensor Atlas Scientific Dissolved Oxygen Driver - Probe - Calibration solution Water Atlas DO Saturation % External Sensor Atlas Scientific Oxygen Saturation Driver - Probe - Calibration solution Soil and water Atlas Conductivity \u00b5S/cm External Sensor Atlas Scientific Electric Conductivity Driver - Probe - Calibration Solution Soil and water Atlas Total Dissolved Solids ppm External Sensor Atlas Scientific Electric Conductivity Driver - Probe - Calibration Solution Soil and water Atlas Salinity PSU(ppt) External Sensor Atlas Scientific Electric Conductivity Driver - Probe - Calibration Solution Soil and water Atlas Specific gravity - External Sensor Atlas Scientific Electric Conductivity Driver - Probe - Calibration Solution Soil Soil Moisture Raw - External Sensor Chirp Soil Moisture Soil Soil Moisture Percent % External Sensor Chirp Soil Moisture Soil Soil Temperature degC External Sensor Chirp Soil Moisture Soil Soil Light - External Sensor Chirp Soil Moisture Air, soil and water Atlas Temperature degC External Sensor PT-100 or PT-1000 Atlas Scientific Temperature Other Battery % Urban Board - Other Battery Voltage V Urban Board - Other INA219 Bus voltage V External Sensor Adafruit INA219 Other INA219 Shunt voltage mV External Sensor Adafruit INA219 Other INA219 Current mA External Sensor Adafruit INA219 Other INA219 Load voltage V External Sensor Adafruit INA219","title":"Full list"},{"location":"Components/Firmware/","text":"Firmware \u00b6 The firmware is OOP and is entirely written in C++. Both processors the core ARM MCU and the ESP8266 WIFI are developed as part of the same framework integrating seemingly by using a set of bridge libraries that provide a unifies the RPC architecture. A note about versions The first version of the software was initially developed for the Making Sense project under European Community\u2019s H2020 Programme under Grant Agreement No. 688620 . The current version has been funded by the iSCAPE project project under European Community\u2019s H2020 Programme under Grant Agreement No. 689954 . Firmware updates are done via the micro USB port using the Platform IO software available for Linux, Mac and Windows. Architecture \u00b6 Core Microcontroller \u00b6 Name Functions Pins Definition for the MCU pinout Sensors Definition for all the supported sensors SckBase Manages the core operations: power, connectivity, peripherials SckAux Manages the sensors connected on the AUX connector SckList Manages internal Flash memory data storage SckUrban Manages the sensors on the Urban Sensor Board SckBatt Manages the battery charging process SckButton Manages users button interaction actions SckLed Manages light status for user feedback Commands Library to absracts the core features on to a simple shell interface Dependencies \u00b6 SPIMemory Library RTCZero Library SdFat Library Arduino Json Library Adafruit INA219 Library U8g2 Library RadioHead Library FlashStorage Library Dallas Temperature Library Sparkfun CCS811 Library Sparkfun MediaTek I2C Interface Library Sparkfun u-blox Arduino GNSS Library TinyGPSPlus Library LinkedList Library Adafruit ADS1015 Library ArduinoZero PMUX Report Library MCP342X Analog-to-Digital Converter Library DS2482 Library Adafruit MPL3115A2 Library I2C Soil Moisture Sensor Library SmartSmart Citizen Kit Gases Pro Board Library Sparkfun ToF Range Finder - VL6180 Arduino Library Adafruit BME680 Library Adafruit Unified Sensor Driver Library Sparkfun SCD30 CO\u2082 Sensor Library Library WiFi Module \u00b6 Name Functions SckESP Runs all the Wi-Fi networking related functions Dependencies \u00b6 Time Library ArduinoJson Library RemoteDebug Library RadioHead Library PubSubclient Library ESPAsyncWebServer Library Shared \u00b6 Name Functions Config Provides a shared configuration between the two MCUs Data management \u00b6 The board is capable of storing the recorded data offline on its internal dedicated flash memory of 8MB and later publish this over Wi-Fi connectivity provided by an Espressif ESP8266. Data is published using MQTT messages to the Smart Citizen Platform. NTP is used for syncing the built-in RTC. For long term offline storage, the board provides a standard microSD socket where card in the orders of GB can be employed. That ensures extended periods of data in the order of decades can be stored. Configuration \u00b6 The board firmware is fully customizable without requiring any changes to the core software. That includes enabling or disabling sensors, the sampling frequency of the sensors or the operation mode. There different configuration options via the Serial Shell available when the board is connected over USB. Detecting: AlphaDelta 1A... found, Enabling AlphaDelta 1A Detecting: AlphaDelta 1W... found, already enabled!!! Detecting: AlphaDelta 2A... found, already enabled!!! Detecting: AlphaDelta 2W... found, already enabled!!! Detecting: AlphaDelta 3A... found, already enabled!!! Detecting: AlphaDelta 3W... found, already enabled!!! Detecting: AlphaDelta Temperature... found, already enabled!!! Detecting: AlphaDelta Humidity... found, already enabled!!! Detecting: Grove ADC... nothing! Detecting: INA219 Bus voltage... nothing! Detecting: INA219 Shunt voltage... nothing! Detecting: INA219 Current... nothing! Detecting: INA219 Load voltage... nothing! Detecting: DS18B20 Water temperature... nothing! Detecting: Atlas PH... nothing! Detecting: Atlas Conductivity... nothing! Detecting: Atlas Specific gravity... nothing! Detecting: Atlas Dissolved Oxygen... nothing! Detecting: Atlas DO Saturation... nothing! Detecting: Grove OLED... nothing! Shell \u00b6 The firmware provides a comprehensive command shell over USB to manage all the kits functionalities for advanced users. Use any Serial console as screen , platformio device monitor , or the serial monitor on the Arduino IDE Info Have a look at the guide for different platforms here Storage \u00b6 Readings files YYYY-MM-DD.CSV \u00b6 These files are generated and updated by the kit in a daily manner. When a SD is detected the SCK will automatically save the sensors into it. The SCK creates an additional CSV file once there is a hardware reset. A reset takes place every night at 3-4am with the purpose to avoid data loss because a software problem (i.e. blocked software). The SCK then stores the data in a file with a sequential name, and does so by changing the filename to YYYY-MM-DD.01, .02... depending on the amount of resets it sees during a certain day. The latest data is always in the file with .CSV extension. An example of a day with two resets (ad hoc and the programmed one): YYYY-MM-DD.01 -> first reset YYYY-MM-DD.02 -> second reset YYYY-MM-DD.CSV -> latest file The user can safely change the extension of these files back to .CSV and concatenate them: YYYY-MM-DD.01 -> YYYY-MM-DD_01.CSV YYYY-MM-DD.02 -> YYYY-MM-DD_02.CSV YYYY-MM-DD.CSV -> YYYY-MM-DD.CSV Warning If there is a problem with the device, sometimes it can be that the SD card contains many files for a single day. These resets might go unnoticed, and the SD card files can be a way of detecting an issue. Debug log file DEBUG.txt \u00b6 The debug file is generated and updated by the kit, only if the debug mode is enabled on the configuration. When the debug mode is enabled the verbosity level of this file is defined by the outlevel ( normal, verbose or silent ). Source files \u00b6 Download Check the source code","title":"Architecture"},{"location":"Components/Firmware/#firmware","text":"The firmware is OOP and is entirely written in C++. Both processors the core ARM MCU and the ESP8266 WIFI are developed as part of the same framework integrating seemingly by using a set of bridge libraries that provide a unifies the RPC architecture. A note about versions The first version of the software was initially developed for the Making Sense project under European Community\u2019s H2020 Programme under Grant Agreement No. 688620 . The current version has been funded by the iSCAPE project project under European Community\u2019s H2020 Programme under Grant Agreement No. 689954 . Firmware updates are done via the micro USB port using the Platform IO software available for Linux, Mac and Windows.","title":"Firmware"},{"location":"Components/Firmware/#architecture","text":"","title":"Architecture"},{"location":"Components/Firmware/#core-microcontroller","text":"Name Functions Pins Definition for the MCU pinout Sensors Definition for all the supported sensors SckBase Manages the core operations: power, connectivity, peripherials SckAux Manages the sensors connected on the AUX connector SckList Manages internal Flash memory data storage SckUrban Manages the sensors on the Urban Sensor Board SckBatt Manages the battery charging process SckButton Manages users button interaction actions SckLed Manages light status for user feedback Commands Library to absracts the core features on to a simple shell interface","title":"Core Microcontroller"},{"location":"Components/Firmware/#dependencies","text":"SPIMemory Library RTCZero Library SdFat Library Arduino Json Library Adafruit INA219 Library U8g2 Library RadioHead Library FlashStorage Library Dallas Temperature Library Sparkfun CCS811 Library Sparkfun MediaTek I2C Interface Library Sparkfun u-blox Arduino GNSS Library TinyGPSPlus Library LinkedList Library Adafruit ADS1015 Library ArduinoZero PMUX Report Library MCP342X Analog-to-Digital Converter Library DS2482 Library Adafruit MPL3115A2 Library I2C Soil Moisture Sensor Library SmartSmart Citizen Kit Gases Pro Board Library Sparkfun ToF Range Finder - VL6180 Arduino Library Adafruit BME680 Library Adafruit Unified Sensor Driver Library Sparkfun SCD30 CO\u2082 Sensor Library Library","title":"Dependencies"},{"location":"Components/Firmware/#wifi-module","text":"Name Functions SckESP Runs all the Wi-Fi networking related functions","title":"WiFi Module"},{"location":"Components/Firmware/#dependencies_1","text":"Time Library ArduinoJson Library RemoteDebug Library RadioHead Library PubSubclient Library ESPAsyncWebServer Library","title":"Dependencies"},{"location":"Components/Firmware/#shared","text":"Name Functions Config Provides a shared configuration between the two MCUs","title":"Shared"},{"location":"Components/Firmware/#data-management","text":"The board is capable of storing the recorded data offline on its internal dedicated flash memory of 8MB and later publish this over Wi-Fi connectivity provided by an Espressif ESP8266. Data is published using MQTT messages to the Smart Citizen Platform. NTP is used for syncing the built-in RTC. For long term offline storage, the board provides a standard microSD socket where card in the orders of GB can be employed. That ensures extended periods of data in the order of decades can be stored.","title":"Data management"},{"location":"Components/Firmware/#configuration","text":"The board firmware is fully customizable without requiring any changes to the core software. That includes enabling or disabling sensors, the sampling frequency of the sensors or the operation mode. There different configuration options via the Serial Shell available when the board is connected over USB. Detecting: AlphaDelta 1A... found, Enabling AlphaDelta 1A Detecting: AlphaDelta 1W... found, already enabled!!! Detecting: AlphaDelta 2A... found, already enabled!!! Detecting: AlphaDelta 2W... found, already enabled!!! Detecting: AlphaDelta 3A... found, already enabled!!! Detecting: AlphaDelta 3W... found, already enabled!!! Detecting: AlphaDelta Temperature... found, already enabled!!! Detecting: AlphaDelta Humidity... found, already enabled!!! Detecting: Grove ADC... nothing! Detecting: INA219 Bus voltage... nothing! Detecting: INA219 Shunt voltage... nothing! Detecting: INA219 Current... nothing! Detecting: INA219 Load voltage... nothing! Detecting: DS18B20 Water temperature... nothing! Detecting: Atlas PH... nothing! Detecting: Atlas Conductivity... nothing! Detecting: Atlas Specific gravity... nothing! Detecting: Atlas Dissolved Oxygen... nothing! Detecting: Atlas DO Saturation... nothing! Detecting: Grove OLED... nothing!","title":"Configuration"},{"location":"Components/Firmware/#shell","text":"The firmware provides a comprehensive command shell over USB to manage all the kits functionalities for advanced users. Use any Serial console as screen , platformio device monitor , or the serial monitor on the Arduino IDE Info Have a look at the guide for different platforms here","title":"Shell"},{"location":"Components/Firmware/#storage","text":"","title":"Storage"},{"location":"Components/Firmware/#readings-files-yyyy-mm-ddcsv","text":"These files are generated and updated by the kit in a daily manner. When a SD is detected the SCK will automatically save the sensors into it. The SCK creates an additional CSV file once there is a hardware reset. A reset takes place every night at 3-4am with the purpose to avoid data loss because a software problem (i.e. blocked software). The SCK then stores the data in a file with a sequential name, and does so by changing the filename to YYYY-MM-DD.01, .02... depending on the amount of resets it sees during a certain day. The latest data is always in the file with .CSV extension. An example of a day with two resets (ad hoc and the programmed one): YYYY-MM-DD.01 -> first reset YYYY-MM-DD.02 -> second reset YYYY-MM-DD.CSV -> latest file The user can safely change the extension of these files back to .CSV and concatenate them: YYYY-MM-DD.01 -> YYYY-MM-DD_01.CSV YYYY-MM-DD.02 -> YYYY-MM-DD_02.CSV YYYY-MM-DD.CSV -> YYYY-MM-DD.CSV Warning If there is a problem with the device, sometimes it can be that the SD card contains many files for a single day. These resets might go unnoticed, and the SD card files can be a way of detecting an issue.","title":"Readings files YYYY-MM-DD.CSV"},{"location":"Components/Firmware/#debug-log-file-debugtxt","text":"The debug file is generated and updated by the kit, only if the debug mode is enabled on the configuration. When the debug mode is enabled the verbosity level of this file is defined by the outlevel ( normal, verbose or silent ).","title":"Debug log file DEBUG.txt"},{"location":"Components/Firmware/#source-files","text":"Download Check the source code","title":"Source files"},{"location":"Components/Flash%20Storage/","text":"Flash storing \u00b6 Introduction \u00b6 With this implementation, the Smartcitizen kit 2.1 readings will be stored in a flash memory buffer before being published. If SCK RTC clock is in sync the kit will start taking readings and save them, if a SD card is available it will also save them there and if the Wi-Fi and platform token are configured it will publish the data to the network via MQTT. This means we will always have a backup for the readings taken the last ~70 days . Info The memory chip that we use ( S25FL064L ), it's an 8 MB SPI flash nonvolatile memory. To manage it, we use the SPI Memory Arduino library. Data organization \u00b6 Flash sectors \u00b6 The minimum erasable unit is a sector (4 KB), so we use this as a base for data organization. On the first 3 bytes of each sector we store information about its contents, in this way we can find which ones are empty, currently in use or have valid data. enum SectorAddr { SECTOR_STATE = 0x00 , SECTOR_NET = 0x01 , SECTOR_SD = 0x02 }; The first byte of each sector ( SECTOR_STATE ) describes if the sector is empty or already used. On boot, we scan sector by sector until we find an empty one to store new data. The SECTOR_NET and SECTOR_SD bytes of each sector contain the flags related to the publish state of contained data. This bytes are only marked if all the groups of the sector are already published and the sector is full. When all flash sectors are marked as used we will erase the oldest data sector and reuse it. Data Groups \u00b6 Readings are grouped by the time there were taken and saved sequentially inside flash memory sectors. On the beginning of each group, we store information about it. enum GroupAddr { GROUP_SIZE = 0x00, GROUP_NET = 0x02, GROUP_SD = 0x03, GROUP_TIME = 0x04, GROUP_READINGS = 0x08 }; In the GROUP_SIZE bytes, we store the size in bytes of the full group with all its contents. This allows us to start reading the sector starting on the first group and jump from group to group very fast. The GROUP_NET and GROUP_SD bytes of each group contain the flags related to the publishing state of contained data, as default they are in NOT_PUBLISHED state until we set them to PUBLISHED . The time and date of when these readings were taken is stored in the GROUP_TIME bytes in Epoch time format. Starting on the GROUP_READINGS byte, we store the sensor readings data (256 max). The first byte of each reading contains its full size in bytes, the second byte the sensor identifier ( SensorType ) and starting on the third byte the sensor data is stored in ASCII chars. Sizes \u00b6 A normal reading group with the default urban board hardware installed is composed by 11 readings, we expect each reading to take 7 bytes: an average of 5 bytes for the reading itself plus 2 overhead bytes for SensorType and size, so each group should have a total of 77 bytes of readings, 2 bytes of size, 2 bytes of flags and 4 bytes of the time stamp. That means we can expect a normal group to be around 85 bytes. Info We have 8 MB (8,388,608 bytes) of flash memory that means storing almost 100,000 groups of readings or around 70 days of readings with standard sensor hardware. This number can vary a little, because we will lose some space at the end of each sector. About flash memory lifespan, rounding numbers we can say we have enough space to store 2 months (60 days) of readings, according to the Flash memory datasheet we have at least 100,000 erase cycles: 2 months per cycle means 200,000 months that's more than 16k years!!. User interface \u00b6 Some aspects of the flash memory can be managed by the user via the SCK shell interface , issuing the help command you can see a brief description of the flash command interface: flash: Shows and manage flash memory state [no-param -> info] [-format (be carefull)] [-dump sect-num (0-2040)] [-sector sect-num] [-recover sect-num/all net/sd] Without any parameter, the flash command will scan the memory and print out a table of its contents, showing totals at the end. Be patient, scanning can take a long time if your flash has data. The -format option will erase the full flash memory. The -dump option will dump (in hexadecimal values) the content of the requested sector. The -sector option will show general information about the data contained on the requested sector. The -recover option takes 2 parameters: the sector number or the keyword all and one keyword to indicate how to recover the data ( net or sd )","title":"Flash Storage"},{"location":"Components/Flash%20Storage/#flash-storing","text":"","title":"Flash storing"},{"location":"Components/Flash%20Storage/#introduction","text":"With this implementation, the Smartcitizen kit 2.1 readings will be stored in a flash memory buffer before being published. If SCK RTC clock is in sync the kit will start taking readings and save them, if a SD card is available it will also save them there and if the Wi-Fi and platform token are configured it will publish the data to the network via MQTT. This means we will always have a backup for the readings taken the last ~70 days . Info The memory chip that we use ( S25FL064L ), it's an 8 MB SPI flash nonvolatile memory. To manage it, we use the SPI Memory Arduino library.","title":"Introduction"},{"location":"Components/Flash%20Storage/#data-organization","text":"","title":"Data organization"},{"location":"Components/Flash%20Storage/#flash-sectors","text":"The minimum erasable unit is a sector (4 KB), so we use this as a base for data organization. On the first 3 bytes of each sector we store information about its contents, in this way we can find which ones are empty, currently in use or have valid data. enum SectorAddr { SECTOR_STATE = 0x00 , SECTOR_NET = 0x01 , SECTOR_SD = 0x02 }; The first byte of each sector ( SECTOR_STATE ) describes if the sector is empty or already used. On boot, we scan sector by sector until we find an empty one to store new data. The SECTOR_NET and SECTOR_SD bytes of each sector contain the flags related to the publish state of contained data. This bytes are only marked if all the groups of the sector are already published and the sector is full. When all flash sectors are marked as used we will erase the oldest data sector and reuse it.","title":"Flash sectors"},{"location":"Components/Flash%20Storage/#data-groups","text":"Readings are grouped by the time there were taken and saved sequentially inside flash memory sectors. On the beginning of each group, we store information about it. enum GroupAddr { GROUP_SIZE = 0x00, GROUP_NET = 0x02, GROUP_SD = 0x03, GROUP_TIME = 0x04, GROUP_READINGS = 0x08 }; In the GROUP_SIZE bytes, we store the size in bytes of the full group with all its contents. This allows us to start reading the sector starting on the first group and jump from group to group very fast. The GROUP_NET and GROUP_SD bytes of each group contain the flags related to the publishing state of contained data, as default they are in NOT_PUBLISHED state until we set them to PUBLISHED . The time and date of when these readings were taken is stored in the GROUP_TIME bytes in Epoch time format. Starting on the GROUP_READINGS byte, we store the sensor readings data (256 max). The first byte of each reading contains its full size in bytes, the second byte the sensor identifier ( SensorType ) and starting on the third byte the sensor data is stored in ASCII chars.","title":"Data Groups"},{"location":"Components/Flash%20Storage/#sizes","text":"A normal reading group with the default urban board hardware installed is composed by 11 readings, we expect each reading to take 7 bytes: an average of 5 bytes for the reading itself plus 2 overhead bytes for SensorType and size, so each group should have a total of 77 bytes of readings, 2 bytes of size, 2 bytes of flags and 4 bytes of the time stamp. That means we can expect a normal group to be around 85 bytes. Info We have 8 MB (8,388,608 bytes) of flash memory that means storing almost 100,000 groups of readings or around 70 days of readings with standard sensor hardware. This number can vary a little, because we will lose some space at the end of each sector. About flash memory lifespan, rounding numbers we can say we have enough space to store 2 months (60 days) of readings, according to the Flash memory datasheet we have at least 100,000 erase cycles: 2 months per cycle means 200,000 months that's more than 16k years!!.","title":"Sizes"},{"location":"Components/Flash%20Storage/#user-interface","text":"Some aspects of the flash memory can be managed by the user via the SCK shell interface , issuing the help command you can see a brief description of the flash command interface: flash: Shows and manage flash memory state [no-param -> info] [-format (be carefull)] [-dump sect-num (0-2040)] [-sector sect-num] [-recover sect-num/all net/sd] Without any parameter, the flash command will scan the memory and print out a table of its contents, showing totals at the end. Be patient, scanning can take a long time if your flash has data. The -format option will erase the full flash memory. The -dump option will dump (in hexadecimal values) the content of the requested sector. The -sector option will show general information about the data contained on the requested sector. The -recover option takes 2 parameters: the sector number or the keyword all and one keyword to indicate how to recover the data ( net or sd )","title":"User interface"},{"location":"Components/Soil%20and%20water/","text":"Soil and water sensors \u00b6 Although most of the time we have been working with air quality sensors and air metrics, we also like to keep an eye on soil and water sensors. This page details our integration of water and soil sensors, often interchangeable in some cases. Different sensor probes can be selected for different needs. For example the setup shown above is designed for soil measurements and includes Atlas Scientific temperature, conductivity and PH probes. It also consists of a Chirp Moisture Sensor as described in the above section . As an additional example the setup in the figure below is designed for water monitoring on aquaponics systems and includes Atlas Scientific probes for PH, conductivity and dissolved oxygen. Some of the sensors selected are from Atlas Scientific, a New York-based company that converts devices that were originally designed to be used by humans into devices that are specifically designed to be used by robots . The sensors are not entirely open source as the other sensors (the Chirp Sensor is a low cost moisture and temperature sensor developed by WeMakeThings : a hackers and engineers collective based in Vilnius, Lithuania). However, they are modular and exceptionally well documented by the manufacturer. That includes excellent documentation on how to install, calibrate and integrate them with additional existing hardware. In this direction, we developed a full library for the SCK to support the sensors via the Auxiliary sensor connector. As the sensors can be configured in different ways, we do not provide a full step-by-step guide. Instead, we refer to the documentation on the project's repository . Use cases Check how we have used the water or soil sensors in various projects in the Use cases section Hardware \u00b6 Available measurements \u00b6 The sensors described below are additional to those already supported on the Smart Citizen Kit base sensors . Metric Usage Probe Driver Calibration Temperature Soil and water Atlas PT-100 + PT-1000 Atlas EZO-RTD Not required PH Water Atlas ENV-40-PH or ENV-35-PH Atlas EZO-PH Atlas CHEM-PH PH Soil Atlas ENV-45-PH Atlas EZO-PH Atlas CHEM-PH Electrical Conductivity Soil and water Atlas ENV-40-EC-K Atlas EZO-EC Atlas CHEM-EC Total Dissolved Solids Soil and water Atlas ENV-40-EC-K Atlas EZO-EC Atlas CHEM-EC Salinity Soil and water Atlas ENV-40-EC-K Atlas Atlas EZO-EC Atlas Atlas CHEM-EC Specific Gravity Soil and water Atlas ENV-40-EC-K Atlas EZO-EC Atlas CHEM-EC Dissolved Oxygen Water Atlas ENV-40-DO Atlas EZO-DO Atlas CHEM-DO Oxygen Saturation Water Atlas ENV-40-DO Atlas EZO-DO Atlas CHEM-DO Soil Moisture Soil Catnip Chirp! None Cup of water Soil and water For probes that can be used in both, soil and water, make sure to follow this procedure . Atlas Scientific Carrier board board \u00b6 We recommend using Whitebox Labs Tentacle T3 that hosts up to 3 Atlas Scientific Probes, and can be stacked with several units. It connects to the SCK via the Aux sensor connector, and needs external 5V connection, which means that it can't run on battery directly connected to the SCK without extras. If you want to make your own, before the Tentacle T3 existed we designed a custom board in collaboration in with Aquapiooners . Ready to set it all up Visit this guide to get started. Enclosures \u00b6 A normal IP enclosure can be used for this setup. More information about the BOM and design files can be found in the enclosures repository . Thanks! This enclosure and development has been done in collaboration with ICM-CSIC and the Club Pati Vela de Barcelona . Legacy enclosures \u00b6 In collaboration in with Aquapiooners we designed the custom enclosure below. The enclosure of the monitoring board and the smart citizen have been designed on Onshape, you can either download the STL files or copy the project to your onshape account and modify them as you wish : The Onshape documents of the monitoring case We have also designed a probe holder if you want to hold your probes on the side of you fish tank. Here you can find the Onshape document of the probes holder Soil Station \u00b6 More soil sensors can be added as well, not only Atlas Scientific sensors, or the WeMakeThings Chirp sensor for Soil moisture. More developments available upon request. Water Station \u00b6 An specific Water Station was designed as part of the Pati Scientific project in colaboration with the Institut de Ci\u00e8ncies del Mar . The station currently measures the sensors below, but virtually any supported sensor can be added: Image credit: Pati Scientific Temperature PH Electrical Conductivity Dissolved Oxygen GPS location BOM Check the Water Enclosure BOM.","title":"Soil and Water"},{"location":"Components/Soil%20and%20water/#soil-and-water-sensors","text":"Although most of the time we have been working with air quality sensors and air metrics, we also like to keep an eye on soil and water sensors. This page details our integration of water and soil sensors, often interchangeable in some cases. Different sensor probes can be selected for different needs. For example the setup shown above is designed for soil measurements and includes Atlas Scientific temperature, conductivity and PH probes. It also consists of a Chirp Moisture Sensor as described in the above section . As an additional example the setup in the figure below is designed for water monitoring on aquaponics systems and includes Atlas Scientific probes for PH, conductivity and dissolved oxygen. Some of the sensors selected are from Atlas Scientific, a New York-based company that converts devices that were originally designed to be used by humans into devices that are specifically designed to be used by robots . The sensors are not entirely open source as the other sensors (the Chirp Sensor is a low cost moisture and temperature sensor developed by WeMakeThings : a hackers and engineers collective based in Vilnius, Lithuania). However, they are modular and exceptionally well documented by the manufacturer. That includes excellent documentation on how to install, calibrate and integrate them with additional existing hardware. In this direction, we developed a full library for the SCK to support the sensors via the Auxiliary sensor connector. As the sensors can be configured in different ways, we do not provide a full step-by-step guide. Instead, we refer to the documentation on the project's repository . Use cases Check how we have used the water or soil sensors in various projects in the Use cases section","title":"Soil and water sensors"},{"location":"Components/Soil%20and%20water/#hardware","text":"","title":"Hardware"},{"location":"Components/Soil%20and%20water/#available-measurements","text":"The sensors described below are additional to those already supported on the Smart Citizen Kit base sensors . Metric Usage Probe Driver Calibration Temperature Soil and water Atlas PT-100 + PT-1000 Atlas EZO-RTD Not required PH Water Atlas ENV-40-PH or ENV-35-PH Atlas EZO-PH Atlas CHEM-PH PH Soil Atlas ENV-45-PH Atlas EZO-PH Atlas CHEM-PH Electrical Conductivity Soil and water Atlas ENV-40-EC-K Atlas EZO-EC Atlas CHEM-EC Total Dissolved Solids Soil and water Atlas ENV-40-EC-K Atlas EZO-EC Atlas CHEM-EC Salinity Soil and water Atlas ENV-40-EC-K Atlas Atlas EZO-EC Atlas Atlas CHEM-EC Specific Gravity Soil and water Atlas ENV-40-EC-K Atlas EZO-EC Atlas CHEM-EC Dissolved Oxygen Water Atlas ENV-40-DO Atlas EZO-DO Atlas CHEM-DO Oxygen Saturation Water Atlas ENV-40-DO Atlas EZO-DO Atlas CHEM-DO Soil Moisture Soil Catnip Chirp! None Cup of water Soil and water For probes that can be used in both, soil and water, make sure to follow this procedure .","title":"Available measurements"},{"location":"Components/Soil%20and%20water/#atlas-scientific-carrier-board-board","text":"We recommend using Whitebox Labs Tentacle T3 that hosts up to 3 Atlas Scientific Probes, and can be stacked with several units. It connects to the SCK via the Aux sensor connector, and needs external 5V connection, which means that it can't run on battery directly connected to the SCK without extras. If you want to make your own, before the Tentacle T3 existed we designed a custom board in collaboration in with Aquapiooners . Ready to set it all up Visit this guide to get started.","title":"Atlas Scientific Carrier board board"},{"location":"Components/Soil%20and%20water/#enclosures","text":"A normal IP enclosure can be used for this setup. More information about the BOM and design files can be found in the enclosures repository . Thanks! This enclosure and development has been done in collaboration with ICM-CSIC and the Club Pati Vela de Barcelona .","title":"Enclosures"},{"location":"Components/Soil%20and%20water/#legacy-enclosures","text":"In collaboration in with Aquapiooners we designed the custom enclosure below. The enclosure of the monitoring board and the smart citizen have been designed on Onshape, you can either download the STL files or copy the project to your onshape account and modify them as you wish : The Onshape documents of the monitoring case We have also designed a probe holder if you want to hold your probes on the side of you fish tank. Here you can find the Onshape document of the probes holder","title":"Legacy enclosures"},{"location":"Components/Soil%20and%20water/#soil-station","text":"More soil sensors can be added as well, not only Atlas Scientific sensors, or the WeMakeThings Chirp sensor for Soil moisture. More developments available upon request.","title":"Soil Station"},{"location":"Components/Soil%20and%20water/#water-station","text":"An specific Water Station was designed as part of the Pati Scientific project in colaboration with the Institut de Ci\u00e8ncies del Mar . The station currently measures the sensors below, but virtually any supported sensor can be added: Image credit: Pati Scientific Temperature PH Electrical Conductivity Dissolved Oxygen GPS location BOM Check the Water Enclosure BOM.","title":"Water Station"},{"location":"Components/Solar%20Panel/","text":"Solar Panel \u00b6 We recommend a Solar Panel from Voltaic Systems , either the 6W 6V option or the 5W 6V version . What is this for? Currently, this option is only usable for the Smart Citizen Kit 2.1 with small accessories, like a CO2 sensor or some electrochemical sensors, but it's not suitable for a larger options like the Smart Citizen Station. For this, we recommend a larger solar panel with a lead-acid battery instead as back-up. Image credit: Voltaic System We use an MPTT Sunflower Solar power manager 5V from DF Robot for managing the solar input with an additional 2Ah battery. It is fitted inside the enclosure with a small laser cut (or 3D printed if not available) flange. This is the BOM for this option. Installation Have a look at the installation guide for Solar Panel Source files Find all the information here","title":"Solar Panel"},{"location":"Components/Solar%20Panel/#solar-panel","text":"We recommend a Solar Panel from Voltaic Systems , either the 6W 6V option or the 5W 6V version . What is this for? Currently, this option is only usable for the Smart Citizen Kit 2.1 with small accessories, like a CO2 sensor or some electrochemical sensors, but it's not suitable for a larger options like the Smart Citizen Station. For this, we recommend a larger solar panel with a lead-acid battery instead as back-up. Image credit: Voltaic System We use an MPTT Sunflower Solar power manager 5V from DF Robot for managing the solar input with an additional 2Ah battery. It is fitted inside the enclosure with a small laser cut (or 3D printed if not available) flange. This is the BOM for this option. Installation Have a look at the installation guide for Solar Panel Source files Find all the information here","title":"Solar Panel"},{"location":"Components/Supported%20Sensors/","text":"WIP This list is always a WIP! Field SCK sensor name Units Location Sensor and datasheet Air Temperature \u00baC Urban Board Sensirion SHT31 Air Humidity %RH Urban Board Sensirion SHT31 Air Light lux Urban Board ROHM BH1730 Air Noise dBA na (dBA scale) Urban Board INVENSENSE 43432 Air Noise dBC na (dBC scale) Urban Board INVENSENSE 43432 Air Noise dBZ na (dBZ scale) Urban Board INVENSENSE 43432 Air Noise FFT na Urban Board INVENSENSE 43432 Air Barometric pressure kPa Urban Board NXP MPL3115A2 Air VOC Gas CCS811 ppb Urban Board AMS CCS811 Air eCO2 Gas CCS811 ppm Urban Board AMS CCS811 Air PM_X (X = [1.0, 2.5, 10]) ug/m3 Urban Board PLANTOWER PMS5003 Air PN_X (X = [0.3, 0.5, 1.0, 2.5, 5.0, 10]) #/0.1l Urban Board PLANTOWER PMS5003 Air, soil and water PM board Dallas Temperature \u00baC External Sensor MAXIM DS18B20 Air Ext PM_X (X = [1.0, 2.5, 10]) ug/m3 External Sensor PLANTOWER PMS5003 Air Ext PN_X (X = [0.3, 0.5, 1.0, 2.5, 5.0, 10]) #/0.1l External Sensor PLANTOWER PMS5003 Air SCD30_CO2 ppm External Sensor Sensirion SCD30 Air SCD30_T \u00baC External Sensor Sensirion SCD30 Air SCD30_H %RH External Sensor Sensirion SCD30 Generic ADS1x15 ADC 0x4X ChY (X = [8, 9, A, B)], Y = [0, 1, 2, 3]) V External Sensor ADS 1115 Generic Grove ADC V External Sensor Seeed Grove ADC Location GPS Fix Quality na External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Latitude Deg External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Longitude Deg External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Altitude m External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Speed m/s External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Horizontal Dilution of Position - External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Location GPS Traked Satellites - External Sensor Sparkfun GPS NEO-M8U , SparkFun GPS XA1110 or SEEED Grove GPS Module Soil and water Atlas PH PH External Sensor Atlas Scientific pH Driver - Probe - Calibration Solution Water Atlas Dissolved Oxygen mg/L External Sensor Atlas Scientific Dissolved Oxygen Driver - Probe - Calibration solution Water Atlas DO Saturation % External Sensor Atlas Scientific Oxygen Saturation Driver - Probe - Calibration solution Soil and water Atlas Conductivity \u00b5S/cm External Sensor Atlas Scientific Electric Conductivity Driver - Probe - Calibration Solution Soil and water Atlas Total Dissolved Solids ppm External Sensor Atlas Scientific Electric Conductivity Driver - Probe - Calibration Solution Soil and water Atlas Salinity PSU(ppt) External Sensor Atlas Scientific Electric Conductivity Driver - Probe - Calibration Solution Soil and water Atlas Specific gravity - External Sensor Atlas Scientific Electric Conductivity Driver - Probe - Calibration Solution Soil Soil Moisture Raw - External Sensor Chirp Soil Moisture Soil Soil Moisture Percent % External Sensor Chirp Soil Moisture Soil Soil Temperature degC External Sensor Chirp Soil Moisture Soil Soil Light - External Sensor Chirp Soil Moisture Air, soil and water Atlas Temperature degC External Sensor PT-100 or PT-1000 Atlas Scientific Temperature Other Battery % Urban Board - Other Battery Voltage V Urban Board - Other INA219 Bus voltage V External Sensor Adafruit INA219 Other INA219 Shunt voltage mV External Sensor Adafruit INA219 Other INA219 Current mA External Sensor Adafruit INA219 Other INA219 Load voltage V External Sensor Adafruit INA219","title":"Supported Sensors"},{"location":"Components/boards/Analog%20Sensor%20Board/","text":"Analog Sensor Board \u00b6 The SmartCitizen ASB is an expansion board for the Smart Citizen Kit that provides connectivity to analog sensors with a high precission ADS1115 via I2C, with four configurable addresses. It also gives the possibility to directly hook up this ADC by Adafruit . We use it to measure low power sensors such as the Alphasense Ltd. electrochemical sensors. Characteristics \u00b6 Operating voltage \u00b6 Natively operates at 3.3V, but can use also up to 5.5V in EXT-V, and with a selectable jumper. It integrates a level-shifter from the GROVE connector's voltage to EXT-V. Connectivity \u00b6 I2C, from 3.3V up to 5.5V. Inputs \u00b6 4 channels in the 4-channel version. Daisy chainable up to 4 boards - with a total of 16 analog channels! 8 channels in the 8-channel version. Check the source","title":"Analog Sensor Board"},{"location":"Components/boards/Analog%20Sensor%20Board/#analog-sensor-board","text":"The SmartCitizen ASB is an expansion board for the Smart Citizen Kit that provides connectivity to analog sensors with a high precission ADS1115 via I2C, with four configurable addresses. It also gives the possibility to directly hook up this ADC by Adafruit . We use it to measure low power sensors such as the Alphasense Ltd. electrochemical sensors.","title":"Analog Sensor Board"},{"location":"Components/boards/Analog%20Sensor%20Board/#characteristics","text":"","title":"Characteristics"},{"location":"Components/boards/Analog%20Sensor%20Board/#operating-voltage","text":"Natively operates at 3.3V, but can use also up to 5.5V in EXT-V, and with a selectable jumper. It integrates a level-shifter from the GROVE connector's voltage to EXT-V.","title":"Operating voltage"},{"location":"Components/boards/Analog%20Sensor%20Board/#connectivity","text":"I2C, from 3.3V up to 5.5V.","title":"Connectivity"},{"location":"Components/boards/Analog%20Sensor%20Board/#inputs","text":"4 channels in the 4-channel version. Daisy chainable up to 4 boards - with a total of 16 analog channels! 8 channels in the 8-channel version. Check the source","title":"Inputs"},{"location":"Components/boards/Data%20Board/","text":"Data Board \u00b6 The data board is a data-logger at the core of the sensors architecture supporting the Smart Citizen Kit and the Smart Citizen Station. This module is powered by an ARM M0+ 32-bits 48Mhz SAMD21 running the Smart Citizen Firmware , combining the low power consumption of the ARM M0 family with the power of a 32-bits processor with 32KB of RAM and 256KB of FLASH memory. This solution offers enough program storage and memory space to support multiple auxiliary sensors. This chip is used by the Arduino Zero and MKR boards, therefore benefiting from the open community built around these boards in particular and the Arduino project in general. Check the source code The data board also includes a Wi-Fi module, a micro SD card slot, an internal Flash and a battery management solution. In addition, it includes 4MB of extra Flash Memory for offline data storage, in case of network brownouts. The Wi-Fi Module is the well-known Espressif ESP8266 IEEE 802.11 b/g/n Wi-Fi with 4MB Internal Flash for web content storage: The Data Board connects to the sensor board providing power, analog and digital communications (12 bits ADC, GPIO, I2C, I2S, VCC). The data board also includes a Seeed Studio standard Grove connector where off-the-shelf modules from the same manufacturer can be connected. The connector supports an independent I2C bus by default, but by software it can be configured to support other uses (GPIO, I2C and UART). It can supply power up to 750mA, and it can be enabled or disabled by software to save power. The board includes a power unit, with a battery management system, capable of handling a variety of Lithium polymer cells. The batteries are connected to a standard JST-2 pin battery connector. The Smart Citizen Kit by default uses a 2000mAh battery, but larger capacities can be used. Under normal conditions, and depending on the sensors enabled, a 2000mAh battery can last between 24 hours (with all sensors enabled, and a 1-minute recording frequency) to more than a week. The board also features a sleep mode , through which drastically lower average consumption are achieved. The controller allows the batteries to be easily charged using the boards micro USB connector using any standard USB power adapter like the ones used on Smartphones. On remote areas, it can also be powered using a selection of PV Panels like Voltaics Systems 6W panel. Firmware \u00b6 The Smart Citizen Kit firmware is comprised of two parts: 1) the primary processing tasks are done by the SAMD21 microcontroller firmware; 2) the tasks related to network communication are run through the ESP8266. The SAMD21 is built on top of the Arduino Zero with a custom variant for the Data Board main MCU. The ESP8266 is also built using the Arduino ESP Core. Both firmwares are built and managed with Platform IO, an open-source IDE for embedded development. Platform IO features built-in dependency management and allows you to compile and upload both processors with a single command. Using the SWD ARM connector you can change the MCU bootloader and debug the firmware using Open Source tools. Info Learn more about the software running inside the Data Board on the Firmware section . Software guides Check the firmware guides and learn how to update and even modify the software: Edit the Firmware Update the Firmware Debug the Firmware (advanced) Buses \u00b6 Sensor Boards connector \u00b6 The Kit features a modular architecture where sensors can be updated independently by replacing any individual Sensor Board. The Sensor Boards features GPIO, ADC, I2C, UART and I2S connections at 3.3V. Currently, we only offer the Urban Sensor Board, but more boards are on the way, and you can even design and build a custom one. Example of a Sensor Board SAMD21 Pins Arduino Zero Pin SCK Pins SCK Conector SCK Conector SCK Pins Arduino Zero Pin SAMD21 Pins GND GND GND 16 15 GND GND GND GND GND GND 14 13 GND GND GND PA11 0 I2S_FS 12 11 TX A5 PB2 PA7 9 I2S_SD 10 9 RX 25 PB3 PA10 1 I2S_SCK 8 7 5V 5V 5V PA22 20 SDA 6 5 PWM_CO 13 PA9 PA23 21 SCL 4 3 PWM_NOX 14 PA8 VCC VCC VCC 2 1 VCC VCC VCC Auxiliary connector \u00b6 The Data Board features and independent configurable auxiliary bus at 3.3V with a SEEED Studio Grove connector. The Bus has native support for I2C, but it can also be setup on firmware as a GPIO or UART port. It can supply power up to 750mA, and it can be enabled or disabled by software. Example of devices connected via the AUX connector. Power management \u00b6 The Smart Smart Citizen Kit gives us the possibility of running directly from a USB power source with or without lithium battery, using the BQ24259 USB Charger . The charger manages external power regulation, battery fast charging (up to 2Ah) and USB OTG that allow us powering other devices from the SCK (currently not implemented). Normaly the SCK uses a 2000 mAh Lithium polymer battery but it is possible to take advantage of larger batteries. The charging current is regulated with a manual imposed limit that can be configured, and also auto adjusts to the connected USB charger capacity. It is also possible to use solar panel (5v) to charge the SCK. The power consumption of the kit depends on which sensors are enabled and how often they are read/published. Between readings the kit goes to sleep mode turning off almost all the subsystems and reducing the power consumption. In previous versions of the kit (V2.0 and before), the most power-hungry sensors were the SGX MICS gas sensors (NO 2 and CO) which need an always-on heater with a permanent consumption of around 50 mAh (35 hours per charge). In V2.0 and V2.1, the PM sensor needs a fan with a consumption of 35 mAh (50 hours per charge). To improve the power consumption, the PM Sensor works on one-shot mode which turns the sensor off for \u00beths of the time, and only taking a reading after the sensor has stabilised. The kit normal operation cycle on battery is: read sensors, post, and then go to sleep. Until the battery charge is below 3%. When that threshold is passed it will enter an emergency sleep mode and interrupt all the normal functions until the charge goes over 5%. Power consumption \u00b6 The base power consumption of the device is 16mA (no sensors or wifi connection). While posting data online, the consumption can go up to 75mA accounting for the ESP8266, with an additional 90mA if all the sensors are to be working at the same time (Urban Sensor Board + PM sensor). Source files \u00b6 Download Check the source code","title":"Data Board"},{"location":"Components/boards/Data%20Board/#data-board","text":"The data board is a data-logger at the core of the sensors architecture supporting the Smart Citizen Kit and the Smart Citizen Station. This module is powered by an ARM M0+ 32-bits 48Mhz SAMD21 running the Smart Citizen Firmware , combining the low power consumption of the ARM M0 family with the power of a 32-bits processor with 32KB of RAM and 256KB of FLASH memory. This solution offers enough program storage and memory space to support multiple auxiliary sensors. This chip is used by the Arduino Zero and MKR boards, therefore benefiting from the open community built around these boards in particular and the Arduino project in general. Check the source code The data board also includes a Wi-Fi module, a micro SD card slot, an internal Flash and a battery management solution. In addition, it includes 4MB of extra Flash Memory for offline data storage, in case of network brownouts. The Wi-Fi Module is the well-known Espressif ESP8266 IEEE 802.11 b/g/n Wi-Fi with 4MB Internal Flash for web content storage: The Data Board connects to the sensor board providing power, analog and digital communications (12 bits ADC, GPIO, I2C, I2S, VCC). The data board also includes a Seeed Studio standard Grove connector where off-the-shelf modules from the same manufacturer can be connected. The connector supports an independent I2C bus by default, but by software it can be configured to support other uses (GPIO, I2C and UART). It can supply power up to 750mA, and it can be enabled or disabled by software to save power. The board includes a power unit, with a battery management system, capable of handling a variety of Lithium polymer cells. The batteries are connected to a standard JST-2 pin battery connector. The Smart Citizen Kit by default uses a 2000mAh battery, but larger capacities can be used. Under normal conditions, and depending on the sensors enabled, a 2000mAh battery can last between 24 hours (with all sensors enabled, and a 1-minute recording frequency) to more than a week. The board also features a sleep mode , through which drastically lower average consumption are achieved. The controller allows the batteries to be easily charged using the boards micro USB connector using any standard USB power adapter like the ones used on Smartphones. On remote areas, it can also be powered using a selection of PV Panels like Voltaics Systems 6W panel.","title":"Data Board"},{"location":"Components/boards/Data%20Board/#firmware","text":"The Smart Citizen Kit firmware is comprised of two parts: 1) the primary processing tasks are done by the SAMD21 microcontroller firmware; 2) the tasks related to network communication are run through the ESP8266. The SAMD21 is built on top of the Arduino Zero with a custom variant for the Data Board main MCU. The ESP8266 is also built using the Arduino ESP Core. Both firmwares are built and managed with Platform IO, an open-source IDE for embedded development. Platform IO features built-in dependency management and allows you to compile and upload both processors with a single command. Using the SWD ARM connector you can change the MCU bootloader and debug the firmware using Open Source tools. Info Learn more about the software running inside the Data Board on the Firmware section . Software guides Check the firmware guides and learn how to update and even modify the software: Edit the Firmware Update the Firmware Debug the Firmware (advanced)","title":"Firmware"},{"location":"Components/boards/Data%20Board/#buses","text":"","title":"Buses"},{"location":"Components/boards/Data%20Board/#sensor-boards-connector","text":"The Kit features a modular architecture where sensors can be updated independently by replacing any individual Sensor Board. The Sensor Boards features GPIO, ADC, I2C, UART and I2S connections at 3.3V. Currently, we only offer the Urban Sensor Board, but more boards are on the way, and you can even design and build a custom one. Example of a Sensor Board SAMD21 Pins Arduino Zero Pin SCK Pins SCK Conector SCK Conector SCK Pins Arduino Zero Pin SAMD21 Pins GND GND GND 16 15 GND GND GND GND GND GND 14 13 GND GND GND PA11 0 I2S_FS 12 11 TX A5 PB2 PA7 9 I2S_SD 10 9 RX 25 PB3 PA10 1 I2S_SCK 8 7 5V 5V 5V PA22 20 SDA 6 5 PWM_CO 13 PA9 PA23 21 SCL 4 3 PWM_NOX 14 PA8 VCC VCC VCC 2 1 VCC VCC VCC","title":"Sensor Boards connector"},{"location":"Components/boards/Data%20Board/#auxiliary-connector","text":"The Data Board features and independent configurable auxiliary bus at 3.3V with a SEEED Studio Grove connector. The Bus has native support for I2C, but it can also be setup on firmware as a GPIO or UART port. It can supply power up to 750mA, and it can be enabled or disabled by software. Example of devices connected via the AUX connector.","title":"Auxiliary connector"},{"location":"Components/boards/Data%20Board/#power-management","text":"The Smart Smart Citizen Kit gives us the possibility of running directly from a USB power source with or without lithium battery, using the BQ24259 USB Charger . The charger manages external power regulation, battery fast charging (up to 2Ah) and USB OTG that allow us powering other devices from the SCK (currently not implemented). Normaly the SCK uses a 2000 mAh Lithium polymer battery but it is possible to take advantage of larger batteries. The charging current is regulated with a manual imposed limit that can be configured, and also auto adjusts to the connected USB charger capacity. It is also possible to use solar panel (5v) to charge the SCK. The power consumption of the kit depends on which sensors are enabled and how often they are read/published. Between readings the kit goes to sleep mode turning off almost all the subsystems and reducing the power consumption. In previous versions of the kit (V2.0 and before), the most power-hungry sensors were the SGX MICS gas sensors (NO 2 and CO) which need an always-on heater with a permanent consumption of around 50 mAh (35 hours per charge). In V2.0 and V2.1, the PM sensor needs a fan with a consumption of 35 mAh (50 hours per charge). To improve the power consumption, the PM Sensor works on one-shot mode which turns the sensor off for \u00beths of the time, and only taking a reading after the sensor has stabilised. The kit normal operation cycle on battery is: read sensors, post, and then go to sleep. Until the battery charge is below 3%. When that threshold is passed it will enter an emergency sleep mode and interrupt all the normal functions until the charge goes over 5%.","title":"Power management"},{"location":"Components/boards/Data%20Board/#power-consumption","text":"The base power consumption of the device is 16mA (no sensors or wifi connection). While posting data online, the consumption can go up to 75mA accounting for the ESP8266, with an additional 90mA if all the sensors are to be working at the same time (Urban Sensor Board + PM sensor).","title":"Power consumption"},{"location":"Components/boards/Data%20Board/#source-files","text":"Download Check the source code","title":"Source files"},{"location":"Components/boards/Gases%20Pro%20Board/","text":"Gases Pro Sensor Board \u00b6 Deprecated The Gases Pro Sensor Board is the development board used during the iSCAPE Project. For reading electrochemical sensors, please refer to the Analog Sensor Board section . The Gases Sensor Board is a custom, ultra-low noise, high-performance, low power, digital output driver for 3 Alphasense Ltd. Electrochemical Series B Gas Sensors specifically designed for the project from the ground up. Check the source code Sensor measurements \u00b6 The Gases Pro Board is capable of interfacing with Alphasense Ltd. B4 series sensors without offset voltage compensarion, i.e. it can't interface with NO, NO2 or OX sensors, but it can be used for CO, SO2 and H2S. For measuring NO, NO2 or OX, please refer to the Analog Sensor Board Design \u00b6 Each of the three drivers for Alphasense Ltd. Series B Sensors is built around the same design. They include a three stage adjustable amplifier design for the working electrode and and another simetrical design for the auxiliary electrode. Both signals are then feed to a high accuracy delta-sigma A/D converter with differential inputs 18 bits of resolution. All the parameters are digitally adjustable via I2C from the Data Board . Each board also include a unique identifier chip allowing the firmware on the Data Board to identify the board and apply the corresponding calibration values and a humidity and temperature sensor. Setup \u00b6 The board is connected to the Data Board using the AUX connector. Before, the Alphasense sensors need to be in place and properly registered using the board id. The board will be autodetected by the main Firmware running on the Data Board. Multiple sensor board can be daisy-chained as seen on the image. Source files \u00b6 Download Check the source code","title":"Gas Pro Sensor Board"},{"location":"Components/boards/Gases%20Pro%20Board/#gases-pro-sensor-board","text":"Deprecated The Gases Pro Sensor Board is the development board used during the iSCAPE Project. For reading electrochemical sensors, please refer to the Analog Sensor Board section . The Gases Sensor Board is a custom, ultra-low noise, high-performance, low power, digital output driver for 3 Alphasense Ltd. Electrochemical Series B Gas Sensors specifically designed for the project from the ground up. Check the source code","title":"Gases Pro Sensor Board"},{"location":"Components/boards/Gases%20Pro%20Board/#sensor-measurements","text":"The Gases Pro Board is capable of interfacing with Alphasense Ltd. B4 series sensors without offset voltage compensarion, i.e. it can't interface with NO, NO2 or OX sensors, but it can be used for CO, SO2 and H2S. For measuring NO, NO2 or OX, please refer to the Analog Sensor Board","title":"Sensor measurements"},{"location":"Components/boards/Gases%20Pro%20Board/#design","text":"Each of the three drivers for Alphasense Ltd. Series B Sensors is built around the same design. They include a three stage adjustable amplifier design for the working electrode and and another simetrical design for the auxiliary electrode. Both signals are then feed to a high accuracy delta-sigma A/D converter with differential inputs 18 bits of resolution. All the parameters are digitally adjustable via I2C from the Data Board . Each board also include a unique identifier chip allowing the firmware on the Data Board to identify the board and apply the corresponding calibration values and a humidity and temperature sensor.","title":"Design"},{"location":"Components/boards/Gases%20Pro%20Board/#setup","text":"The board is connected to the Data Board using the AUX connector. Before, the Alphasense sensors need to be in place and properly registered using the board id. The board will be autodetected by the main Firmware running on the Data Board. Multiple sensor board can be daisy-chained as seen on the image.","title":"Setup"},{"location":"Components/boards/Gases%20Pro%20Board/#source-files","text":"Download Check the source code","title":"Source files"},{"location":"Components/boards/PM%20Board/","text":"PM Sensor Board \u00b6 The PM Sensor Board is an expansion board which can provide additional measurements, such as two extra Plantower PMS 5003, one wire temperature sensors and extra GPIO and ADC support. This is done with a custom designed PCB with an MCU to provide I2C connectivity with the Data Board. Check the source code Design \u00b6 The PM Sensor Board runs a dedicated ARM M0+ 32-bits, the same as the Data Board to provide a unified hardware architecture. The board includes an higly efficient step up to provide 5V to drive the PM sensors and a disable/enable circuit to turn off the sensor by software. Info Visit the source files section to download the complete schematics. Pinout \u00b6 SERCOM distribution \u00b6 Setup \u00b6 The board is connected to the Data Board using the AUX connector. Before, the Plantower PMS sensors need to be connected. The board will autodetect the PMS sensors and present them seamlessly to the main Firmware running on the Data Board. Multiple sensor board can be daisy-chained as seen on the image. Source files \u00b6 Download Check the source code","title":"PM Board"},{"location":"Components/boards/PM%20Board/#pm-sensor-board","text":"The PM Sensor Board is an expansion board which can provide additional measurements, such as two extra Plantower PMS 5003, one wire temperature sensors and extra GPIO and ADC support. This is done with a custom designed PCB with an MCU to provide I2C connectivity with the Data Board. Check the source code","title":"PM Sensor Board"},{"location":"Components/boards/PM%20Board/#design","text":"The PM Sensor Board runs a dedicated ARM M0+ 32-bits, the same as the Data Board to provide a unified hardware architecture. The board includes an higly efficient step up to provide 5V to drive the PM sensors and a disable/enable circuit to turn off the sensor by software. Info Visit the source files section to download the complete schematics.","title":"Design"},{"location":"Components/boards/PM%20Board/#pinout","text":"","title":"Pinout"},{"location":"Components/boards/PM%20Board/#sercom-distribution","text":"","title":"SERCOM distribution"},{"location":"Components/boards/PM%20Board/#setup","text":"The board is connected to the Data Board using the AUX connector. Before, the Plantower PMS sensors need to be connected. The board will autodetect the PMS sensors and present them seamlessly to the main Firmware running on the Data Board. Multiple sensor board can be daisy-chained as seen on the image.","title":"Setup"},{"location":"Components/boards/PM%20Board/#source-files","text":"Download Check the source code","title":"Source files"},{"location":"Components/boards/Power%20Supply/","text":"Smart Citizen Power Supply \u00b6 The Smart Citizen Power Supply is a simple power supply to power the SCK and the Smart Citizen Station with 110-230 AC mains power, including a 1.6A input fuse protection and a 5VDC regulated output. The power supply can be one of two options: MeanWell-IRM-10-5 (datasheet in References folder and here ) TracoPower-TMPS-10105 (datasheet in References folder and here ) Check the datasheets for other available input convertions and limits. Tips Have a look at the guides for more detailed information on how to operate the power supply . Enclosure \u00b6 The PCB has the footprint to fit inside a Bopla Ref. 38102200 IP65 Enclosure with two built-in cable glands. A Bopla Polymas PK 102-211 enclosure is used. The models can be found in the manufacturer's site in STP format. Check the source","title":"Power Supply"},{"location":"Components/boards/Power%20Supply/#smart-citizen-power-supply","text":"The Smart Citizen Power Supply is a simple power supply to power the SCK and the Smart Citizen Station with 110-230 AC mains power, including a 1.6A input fuse protection and a 5VDC regulated output. The power supply can be one of two options: MeanWell-IRM-10-5 (datasheet in References folder and here ) TracoPower-TMPS-10105 (datasheet in References folder and here ) Check the datasheets for other available input convertions and limits. Tips Have a look at the guides for more detailed information on how to operate the power supply .","title":"Smart Citizen Power Supply"},{"location":"Components/boards/Power%20Supply/#enclosure","text":"The PCB has the footprint to fit inside a Bopla Ref. 38102200 IP65 Enclosure with two built-in cable glands. A Bopla Polymas PK 102-211 enclosure is used. The models can be found in the manufacturer's site in STP format. Check the source","title":"Enclosure"},{"location":"Components/boards/Urban%20Board/","text":"Urban Sensor Board \u00b6 What is it? \u00b6 The Urban Sensor Board is a solution that contains a selection of low-cost sensors for environmental monitoring. Its main purpose is to serve as a tool for citizen science and awareness activities, and for that reason, metrics such as temperature, pressure, and humidity, as well as noise levels, ambient light, air quality indicators and PM sensors are included. The Urban Sensor Board has undergone several modifications throughout its development, and its current version is V2.1 : An iteration with a different set of sensors was developed as part of the iScape Project and is shown in the image below: Check the source code A major effort has been carried out on this design to improve the accuracy of the data provided. The sensors on the board include: Air Temperature, Relative Humidity, Noise Levels and Spectrum, Ambient Light and Barometric Pressure. The board also features a section especially focused on Air Quality including a Particle Matter Sensor, and, in version V2.1, an eCO2 and TVOC sensor. Previously, in version V2.0, a Carbon Monoxide and a Nitrogen Dioxide sensors was included, but due to the high power consumption and the need of important calibration efforts, these were removed. The sensor density of the board design offers more than ten different environmental metrics at a very low cost and differentiates the design from other existing solutions. The following sections describe in detail each of the sensors available. Board assembly The Urban Sensor Board connect to the Data Board connector named Sensor Board V2.1 Sensors Measurement Units Sensor Air Temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise Level and Spectrum dBA, dBC, dBZ Invensense ICS-43432 Ambient Light Lux Rohm BH1721FVC Barometric pressure and AMSL Pa and Meters NXP MPL3115A2 eCO2 and TVOC ppm/ppb AMS CCS811 Particulate Matter PM1/PM2.5/PM10 \u00b5g/m3 PMS 5003 V2.0 Sensors Measurement Units Sensor Air Temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise Level and Spectrum dBA, dBC, dBZ Invensense ICS-43432 Ambient Light Lux Rohm BH1721FVC Barometric pressure and AMSL Pa and Meters NXP MPL3115A2 Carbon Monoxide ppm (Periodic Baseline Calibration Required) SGX MICS-4514 Nitrogen Dioxide ppb (Periodic Baseline Calibration Required) SGX MICS-4514 Particulate Matter PM2.5 (external - power req) \u00b5g/m3 PMS 5003 Sensor performance Make sure you visit the sensor performance page for further information about the sensors.","title":"Urban Board"},{"location":"Components/boards/Urban%20Board/#urban-sensor-board","text":"","title":"Urban Sensor Board"},{"location":"Components/boards/Urban%20Board/#what-is-it","text":"The Urban Sensor Board is a solution that contains a selection of low-cost sensors for environmental monitoring. Its main purpose is to serve as a tool for citizen science and awareness activities, and for that reason, metrics such as temperature, pressure, and humidity, as well as noise levels, ambient light, air quality indicators and PM sensors are included. The Urban Sensor Board has undergone several modifications throughout its development, and its current version is V2.1 : An iteration with a different set of sensors was developed as part of the iScape Project and is shown in the image below: Check the source code A major effort has been carried out on this design to improve the accuracy of the data provided. The sensors on the board include: Air Temperature, Relative Humidity, Noise Levels and Spectrum, Ambient Light and Barometric Pressure. The board also features a section especially focused on Air Quality including a Particle Matter Sensor, and, in version V2.1, an eCO2 and TVOC sensor. Previously, in version V2.0, a Carbon Monoxide and a Nitrogen Dioxide sensors was included, but due to the high power consumption and the need of important calibration efforts, these were removed. The sensor density of the board design offers more than ten different environmental metrics at a very low cost and differentiates the design from other existing solutions. The following sections describe in detail each of the sensors available. Board assembly The Urban Sensor Board connect to the Data Board connector named Sensor Board V2.1 Sensors Measurement Units Sensor Air Temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise Level and Spectrum dBA, dBC, dBZ Invensense ICS-43432 Ambient Light Lux Rohm BH1721FVC Barometric pressure and AMSL Pa and Meters NXP MPL3115A2 eCO2 and TVOC ppm/ppb AMS CCS811 Particulate Matter PM1/PM2.5/PM10 \u00b5g/m3 PMS 5003 V2.0 Sensors Measurement Units Sensor Air Temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise Level and Spectrum dBA, dBC, dBZ Invensense ICS-43432 Ambient Light Lux Rohm BH1721FVC Barometric pressure and AMSL Pa and Meters NXP MPL3115A2 Carbon Monoxide ppm (Periodic Baseline Calibration Required) SGX MICS-4514 Nitrogen Dioxide ppb (Periodic Baseline Calibration Required) SGX MICS-4514 Particulate Matter PM2.5 (external - power req) \u00b5g/m3 PMS 5003 Sensor performance Make sure you visit the sensor performance page for further information about the sensors.","title":"What is it?"},{"location":"Components/enclosures/Enclosures/","text":"Check the source If we want to leave the kit on the outside for a few days you will need to provide it with extra protection. Below you can see the well-known 3D printed enclosure (for versions without PM sensor): A note about the enclosures Previous versions of the Smart Citizen Kit, without the PMS5003 sensor, included a 3D printed enclosure that holds the Data Board and Urban Sensor Board, as well as the lithium batteries. Different versions are available for the SCK 2.1, either with a CNC'ed version, or 3D printed one . Currently, there is no mass produced version at SEEED. See the CNC'ed HDPE version: Or the 3D printed one: Follow the guides Head over to the guides section for instructions on fabricating each enclosure. Want to contribute? Visit the Smart Citizen Enclosures repository to download, modify, or add your own!","title":"Enclosures"},{"location":"Components/legacy/","text":"Getting Started \u00b6 Installing a Smart Smart Citizen Kit 1.0 / 1.1 \u00b6 Welcome aboard! The Smart Citizen Team wants to thank you for being here, for purchasing a kit, and for joining the community taking part in this adventure. To join the Smart Citizen family , we're going to walk you through the steps to add your Smart Smart Citizen Kit to the platform, we'll refer to the Smart Smart Citizen Kit as the SCK for now on. SIGN UP First, go to smartcitizen.me using your web browser, currently only Google Chrome is supported for the SCK configuration process. Click in Go to the platform and then Sign up on the upper right menu. Complete the required fields, accept the Terms of use and privacy and click the Sign up button. Required Fields: Username - Pick any name you want as long as someone else isn't already using the it. Email - Enter your email address. Password - Must be at least 6 characters. You are now registered, you will receive an email notification. You will be able to complete your user details later on your profile page . ADD YOUR SMART Smart Citizen Kit On the upper right menu click on Log in and write the access credentials you just choose. Go on your user icon on the upper right corner and click Profile . On your kit's profile page click on Add a new kit . Please, provide basic information about your kit so others can understand better how you set it up and how you plan to use it. Title - Give your SCK a name. This title will be associated with your SCK data. Exposure - The SCK is designed to work outdoors but maybe you like to test it indoors first. Choose INDOOR or OUTDOOR to help others understand the data you will provide. Kit location - Please, let us locate you, later you can adjust the location by dragging the marker on the map. Kit tags - We suggest you to add tags to help other find your kit. Choose from the available tags or submit a tag request on the Forum . Description - This is an optional field that helps others understand the data you provide. Why is it for? Is this part of any kind of project? Information like \"outdoors in my balcony facing the road\" or \"in my garden under a tree\" could help others understand why some of your data looks the way it does. Click on the Next button, you are close to the end. SETUP YOUR SMART Smart Citizen Kit In order to have your kit connected to the Smart Citizen platform, we need a few step involving the connexion of your kit to your computer. This tool will help you register your kit to the platform, setup your kit's Wi-Fi settings and update its firmware. Currently we support Google Chrome in Win, Mac and Linux. If you are on Windows check first How to install the drivers on Windows? section for more information. Click on the ADD TO CHROME button and wait for the extension to install. Finally its time to unpack your SCK. Connect the micro USB cable to your SCK and your computer and turn on the SCK switch on the upper left corner. On the dropdown menu you should select the port your SCK is connected. On Mac and Linux the port will be named Smartcitizen or something like /dev/ttyACM0. On Windows this is likely to be COM3 or higher (COM1 and COM2 are usually reserved for hardware serial ports). To find out, you can disconnect your SCK and check the dropdown; the entry that disappears should be the SCK board. Reconnect the board and select that serial port. If you have any issue check your kit is properly connected, switched ON and you do not have the Arduino IDE or other software that uses the serial port open. We recommend you to switch your kit OFF and ON in order to reset the kit before you start. Now just click Start process in order to start configuring your kit. The configurator will try to determine your hardware and firmware version, if your firmware version is below 0.9.3 you need to update the firmware in order to continue with the process. If the configurator can't communicate with your board it will report an Unrecognized board , we recommend you to try a couple of times, disconnecting your kit, reloading the page and connecting it again to make sure that this is not just a serial port communication problem. If the configurator still can't communicate with your kit it may be a firmware/hardware problem. You may try to install the firmware and see if this solves the problem. If you can't upload the firmware please refer to the Firmware update problem section or try doing a Manual set up. After firmware is installed/updated we can continue with Wi-Fi settings. You can add up to 5 different Wi-Fi credentials in your kit. This will allow your kit to connect to multiple networks in case one fails or you will like to move in between to places You should complete the fields with your router or access point information: At home you should find all the requested information below your home fiber or DSL router on schools and companies you can contact your IT team SSID - This is your Wifi network's name, for example: My Home Wifi . Phrase - This is your Wi-Fi password , you will usually find it written under your router or you can contact your IT team. If your Wi-Fi doesn't have a password just leave it empty and select Open Wi-Fi network on the Encryption dropdown. Take care the SSID and Phrase can't be longer than 19 characters and they can't contain the $ symbol. Encryption - Optional You can leave it to WPA2 this is the default for most modern networks. External Antenna - Optional Is your SCK quite far away from Wi-Fi access point? You can use an external antenna with your SCK. Check the How to use an external antenna? ) Next step is optional, you can set your SCK update interval to optimize the battery performance and sensor resolution ratio. By default your SCK will take a reading every minute and post it on-line Reading interval - This defines every how much time your SCK sensors will take a reading and record it. You can set it from 1 minute to an hour. Number posts - This defines every how much sensor readings your SCK will publish the reading on-line. You can set it from 1 to 20. Now is time to record the settings on your SCK, just click on Sync Settings and wait for a moment. If there is any issue during the process this will be displayed on the **Message window* above. I f you need help please contact support@smartcitizen.me * Last but now least you will see your SCK Mac Address registered below this is the ID of your SCK. Just click on Save and wait for your kit to publish. Done! You might need to wait up to 2 minutes or more if you changed the time update settings and refresh your browser in order to see your SCK first post in your device page. Did you registered your SCK before or did your SCK belong to someone else before? Take care your SCK can be registered once at a time, in case you registered before check How to unlink your SCK? or contact support@smartcitizen.me . Please, if your kit is not publishing properly contact support@smartcitizen.me or ask for help in the forum . Manual set up: The Serial Way \u00b6 In this tutorial aimed to advanced users you will configure your SCK using serial communication. By using serial communication, you will register your Wi-Fi settings into the SCK and save the SCK\u2019s MAC address in our server. The SCK, like most Arduino chips, has the ability to communicate through serial protocol (when plugged with a proper USB cable). The SCK uses the WiFly module to communicate with your Wi-Fi router. Anyway, through serial communication you will be able to send the commands directly with this module to set your Wi-Fi settings and extract the MAC address used by our server to verify your identity. Note that this tutorial works for both SCK v1.0 (from the Goteo crowdfunding campaign) and SCK v1.1 (from the KickStarter crowdfunding campaign), independently of the firmware version used. Configuring the Wi-Fi settings \u00b6 Open Arduino IDE. Connect your SCK via USB. From the Tools > Board menu, choose the right USB port (generally the last one). From the Tools > Serial port menu, select the right board. This is Leonardo for SCK v1.0 (Goteo) or LilyPad Arduino USB for SCK v1.1 (Kickstarter). Open the serial monitor window in the Arduino IDE (button at the top-right of the main window). Set the options to \"115200 baud\" and \u201cNo line return\u201d (drop-down menu at the bottom-right of the monitor window). Wake up the module and activate the Wi-Fi command mode by typing in the serial monitor: $$$ Change to \u201cCarriage return\u201d option (drop-down menu at the bottom-right of the monitor window) Add a new SSID to memory by typing: set wlan ssid XXX Note: You have to replace XXX with your ssid name, filling any space with the dollar ($) character. Due to hardware limitations it can't be longer than 32 characters. Add a new phrase to memory (optional, password for WPA1 & WPA2): set wlan phrase XXX Note: You have to replace XXX with your phrase, filling any space with the dollar ($) character. Add a new key to memory (optional, password for WEP & WEP64): set wlan key XXX Add an authentication method into memory (replace XXX by \u201c0\u201d for Open, \u201c1\u201d for WEP, \u201c2\u201d for WPA1, \u201c4\u201d for WPA2, \u201c8\u201d for WEP64): set wlan auth XXX Add an antenna type into memory (replace XXX by \u201c0\u201d to use the internal antenna or \u201c1\u201d if you use an external antenna): set wlan ext_antenna XXX Get the MAC address of the kit by typing: get mac Copy/Save the answer for further use. Exit and go back to the normal operational mode by typing: exit Registering the kit in the platform \u00b6 After you've uploaded your settings, don't forget to register your kit in our database by saving it's mac address. To find the mac address, you can use the serial command \"get mac\". Or have a look at the wifi module on the board and read the serial number under the bar code (something like \"131G0006662116E4\" on kit v1.0 or \"0006662116E4\" on kit v.1.1). The mac address is the last 12 digit of this serial, separated by a colon every two number. From a number like 0006662116E4 you would write 00:06:66:21:16:E4 . In both cases, you have to fill the mac address input field in the configuration page of your kit and press the save button. You are now done with the manual configuration of your SCK. Wait for a few minutes to see your data coming on the server and being displayed on the web page. You can also check that everything is ok by looking at the Arduino serial monitor. Debug messages coming from your SCK should look like this: If you want to explore further options with the WiFly module check The SCK Command Line section. If you encounter any issue, please share your problem on the forum Manual set up: The Compilation Way \u00b6 This tutorial is aimed to advanced users, we will guide you through the process of setting up your kit by editing directly the source code. As the code is Open Source, one way of setting the Wi-Fi of your SCK is to download the latest firmware, edit some lines of code, recompile it and upload it to the kit. One advantage of this method is that it gives you the opportunity to register multiple Wi-Fi networks at the same time and make the persistent. The Wi-fi networks that you register directly in the source code are called hardcoded and the only way to remove them is with the same process of compiling and uploading the firmware again. This is useful if your SCK is traveling from one location to another where the Wi-Fi credentials are known. The downside of this method is that you can not extract the MAC address of your kit, if you don't know it yet you will have to use the method described in The Serial Way or via the configurator in the setup page of your kit. Getting the Firmware \u00b6 You can download the latest firmware on our Github: https://github.com/fablabbcn/Smart-Citizen-Kit/releases As you may know, the hardware and software are based on the Arduino project. We will use the Arduino IDE to edit the firmware and upload it to the kit. This tutorial have been tested with Arduino 1.6.8, please download and install the Arduino IDE . Once installed open the file Smart-Citizen-Kit/sck_beta_v0_9_0/sck_beta_v0_9.ino Editing the code \u00b6 If you want to set the network configuration manually, you should go to the Constants.h tab and modify the lines you see below: #define networks 0 #if (networks > 0) static char* mySSID[networks] = { \"SSID1\" , \"SSID2\" }; static char* myPassword[networks] = { \"PASS1\" , \"PASS2\" }; static char* wifiEncript[networks] = { WPA2 , WPA2 }; static char* antennaExt[networks] = { INT_ANT , INT_ANT }; #endif The easiest way would be to write \"#define networks X\" (where X is the number of WI-FI networks you are going to use) and fill the options for your network: Add the name of your network in SSIDX and the corresponding password in PASSX . Due to hardware limitations neither the password or the ssid can't be longer tham 32 characters. On wifiEncript you could also choose the encryption mode that fits with your network's configuration ( OPEN , WEP , WPA1 , WPA2 , WEP64 ). On antennaExt you can choose the type of antenna you are using ( INT_ANT for internal antenna (default) or EXT_ANT for external antenna). If you register only one wifi credential, you should obtain something like this: #define networks 1 #if (networks > 0) char* mySSID[networks] = { \"MyWifiSSID\" }; char* myPassword[networks] = { \"MyPassword\" }; char* wifiEncript[networks] = { WPA2 }; char* antennaExt[networks] = { INT_ANT }; #endif Note that if you configure more than one Wi-fi network you have to separate the variables with a comma, for example: char* mySSID[networks] = { \"MyFirstSSID\", \"MySecondSSID\" }; Uploading the code \u00b6 On the Arduino IDE Tools menu you should select the right Board in the Boards menu: For SmartSmart Citizen Kit version 1.0 select Arduino Leonardo (ATmega 32U4 at 16Mhz) For SmartSmart Citizen Kit version 1.1 select Arduino LilyPad USB (ATmega 32U4 at 8Mhz) The Arduino IDE should automatically select the right USB port but you can check it in the Tools >> Port menu. Now you just need to click the Upload button and Arduino will do the rest for you! In case you have any issue please check the Arduino Troubleshooting guide. Registering the kit in the platform \u00b6 After you\u2019ve uploaded your settings, don\u2019t forget to register your kit in our database by saving it\u2019s mac address. To find the mac address, you can use the serial command \u201cget mac\u201d by following the section The Serial Way . Or have a look at the wifi module on the board and read the serial number under the bar code (something like \u201c131G0006662116E4\u201d on kit v1.0 or \u201c0006662116E4\u201d on kit v.1.1). The mac address is the last 12 digit of this serial, separated by a colon every two number. From a number like 0006662116E4 you would write 00:06:66:21:16:E4 . In both cases, you have to fill the mac address input field in the configuration page of your kit and press the save button. You are now done with the manual configuration of your SCK. Wait for a few minutes to see your data coming on the server and being displayed on the web page. You can also check that everything is ok by looking the output of your kit via the Arduino serial monitor. If you encounter any issue, please share your problem on the forum Attaching the solar panel \u00b6 The solar panel should fulfill the specification of a voltage bigger than 8v and less than 15v, 12v is the recommended voltage, and a minimum of 500mA. In order to attach the solar panel you have to solder the cables of the solar panel to the pads marked in the next image for version 1.0 of the SCK. For version 1.1 you have to connect the cables to the connector marked in the next image. In both versions, yo have to attach the plus of solar panel to the plus pad of the SCK, and the minus of the solar panel to the minus pad of the SCK.","title":"Main"},{"location":"Components/legacy/#getting-started","text":"","title":"Getting Started"},{"location":"Components/legacy/#installing-a-smart-smart-citizen-kit-10-11","text":"Welcome aboard! The Smart Citizen Team wants to thank you for being here, for purchasing a kit, and for joining the community taking part in this adventure. To join the Smart Citizen family , we're going to walk you through the steps to add your Smart Smart Citizen Kit to the platform, we'll refer to the Smart Smart Citizen Kit as the SCK for now on. SIGN UP First, go to smartcitizen.me using your web browser, currently only Google Chrome is supported for the SCK configuration process. Click in Go to the platform and then Sign up on the upper right menu. Complete the required fields, accept the Terms of use and privacy and click the Sign up button. Required Fields: Username - Pick any name you want as long as someone else isn't already using the it. Email - Enter your email address. Password - Must be at least 6 characters. You are now registered, you will receive an email notification. You will be able to complete your user details later on your profile page . ADD YOUR SMART Smart Citizen Kit On the upper right menu click on Log in and write the access credentials you just choose. Go on your user icon on the upper right corner and click Profile . On your kit's profile page click on Add a new kit . Please, provide basic information about your kit so others can understand better how you set it up and how you plan to use it. Title - Give your SCK a name. This title will be associated with your SCK data. Exposure - The SCK is designed to work outdoors but maybe you like to test it indoors first. Choose INDOOR or OUTDOOR to help others understand the data you will provide. Kit location - Please, let us locate you, later you can adjust the location by dragging the marker on the map. Kit tags - We suggest you to add tags to help other find your kit. Choose from the available tags or submit a tag request on the Forum . Description - This is an optional field that helps others understand the data you provide. Why is it for? Is this part of any kind of project? Information like \"outdoors in my balcony facing the road\" or \"in my garden under a tree\" could help others understand why some of your data looks the way it does. Click on the Next button, you are close to the end. SETUP YOUR SMART Smart Citizen Kit In order to have your kit connected to the Smart Citizen platform, we need a few step involving the connexion of your kit to your computer. This tool will help you register your kit to the platform, setup your kit's Wi-Fi settings and update its firmware. Currently we support Google Chrome in Win, Mac and Linux. If you are on Windows check first How to install the drivers on Windows? section for more information. Click on the ADD TO CHROME button and wait for the extension to install. Finally its time to unpack your SCK. Connect the micro USB cable to your SCK and your computer and turn on the SCK switch on the upper left corner. On the dropdown menu you should select the port your SCK is connected. On Mac and Linux the port will be named Smartcitizen or something like /dev/ttyACM0. On Windows this is likely to be COM3 or higher (COM1 and COM2 are usually reserved for hardware serial ports). To find out, you can disconnect your SCK and check the dropdown; the entry that disappears should be the SCK board. Reconnect the board and select that serial port. If you have any issue check your kit is properly connected, switched ON and you do not have the Arduino IDE or other software that uses the serial port open. We recommend you to switch your kit OFF and ON in order to reset the kit before you start. Now just click Start process in order to start configuring your kit. The configurator will try to determine your hardware and firmware version, if your firmware version is below 0.9.3 you need to update the firmware in order to continue with the process. If the configurator can't communicate with your board it will report an Unrecognized board , we recommend you to try a couple of times, disconnecting your kit, reloading the page and connecting it again to make sure that this is not just a serial port communication problem. If the configurator still can't communicate with your kit it may be a firmware/hardware problem. You may try to install the firmware and see if this solves the problem. If you can't upload the firmware please refer to the Firmware update problem section or try doing a Manual set up. After firmware is installed/updated we can continue with Wi-Fi settings. You can add up to 5 different Wi-Fi credentials in your kit. This will allow your kit to connect to multiple networks in case one fails or you will like to move in between to places You should complete the fields with your router or access point information: At home you should find all the requested information below your home fiber or DSL router on schools and companies you can contact your IT team SSID - This is your Wifi network's name, for example: My Home Wifi . Phrase - This is your Wi-Fi password , you will usually find it written under your router or you can contact your IT team. If your Wi-Fi doesn't have a password just leave it empty and select Open Wi-Fi network on the Encryption dropdown. Take care the SSID and Phrase can't be longer than 19 characters and they can't contain the $ symbol. Encryption - Optional You can leave it to WPA2 this is the default for most modern networks. External Antenna - Optional Is your SCK quite far away from Wi-Fi access point? You can use an external antenna with your SCK. Check the How to use an external antenna? ) Next step is optional, you can set your SCK update interval to optimize the battery performance and sensor resolution ratio. By default your SCK will take a reading every minute and post it on-line Reading interval - This defines every how much time your SCK sensors will take a reading and record it. You can set it from 1 minute to an hour. Number posts - This defines every how much sensor readings your SCK will publish the reading on-line. You can set it from 1 to 20. Now is time to record the settings on your SCK, just click on Sync Settings and wait for a moment. If there is any issue during the process this will be displayed on the **Message window* above. I f you need help please contact support@smartcitizen.me * Last but now least you will see your SCK Mac Address registered below this is the ID of your SCK. Just click on Save and wait for your kit to publish. Done! You might need to wait up to 2 minutes or more if you changed the time update settings and refresh your browser in order to see your SCK first post in your device page. Did you registered your SCK before or did your SCK belong to someone else before? Take care your SCK can be registered once at a time, in case you registered before check How to unlink your SCK? or contact support@smartcitizen.me . Please, if your kit is not publishing properly contact support@smartcitizen.me or ask for help in the forum .","title":"Installing a Smart Smart Citizen Kit 1.0 / 1.1"},{"location":"Components/legacy/#manual-set-up-the-serial-way","text":"In this tutorial aimed to advanced users you will configure your SCK using serial communication. By using serial communication, you will register your Wi-Fi settings into the SCK and save the SCK\u2019s MAC address in our server. The SCK, like most Arduino chips, has the ability to communicate through serial protocol (when plugged with a proper USB cable). The SCK uses the WiFly module to communicate with your Wi-Fi router. Anyway, through serial communication you will be able to send the commands directly with this module to set your Wi-Fi settings and extract the MAC address used by our server to verify your identity. Note that this tutorial works for both SCK v1.0 (from the Goteo crowdfunding campaign) and SCK v1.1 (from the KickStarter crowdfunding campaign), independently of the firmware version used.","title":"Manual set up: The Serial Way"},{"location":"Components/legacy/#configuring-the-wi-fi-settings","text":"Open Arduino IDE. Connect your SCK via USB. From the Tools > Board menu, choose the right USB port (generally the last one). From the Tools > Serial port menu, select the right board. This is Leonardo for SCK v1.0 (Goteo) or LilyPad Arduino USB for SCK v1.1 (Kickstarter). Open the serial monitor window in the Arduino IDE (button at the top-right of the main window). Set the options to \"115200 baud\" and \u201cNo line return\u201d (drop-down menu at the bottom-right of the monitor window). Wake up the module and activate the Wi-Fi command mode by typing in the serial monitor: $$$ Change to \u201cCarriage return\u201d option (drop-down menu at the bottom-right of the monitor window) Add a new SSID to memory by typing: set wlan ssid XXX Note: You have to replace XXX with your ssid name, filling any space with the dollar ($) character. Due to hardware limitations it can't be longer than 32 characters. Add a new phrase to memory (optional, password for WPA1 & WPA2): set wlan phrase XXX Note: You have to replace XXX with your phrase, filling any space with the dollar ($) character. Add a new key to memory (optional, password for WEP & WEP64): set wlan key XXX Add an authentication method into memory (replace XXX by \u201c0\u201d for Open, \u201c1\u201d for WEP, \u201c2\u201d for WPA1, \u201c4\u201d for WPA2, \u201c8\u201d for WEP64): set wlan auth XXX Add an antenna type into memory (replace XXX by \u201c0\u201d to use the internal antenna or \u201c1\u201d if you use an external antenna): set wlan ext_antenna XXX Get the MAC address of the kit by typing: get mac Copy/Save the answer for further use. Exit and go back to the normal operational mode by typing: exit","title":"Configuring the Wi-Fi settings"},{"location":"Components/legacy/#registering-the-kit-in-the-platform","text":"After you've uploaded your settings, don't forget to register your kit in our database by saving it's mac address. To find the mac address, you can use the serial command \"get mac\". Or have a look at the wifi module on the board and read the serial number under the bar code (something like \"131G0006662116E4\" on kit v1.0 or \"0006662116E4\" on kit v.1.1). The mac address is the last 12 digit of this serial, separated by a colon every two number. From a number like 0006662116E4 you would write 00:06:66:21:16:E4 . In both cases, you have to fill the mac address input field in the configuration page of your kit and press the save button. You are now done with the manual configuration of your SCK. Wait for a few minutes to see your data coming on the server and being displayed on the web page. You can also check that everything is ok by looking at the Arduino serial monitor. Debug messages coming from your SCK should look like this: If you want to explore further options with the WiFly module check The SCK Command Line section. If you encounter any issue, please share your problem on the forum","title":"Registering the kit in the platform"},{"location":"Components/legacy/#manual-set-up-the-compilation-way","text":"This tutorial is aimed to advanced users, we will guide you through the process of setting up your kit by editing directly the source code. As the code is Open Source, one way of setting the Wi-Fi of your SCK is to download the latest firmware, edit some lines of code, recompile it and upload it to the kit. One advantage of this method is that it gives you the opportunity to register multiple Wi-Fi networks at the same time and make the persistent. The Wi-fi networks that you register directly in the source code are called hardcoded and the only way to remove them is with the same process of compiling and uploading the firmware again. This is useful if your SCK is traveling from one location to another where the Wi-Fi credentials are known. The downside of this method is that you can not extract the MAC address of your kit, if you don't know it yet you will have to use the method described in The Serial Way or via the configurator in the setup page of your kit.","title":"Manual set up: The Compilation Way"},{"location":"Components/legacy/#getting-the-firmware","text":"You can download the latest firmware on our Github: https://github.com/fablabbcn/Smart-Citizen-Kit/releases As you may know, the hardware and software are based on the Arduino project. We will use the Arduino IDE to edit the firmware and upload it to the kit. This tutorial have been tested with Arduino 1.6.8, please download and install the Arduino IDE . Once installed open the file Smart-Citizen-Kit/sck_beta_v0_9_0/sck_beta_v0_9.ino","title":"Getting the Firmware"},{"location":"Components/legacy/#editing-the-code","text":"If you want to set the network configuration manually, you should go to the Constants.h tab and modify the lines you see below: #define networks 0 #if (networks > 0) static char* mySSID[networks] = { \"SSID1\" , \"SSID2\" }; static char* myPassword[networks] = { \"PASS1\" , \"PASS2\" }; static char* wifiEncript[networks] = { WPA2 , WPA2 }; static char* antennaExt[networks] = { INT_ANT , INT_ANT }; #endif The easiest way would be to write \"#define networks X\" (where X is the number of WI-FI networks you are going to use) and fill the options for your network: Add the name of your network in SSIDX and the corresponding password in PASSX . Due to hardware limitations neither the password or the ssid can't be longer tham 32 characters. On wifiEncript you could also choose the encryption mode that fits with your network's configuration ( OPEN , WEP , WPA1 , WPA2 , WEP64 ). On antennaExt you can choose the type of antenna you are using ( INT_ANT for internal antenna (default) or EXT_ANT for external antenna). If you register only one wifi credential, you should obtain something like this: #define networks 1 #if (networks > 0) char* mySSID[networks] = { \"MyWifiSSID\" }; char* myPassword[networks] = { \"MyPassword\" }; char* wifiEncript[networks] = { WPA2 }; char* antennaExt[networks] = { INT_ANT }; #endif Note that if you configure more than one Wi-fi network you have to separate the variables with a comma, for example: char* mySSID[networks] = { \"MyFirstSSID\", \"MySecondSSID\" };","title":"Editing the code"},{"location":"Components/legacy/#uploading-the-code","text":"On the Arduino IDE Tools menu you should select the right Board in the Boards menu: For SmartSmart Citizen Kit version 1.0 select Arduino Leonardo (ATmega 32U4 at 16Mhz) For SmartSmart Citizen Kit version 1.1 select Arduino LilyPad USB (ATmega 32U4 at 8Mhz) The Arduino IDE should automatically select the right USB port but you can check it in the Tools >> Port menu. Now you just need to click the Upload button and Arduino will do the rest for you! In case you have any issue please check the Arduino Troubleshooting guide.","title":"Uploading the code"},{"location":"Components/legacy/#registering-the-kit-in-the-platform_1","text":"After you\u2019ve uploaded your settings, don\u2019t forget to register your kit in our database by saving it\u2019s mac address. To find the mac address, you can use the serial command \u201cget mac\u201d by following the section The Serial Way . Or have a look at the wifi module on the board and read the serial number under the bar code (something like \u201c131G0006662116E4\u201d on kit v1.0 or \u201c0006662116E4\u201d on kit v.1.1). The mac address is the last 12 digit of this serial, separated by a colon every two number. From a number like 0006662116E4 you would write 00:06:66:21:16:E4 . In both cases, you have to fill the mac address input field in the configuration page of your kit and press the save button. You are now done with the manual configuration of your SCK. Wait for a few minutes to see your data coming on the server and being displayed on the web page. You can also check that everything is ok by looking the output of your kit via the Arduino serial monitor. If you encounter any issue, please share your problem on the forum","title":"Registering the kit in the platform"},{"location":"Components/legacy/#attaching-the-solar-panel","text":"The solar panel should fulfill the specification of a voltage bigger than 8v and less than 15v, 12v is the recommended voltage, and a minimum of 500mA. In order to attach the solar panel you have to solder the cables of the solar panel to the pads marked in the next image for version 1.0 of the SCK. For version 1.1 you have to connect the cables to the connector marked in the next image. In both versions, yo have to attach the plus of solar panel to the plus pad of the SCK, and the minus of the solar panel to the minus pad of the SCK.","title":"Attaching the solar panel"},{"location":"Components/legacy/Command%20Line/","text":"SCK Command Line \u00b6 The Smart Smart Citizen Kit can be managed over a basic serial protocol. You just need the Arduino IDE Serial Monitor or any other Serial Utility like Screen in order to use it. How to use it Connect to your kit using any serial utility, any baud-rate should work but 115200 is recommendable. Send the starting commands. Notice all the commands except the starting command($$$) require a carriage return at the end: CR or \\r. If you are using the Arduino IDE is enough if you change to \u201cCarriage return\u201d option (drop-down menu at the bottom-right of the monitor window). Call any command you want, change XXX with the corresponding value, filling any space with the dollar ($) character. SCK Wifly commands \u00b6 $$$ (Wake up the module and activate the Wi-Fi) set wlan ssid XXX (Add a new SSID to memory9) set wlan phrase XXX (Add a new phrase to memory) set wlan key XXX (Add a new key to memory) set wlan auth XXX (Add an authentication method into memory) set wlan ext_antenna XXX (Add an antenna type into memory) exit (Go back to normal operational mode) If you want to know more about wifly commands look at the WiFly Command Reference SCK commands \u00b6 ### (Wake up the module and enter SCK commands mode) get mac (Get the MAC address of the kit) get time update (Retrieve the sensor update interval) set time update XXX (Update the sensor update interval, 10-3600 sec ) get number updates (Retrieve the max number of bulk updates) set number updates XXX (Update the max number of bulk updates, 1-20 updates ) get apikey (Retrieve the kit APIKEY) set apikey XXX (Update the kit APIKEY) get wlan ssid (Retrieve the SSID saved on the kit) get wlan phrase (Retrieve the phrase and KEY saved on the kit) get wlan auth (Retrieve the authentication method saved on the kit) get wlan ext_antenna (Retrieve the antenna type saved on the kit) clear nets (Remove all saved Wi-Fi configuration information) clear memory (Reset to defaults all configuration information) get all (Retrieve all settings saved on the kit in a single line: |version|MAC|ssid,phrase,auth,ext_antenna|hardcodedNets|timeUpdate|numUpdate| ) data (Retrieves sensor readings stored in memory) exit (Goes back to normal operational mode)","title":"Command Line"},{"location":"Components/legacy/Command%20Line/#sck-command-line","text":"The Smart Smart Citizen Kit can be managed over a basic serial protocol. You just need the Arduino IDE Serial Monitor or any other Serial Utility like Screen in order to use it. How to use it Connect to your kit using any serial utility, any baud-rate should work but 115200 is recommendable. Send the starting commands. Notice all the commands except the starting command($$$) require a carriage return at the end: CR or \\r. If you are using the Arduino IDE is enough if you change to \u201cCarriage return\u201d option (drop-down menu at the bottom-right of the monitor window). Call any command you want, change XXX with the corresponding value, filling any space with the dollar ($) character.","title":"SCK Command Line"},{"location":"Components/legacy/Command%20Line/#sck-wifly-commands","text":"$$$ (Wake up the module and activate the Wi-Fi) set wlan ssid XXX (Add a new SSID to memory9) set wlan phrase XXX (Add a new phrase to memory) set wlan key XXX (Add a new key to memory) set wlan auth XXX (Add an authentication method into memory) set wlan ext_antenna XXX (Add an antenna type into memory) exit (Go back to normal operational mode) If you want to know more about wifly commands look at the WiFly Command Reference","title":"SCK Wifly commands"},{"location":"Components/legacy/Command%20Line/#sck-commands","text":"### (Wake up the module and enter SCK commands mode) get mac (Get the MAC address of the kit) get time update (Retrieve the sensor update interval) set time update XXX (Update the sensor update interval, 10-3600 sec ) get number updates (Retrieve the max number of bulk updates) set number updates XXX (Update the max number of bulk updates, 1-20 updates ) get apikey (Retrieve the kit APIKEY) set apikey XXX (Update the kit APIKEY) get wlan ssid (Retrieve the SSID saved on the kit) get wlan phrase (Retrieve the phrase and KEY saved on the kit) get wlan auth (Retrieve the authentication method saved on the kit) get wlan ext_antenna (Retrieve the antenna type saved on the kit) clear nets (Remove all saved Wi-Fi configuration information) clear memory (Reset to defaults all configuration information) get all (Retrieve all settings saved on the kit in a single line: |version|MAC|ssid,phrase,auth,ext_antenna|hardcodedNets|timeUpdate|numUpdate| ) data (Retrieves sensor readings stored in memory) exit (Goes back to normal operational mode)","title":"SCK commands"},{"location":"Components/legacy/Faq/","text":"FAQ \u00b6 How do I register again my SCK? \u00b6 It is really important to understand a SCK can be just registered one time to one device in the platform. Imagine how confusing it will be a single physical device publishing as two separate kits on the platform in two different locations! That's why you will need to unlink your SCK before you can register it again as another kit or when you would like to give your device to someone else to use it. Go to your Kits profile page select the kit you will like to unlink and go to Setup . You don't need to connect your SCK, just scroll down, remove the Mad Address number from the field and click Save . This way your kit will keep all the data on the platform but you will be able to register your SCK again as another kit. You can alway register again your SCK on the same device by following the standard setup process. Is my home wireless internet going to work with the SCK? \u00b6 The Smart Smart Citizen Kit is designed to work with most home and office standard Wi-Fi routers and access points. However we do not support network names or passwords longer than 19 characters or with a $ character. We also do not support WPA Enterprise networks or Captive portal log in as the ones on some big companies and airports. We suggest you contact your IT support team, they can enable you special access in the network based on your device Mac Address . How to use the SD Card? \u00b6 microSD : We recommend formatting micro SD cards using the official SD tool you can download here . RTC : Place a CR1220 cell battery on your kit. Before uploading the SD firmware use the on-line configuration tool at smartcitizen.me to set your Wi-Fi credentials. Turn your kit off and on for a minute, the blue led's will blink and your kit will connect to the internet and sync its the internal clock with our remote servers. Once the time is set the cell battery will keep SCK time in sync for more than 4 years. You can now install the SD firmware using the Arduino IDE . Dependencies: In order to compile and upload the firmware you will need to install the SdFat library for Arduino. Download the library here and install the library following the instructions . Boards: For SmartSmart Citizen Kit version 1.0 select Tools/Boards/Arduino Leonardo on the Arduino IDE (ATmega 32U4 at 16Mhz) For SmartSmart Citizen Kit version 1.1 select Tools/Boards/Lylipad Arduino USB on the Arduino IDE (ATmega 32U4 at 8Mhz) SD data format When using the SD firmware on the SCK, data is stored as CSV ( comma separated ) file on the SD card. This is an example of the output file once opened on a spreadsheet application: Temperature Humidity Light Battery Solar Panel CO NO2 Noise UTC 2821.20 4072.00 4413.10 96.40 0.00 94.67 0.65 5.23 2000-01-01 00:00:02 2784.40 4236.80 5936.70 96.10 0.00 278.27 1.05 2.39 2000-01-01 00:00:02 Data Conversions The data stored is automatically converted to the proper units in firmware. If you prefer to do the conversions manually set DataRaw false in the Constants.h file and apply the formulas on the following table: ID Sensor Units Conversion Formula 0 Temperature \u00baC T = -53 + 175.72 / 65536.0 * ( Traw * 10 ) 1 Humidity %Rel H = 7 + 125.0 / 65536.0 * ( Hraw * 10 ) 2 Light Lux L = Lraw / 10 3 Battery % Not required 4 Panel mV Not required 5 CO kOhm Not required 6 NO2 kOhm Not required 7 Noise dB Apply the conversion table from mV to dB: CSV 8 Date DD:MM:YY Not required 9 Time hh ss Not required How to import the SD card data? \u00b6 Sorry, this is temporary disabled! We are working on a new release. You can import the recorded data in to smartcitizen.me In your device page you will find the Import SD along with the Edit and Configure options. Using a microSD card reader get the post.csv file from your card, select it and click import. Data will be imported in to your device, data existing on the file already imported will be skipped. Your kit should be running the latest SD firmware and the SCK time (RTC) should be set in order data can be imported. Is my kit publishing data properly? \u00b6 Sorry, this is temporary disabled! We are working on a new release. You can easily check each time your kit is publishing data to our platform in real time by enabling the debug mode on your device. Go to your device edit page in smartcitizen.me , set Debug Enabled and save it. Visit data.smartcitizen.me/debug you will see the data from all the devices on debug mode every time they publish in real time. You can identify your device by the device id. **Note data comes uncalibrated.* How to retrieve other kit's data? \u00b6 Current API allows you full access to all the Smart Citizen Platform. Please, ask in the forum or contact support@smartcitizen.me for any questions regarding the API. How to store data in your own database? \u00b6 Kit's request The Smart Smart Citizen Kit is publishing by default the data as a PUT Http request, the sensor data is encoded as JSON. Here you can see how a kit's request will look like (Note the request is not standard as it do not contains a payload) : PUT /add HTTP/1.1 Host: data.smartcitizen.me User-Agent: SmartCitizen X-SmartCitizenMacADDR: 00:00:00:00:00:00 X-SmartCitizenVersion: 1.1-0.8.5-A X-SmartCitizenData: [{\"temp\":\"29090.6\", \"hum\":\"6815.74\", \"light\":\"30000\", \"bat\":\"786\", \"panel\":\"0\", \"co\":\"112500\", \"no2\":\"200000\", \"noise\":\"2\", \"nets\":\"10\", \"timestamp\":\"2013-10-28 1:34:26\"}] Here you have a kit's request as a Curl for test purposes: $ curl -X PUT -H 'Host: data.smartcitizen.me' -H 'User-Agent: SmartCitizen' -H 'X-SmartCitizenMacADDR: 00:00:00:00:00:00' -H 'X-SmartCitizenVersion: 1.1-0.8.5-A' -H 'X-SmartCitizenData: [{\"temp\":\"29090.6\", \"hum\":\"6815.74\", \"light\":\"30000\", \"bat\":\"786\", \"panel\":\"0\", \"co\":\"112500\", \"no2\":\"200000\", \"noise\":\"2\", \"nets\":\"10\", \"timestamp\":\"2013-10-28 1:34:26\"}]' data.smartcitizen.me/add Data processing Values are send without the proper scaling and some sensors as temperature, humidity and noise are sent in raw and then calibrated in our platform. This are the conversion required for SCK 1.1 and above. Key Sensor Units Conversion formula Conversion Method temp Temperature \u00baC T = -53 + 175.72 / 65536.0 * Traw SCKSensorData::tempConversion($rawTemp) hum Humidity %Rel H = 7 + 125.0 / 65536.0 * Hraw SCKSensorData::humConversion($rawHum) light Light Lux L = Lraw / 10 SCKSensorData::lightConversion($rawLight) noise Noise dB Apply the conversion table from mV to dB: CSV SCKSensorData::noiseConversion($rawNoise) co CO kOhm CO = COraw / 10000 SCKSensorData::coConversion($rawCO) no2 NO2 kOhm NO2 = NO2raw / 10000 SCKSensorData::no2Conversion($rawNO2) bat Battery % B = Braw / 10 SCKSensorData::batConversion($rawBat) panel Panel mV P = Praw / 10000 SCKSensorData::panelConversion($rawPanel) nets Nets Wi-Fi Networks Not required Not required timestamp Timestamp YYYY-MM-DD hh ss Not required Not required You can use the SCKSensorData php class to re-scale and calibrate the received data. Check it on github . Here is an example how to use it to receive a request, converted and store it in a CSV file: <?php include('../sck_sensor_data.php'); $headers = getallheaders(); $data = $headers['X-SmartCitizenData']; $datapoints = json_decode($data, true); foreach ($datapoints as $datapoint) { $datapoint = SCKSensorData::SCK11Convert($datapoint); $csv .= implode(', ', $datapoint); } $csv .= PHP_EOL; file_put_contents('./data.csv', $csv, FILE_APPEND); ?> You can find the complete example here . Each sensor is implemented as a separate function and some general methods are available for simplifying the work. Here is an example: <?php /** * noiseCalibration * * Noise calibration for SCK1.1 sound sensor. Converts mV in to dBs. * Based on a linear regression from a lookup table (db.json) * obtained after real measurements from our test facility. * * * @param float $rawSound * @return float noise as sound pressure in dB * */ public function noiseCalibration($rawSound) { $dbTable = json_decode(file_get_contents(\"db.json\"), true); return round(self::tableCalibration($dbTable, $rawSound), 2); } ?> How to proceed Here are the different paths you can take in order to built your own backend: Create a fork of the the Smart Smart Citizen Kit firmware in order to send the data as your custom backend expect it. Create your own custom backend. We can share all the different modules of our backend in order for you to receive data as on the curl example above, calibrate it and store it. Contact us at support@smartcitizen.me . Keep using our backend but request our API developer.smartcitizen.me and then fill database choosen with it. How to install the drivers on Windows? \u00b6 In Windows you will need to install the Arduino Drivers if you haven't done it before. Windows 8, 7, Vista, and XP \u00b6 Go to the Arduino download page and download the latest version of the Arduino software for Windows. When the download is finished, un-zip it and open up the Arduino folder to confirm that yes, there are indeed some files and sub-folders inside. The file structure is important so don\u2019t be moving any files around unless you really know what you\u2019re doing. Power up your Smart Smart Citizen Kit by connecting it to your computer with a USB cable. You should see the green LED near the on/off switch light up. If you\u2019re running Windows 8, you\u2019ll need to disable driver signing, so go see the Windows 8 section. If you\u2019re running Windows 7, Vista, or XP, you\u2019ll need to install some drivers, so head to the Windows 7, Vista, and XP section down below. Windows 8 \u00b6 Windows 8 comes with a nice little security \u2018feature\u2019 that \u2018protects\u2019 you from unsigned driver installation. The Smart Smart Citizen Kit driver is not signed so you\u2019ll have to tell Windows to disable driver signing. This issue has been addressed in newer releases of the Arduino IDE, but if you run into issues, you can try this fix first. For a nice, step-by-step tutorial with pictures click here , otherwise the steps are outlined below. To temporarily disable driver signing: From the Metro Start Screen, open Settings (move your mouse to the bottom-right-corner of the screen and wait for the pop-out bar to appear, then click the Gear icon) Click \u2018More PC Settings\u2019 Click \u2018General\u2019 Scroll down, and click \u2018Restart now\u2019 under \u2018Advanced startup\u2019. Wait a bit. Click \u2018Troubleshoot\u2019. Click \u2018Advanced Options\u2019 Click \u2018Windows Startup Settings\u2019 Click Restart. When your computer restarts, select \u2018Disable driver signature enforcement\u2018 from the list. To permanently disable driver signing (recommended, but has some minor security implications): Go to the metro start screen Type in \u201ccmd\u201d Right click \u201cCommand Prompt\u201d and select \u201cRun as Administrator\u201d from the buttons on the bottom of your screen Type/paste in the following commands: bcdedit -set loadoptions DISABLE_INTEGRITY_CHECKS bcdedit -set TESTSIGNING ON Reboot! Windows 7, Vista, and XP \u00b6 Installing the Drivers for the Arduino Uno (from Arduino.cc) Plug in your board and wait for Windows to begin it\u2019s driver installation process After a few moments, the process will fail, despite its best efforts Click on the Start Menu, and open up the Control Panel While in the Control Panel, navigate to System and Security. Next, click on System Once the System window is up, open the Device Manager Look under Ports (COM & LPT). You should see an open port named \u201cArduino UNO (COMxx)\u201d. If there is no COM & LPT section, look under \u2018Other Devices\u2019 for \u2018Unknown Device\u2019 Right click on the \u201cArduino UNO (COMxx)\u201d or \u201cUnknown Device\u201d port and choose the \u201cUpdate Driver Software\u201d option Next, choose the \u201cBrowse my computer for Driver software\u201d option Finally, navigate to and select the Uno\u2019s driver file, named \u201cArduinoUNO.inf\u201d, located in the \u201cDrivers\u201d folder of the Arduino Software download (not the \u201cFTDI USB Drivers\u201d sub-directory). If you cannot see the .inf file, it is probably just hidden. You can select the \u2018drivers\u2019 folder with the \u2018search sub-folders\u2019 option selected instead. Windows will finish up the driver installation from there This documentation is proudly based on Sparkfun Arduino on Windows tutorial - CC BY-NC-SA 3.0. Which LiPo batteries to use? \u00b6 The battery that we are providing is 3.7v and 2000mAh Which solar panels to use? \u00b6 The solar panel it should fulfill the specification of a voltage bigger than 8v and less than 15v, 12v is the recommended voltage, and a minimum of 500mA. How I can extend the Wi-Fi range? \u00b6 Is your SCK quite far away from Wi-Fi access point? You can use an external antenna with your SCK. The Wi-Fi modules has a U.FL antenna connector. We recommend you to use a U.FL to RP-SMA adaptor in order to use standard Wi-Fi antennas . You then will need to enable the External Antenna on the Wi-Fi setup process by selecting External Antenna . What is the spec (battery type) for the button-cell for the RTC? \u00b6 The RTC battery is a CR1220 Why is 50dB the microphone lowest value? \u00b6 Because the actual sensor is limited by the curve bounding from 50dB to 103dB Browsers compatibility \u00b6 The SmartCitizen platform is built using the latest Web technologies (such as HTML5, SVG and CSS3). These languages serve as a foundation for today\u2019s websites and web applications. To enjoy Smart Citizen, we recommend you to use: Google Chrome 25+ Firefox Mozilla 20+ For the kit setup process only Google Chrome is supported. What are the LEDs for, and what does the LED blinking mean? \u00b6 There are 5 LEDs, they are all on the base half of the SCK. They can be understood in three groups: LED2 and LED1 - These are the two yellow (or orange) LEDs in the lower center-left of the board. You will only see these lit when your USB cable is connected to the SCK and you are configuring or otherwise interacting with the SCK. LED2 is the \"RX USB\" and will be lit when the SCK is receiving information via the USB connection. LED1 is the \"TX USB\" and will be lit when the SCK is sending information via the USB connection. LED4 and LED3 - These are the two blue LEDs in the lower center of the board. You will see these blink often. LED3 is the \"WiFi Association\" and LED4 is the \"WiFi Connection.\" The blue LEDs will blink each time the SCK posts new data wirelessly. This is normal behavior and is expected, but it only happens in bursts (then there will be no blue LED lit for about 30-40 seconds). If your blue LEDs are blinking back and forth non-stop, this means your SCK has lost its WiFi connection. Check to make sure your router is still on, and that you're still in range of it. LED5 - This is the green LED in the upper left corner. It will be lit when the SCK is turned on and has power.","title":"FAQ"},{"location":"Components/legacy/Faq/#faq","text":"","title":"FAQ"},{"location":"Components/legacy/Faq/#how-do-i-register-again-my-sck","text":"It is really important to understand a SCK can be just registered one time to one device in the platform. Imagine how confusing it will be a single physical device publishing as two separate kits on the platform in two different locations! That's why you will need to unlink your SCK before you can register it again as another kit or when you would like to give your device to someone else to use it. Go to your Kits profile page select the kit you will like to unlink and go to Setup . You don't need to connect your SCK, just scroll down, remove the Mad Address number from the field and click Save . This way your kit will keep all the data on the platform but you will be able to register your SCK again as another kit. You can alway register again your SCK on the same device by following the standard setup process.","title":"How do I register again my SCK?"},{"location":"Components/legacy/Faq/#is-my-home-wireless-internet-going-to-work-with-the-sck","text":"The Smart Smart Citizen Kit is designed to work with most home and office standard Wi-Fi routers and access points. However we do not support network names or passwords longer than 19 characters or with a $ character. We also do not support WPA Enterprise networks or Captive portal log in as the ones on some big companies and airports. We suggest you contact your IT support team, they can enable you special access in the network based on your device Mac Address .","title":"Is my home wireless internet going to work with the SCK?"},{"location":"Components/legacy/Faq/#how-to-use-the-sd-card","text":"microSD : We recommend formatting micro SD cards using the official SD tool you can download here . RTC : Place a CR1220 cell battery on your kit. Before uploading the SD firmware use the on-line configuration tool at smartcitizen.me to set your Wi-Fi credentials. Turn your kit off and on for a minute, the blue led's will blink and your kit will connect to the internet and sync its the internal clock with our remote servers. Once the time is set the cell battery will keep SCK time in sync for more than 4 years. You can now install the SD firmware using the Arduino IDE . Dependencies: In order to compile and upload the firmware you will need to install the SdFat library for Arduino. Download the library here and install the library following the instructions . Boards: For SmartSmart Citizen Kit version 1.0 select Tools/Boards/Arduino Leonardo on the Arduino IDE (ATmega 32U4 at 16Mhz) For SmartSmart Citizen Kit version 1.1 select Tools/Boards/Lylipad Arduino USB on the Arduino IDE (ATmega 32U4 at 8Mhz) SD data format When using the SD firmware on the SCK, data is stored as CSV ( comma separated ) file on the SD card. This is an example of the output file once opened on a spreadsheet application: Temperature Humidity Light Battery Solar Panel CO NO2 Noise UTC 2821.20 4072.00 4413.10 96.40 0.00 94.67 0.65 5.23 2000-01-01 00:00:02 2784.40 4236.80 5936.70 96.10 0.00 278.27 1.05 2.39 2000-01-01 00:00:02 Data Conversions The data stored is automatically converted to the proper units in firmware. If you prefer to do the conversions manually set DataRaw false in the Constants.h file and apply the formulas on the following table: ID Sensor Units Conversion Formula 0 Temperature \u00baC T = -53 + 175.72 / 65536.0 * ( Traw * 10 ) 1 Humidity %Rel H = 7 + 125.0 / 65536.0 * ( Hraw * 10 ) 2 Light Lux L = Lraw / 10 3 Battery % Not required 4 Panel mV Not required 5 CO kOhm Not required 6 NO2 kOhm Not required 7 Noise dB Apply the conversion table from mV to dB: CSV 8 Date DD:MM:YY Not required 9 Time hh ss Not required","title":"How to use the SD Card?"},{"location":"Components/legacy/Faq/#how-to-import-the-sd-card-data","text":"Sorry, this is temporary disabled! We are working on a new release. You can import the recorded data in to smartcitizen.me In your device page you will find the Import SD along with the Edit and Configure options. Using a microSD card reader get the post.csv file from your card, select it and click import. Data will be imported in to your device, data existing on the file already imported will be skipped. Your kit should be running the latest SD firmware and the SCK time (RTC) should be set in order data can be imported.","title":"How to import the SD card data?"},{"location":"Components/legacy/Faq/#is-my-kit-publishing-data-properly","text":"Sorry, this is temporary disabled! We are working on a new release. You can easily check each time your kit is publishing data to our platform in real time by enabling the debug mode on your device. Go to your device edit page in smartcitizen.me , set Debug Enabled and save it. Visit data.smartcitizen.me/debug you will see the data from all the devices on debug mode every time they publish in real time. You can identify your device by the device id. **Note data comes uncalibrated.*","title":"Is my kit publishing data properly?"},{"location":"Components/legacy/Faq/#how-to-retrieve-other-kits-data","text":"Current API allows you full access to all the Smart Citizen Platform. Please, ask in the forum or contact support@smartcitizen.me for any questions regarding the API.","title":"How to retrieve other kit's data?"},{"location":"Components/legacy/Faq/#how-to-store-data-in-your-own-database","text":"Kit's request The Smart Smart Citizen Kit is publishing by default the data as a PUT Http request, the sensor data is encoded as JSON. Here you can see how a kit's request will look like (Note the request is not standard as it do not contains a payload) : PUT /add HTTP/1.1 Host: data.smartcitizen.me User-Agent: SmartCitizen X-SmartCitizenMacADDR: 00:00:00:00:00:00 X-SmartCitizenVersion: 1.1-0.8.5-A X-SmartCitizenData: [{\"temp\":\"29090.6\", \"hum\":\"6815.74\", \"light\":\"30000\", \"bat\":\"786\", \"panel\":\"0\", \"co\":\"112500\", \"no2\":\"200000\", \"noise\":\"2\", \"nets\":\"10\", \"timestamp\":\"2013-10-28 1:34:26\"}] Here you have a kit's request as a Curl for test purposes: $ curl -X PUT -H 'Host: data.smartcitizen.me' -H 'User-Agent: SmartCitizen' -H 'X-SmartCitizenMacADDR: 00:00:00:00:00:00' -H 'X-SmartCitizenVersion: 1.1-0.8.5-A' -H 'X-SmartCitizenData: [{\"temp\":\"29090.6\", \"hum\":\"6815.74\", \"light\":\"30000\", \"bat\":\"786\", \"panel\":\"0\", \"co\":\"112500\", \"no2\":\"200000\", \"noise\":\"2\", \"nets\":\"10\", \"timestamp\":\"2013-10-28 1:34:26\"}]' data.smartcitizen.me/add Data processing Values are send without the proper scaling and some sensors as temperature, humidity and noise are sent in raw and then calibrated in our platform. This are the conversion required for SCK 1.1 and above. Key Sensor Units Conversion formula Conversion Method temp Temperature \u00baC T = -53 + 175.72 / 65536.0 * Traw SCKSensorData::tempConversion($rawTemp) hum Humidity %Rel H = 7 + 125.0 / 65536.0 * Hraw SCKSensorData::humConversion($rawHum) light Light Lux L = Lraw / 10 SCKSensorData::lightConversion($rawLight) noise Noise dB Apply the conversion table from mV to dB: CSV SCKSensorData::noiseConversion($rawNoise) co CO kOhm CO = COraw / 10000 SCKSensorData::coConversion($rawCO) no2 NO2 kOhm NO2 = NO2raw / 10000 SCKSensorData::no2Conversion($rawNO2) bat Battery % B = Braw / 10 SCKSensorData::batConversion($rawBat) panel Panel mV P = Praw / 10000 SCKSensorData::panelConversion($rawPanel) nets Nets Wi-Fi Networks Not required Not required timestamp Timestamp YYYY-MM-DD hh ss Not required Not required You can use the SCKSensorData php class to re-scale and calibrate the received data. Check it on github . Here is an example how to use it to receive a request, converted and store it in a CSV file: <?php include('../sck_sensor_data.php'); $headers = getallheaders(); $data = $headers['X-SmartCitizenData']; $datapoints = json_decode($data, true); foreach ($datapoints as $datapoint) { $datapoint = SCKSensorData::SCK11Convert($datapoint); $csv .= implode(', ', $datapoint); } $csv .= PHP_EOL; file_put_contents('./data.csv', $csv, FILE_APPEND); ?> You can find the complete example here . Each sensor is implemented as a separate function and some general methods are available for simplifying the work. Here is an example: <?php /** * noiseCalibration * * Noise calibration for SCK1.1 sound sensor. Converts mV in to dBs. * Based on a linear regression from a lookup table (db.json) * obtained after real measurements from our test facility. * * * @param float $rawSound * @return float noise as sound pressure in dB * */ public function noiseCalibration($rawSound) { $dbTable = json_decode(file_get_contents(\"db.json\"), true); return round(self::tableCalibration($dbTable, $rawSound), 2); } ?> How to proceed Here are the different paths you can take in order to built your own backend: Create a fork of the the Smart Smart Citizen Kit firmware in order to send the data as your custom backend expect it. Create your own custom backend. We can share all the different modules of our backend in order for you to receive data as on the curl example above, calibrate it and store it. Contact us at support@smartcitizen.me . Keep using our backend but request our API developer.smartcitizen.me and then fill database choosen with it.","title":"How to store data in your own database?"},{"location":"Components/legacy/Faq/#how-to-install-the-drivers-on-windows","text":"In Windows you will need to install the Arduino Drivers if you haven't done it before.","title":"How to install the drivers on Windows?"},{"location":"Components/legacy/Faq/#windows-8-7-vista-and-xp","text":"Go to the Arduino download page and download the latest version of the Arduino software for Windows. When the download is finished, un-zip it and open up the Arduino folder to confirm that yes, there are indeed some files and sub-folders inside. The file structure is important so don\u2019t be moving any files around unless you really know what you\u2019re doing. Power up your Smart Smart Citizen Kit by connecting it to your computer with a USB cable. You should see the green LED near the on/off switch light up. If you\u2019re running Windows 8, you\u2019ll need to disable driver signing, so go see the Windows 8 section. If you\u2019re running Windows 7, Vista, or XP, you\u2019ll need to install some drivers, so head to the Windows 7, Vista, and XP section down below.","title":"Windows 8, 7, Vista, and XP"},{"location":"Components/legacy/Faq/#windows-8","text":"Windows 8 comes with a nice little security \u2018feature\u2019 that \u2018protects\u2019 you from unsigned driver installation. The Smart Smart Citizen Kit driver is not signed so you\u2019ll have to tell Windows to disable driver signing. This issue has been addressed in newer releases of the Arduino IDE, but if you run into issues, you can try this fix first. For a nice, step-by-step tutorial with pictures click here , otherwise the steps are outlined below. To temporarily disable driver signing: From the Metro Start Screen, open Settings (move your mouse to the bottom-right-corner of the screen and wait for the pop-out bar to appear, then click the Gear icon) Click \u2018More PC Settings\u2019 Click \u2018General\u2019 Scroll down, and click \u2018Restart now\u2019 under \u2018Advanced startup\u2019. Wait a bit. Click \u2018Troubleshoot\u2019. Click \u2018Advanced Options\u2019 Click \u2018Windows Startup Settings\u2019 Click Restart. When your computer restarts, select \u2018Disable driver signature enforcement\u2018 from the list. To permanently disable driver signing (recommended, but has some minor security implications): Go to the metro start screen Type in \u201ccmd\u201d Right click \u201cCommand Prompt\u201d and select \u201cRun as Administrator\u201d from the buttons on the bottom of your screen Type/paste in the following commands: bcdedit -set loadoptions DISABLE_INTEGRITY_CHECKS bcdedit -set TESTSIGNING ON Reboot!","title":"Windows 8"},{"location":"Components/legacy/Faq/#windows-7-vista-and-xp","text":"Installing the Drivers for the Arduino Uno (from Arduino.cc) Plug in your board and wait for Windows to begin it\u2019s driver installation process After a few moments, the process will fail, despite its best efforts Click on the Start Menu, and open up the Control Panel While in the Control Panel, navigate to System and Security. Next, click on System Once the System window is up, open the Device Manager Look under Ports (COM & LPT). You should see an open port named \u201cArduino UNO (COMxx)\u201d. If there is no COM & LPT section, look under \u2018Other Devices\u2019 for \u2018Unknown Device\u2019 Right click on the \u201cArduino UNO (COMxx)\u201d or \u201cUnknown Device\u201d port and choose the \u201cUpdate Driver Software\u201d option Next, choose the \u201cBrowse my computer for Driver software\u201d option Finally, navigate to and select the Uno\u2019s driver file, named \u201cArduinoUNO.inf\u201d, located in the \u201cDrivers\u201d folder of the Arduino Software download (not the \u201cFTDI USB Drivers\u201d sub-directory). If you cannot see the .inf file, it is probably just hidden. You can select the \u2018drivers\u2019 folder with the \u2018search sub-folders\u2019 option selected instead. Windows will finish up the driver installation from there This documentation is proudly based on Sparkfun Arduino on Windows tutorial - CC BY-NC-SA 3.0.","title":"Windows 7, Vista, and XP"},{"location":"Components/legacy/Faq/#which-lipo-batteries-to-use","text":"The battery that we are providing is 3.7v and 2000mAh","title":"Which LiPo batteries to use?"},{"location":"Components/legacy/Faq/#which-solar-panels-to-use","text":"The solar panel it should fulfill the specification of a voltage bigger than 8v and less than 15v, 12v is the recommended voltage, and a minimum of 500mA.","title":"Which solar panels to use?"},{"location":"Components/legacy/Faq/#how-i-can-extend-the-wi-fi-range","text":"Is your SCK quite far away from Wi-Fi access point? You can use an external antenna with your SCK. The Wi-Fi modules has a U.FL antenna connector. We recommend you to use a U.FL to RP-SMA adaptor in order to use standard Wi-Fi antennas . You then will need to enable the External Antenna on the Wi-Fi setup process by selecting External Antenna .","title":"How I can extend the Wi-Fi range?"},{"location":"Components/legacy/Faq/#what-is-the-spec-battery-type-for-the-button-cell-for-the-rtc","text":"The RTC battery is a CR1220","title":"What is the spec (battery type) for the button-cell for the RTC?"},{"location":"Components/legacy/Faq/#why-is-50db-the-microphone-lowest-value","text":"Because the actual sensor is limited by the curve bounding from 50dB to 103dB","title":"Why is 50dB the microphone lowest value?"},{"location":"Components/legacy/Faq/#browsers-compatibility","text":"The SmartCitizen platform is built using the latest Web technologies (such as HTML5, SVG and CSS3). These languages serve as a foundation for today\u2019s websites and web applications. To enjoy Smart Citizen, we recommend you to use: Google Chrome 25+ Firefox Mozilla 20+ For the kit setup process only Google Chrome is supported.","title":"Browsers compatibility"},{"location":"Components/legacy/Faq/#what-are-the-leds-for-and-what-does-the-led-blinking-mean","text":"There are 5 LEDs, they are all on the base half of the SCK. They can be understood in three groups: LED2 and LED1 - These are the two yellow (or orange) LEDs in the lower center-left of the board. You will only see these lit when your USB cable is connected to the SCK and you are configuring or otherwise interacting with the SCK. LED2 is the \"RX USB\" and will be lit when the SCK is receiving information via the USB connection. LED1 is the \"TX USB\" and will be lit when the SCK is sending information via the USB connection. LED4 and LED3 - These are the two blue LEDs in the lower center of the board. You will see these blink often. LED3 is the \"WiFi Association\" and LED4 is the \"WiFi Connection.\" The blue LEDs will blink each time the SCK posts new data wirelessly. This is normal behavior and is expected, but it only happens in bursts (then there will be no blue LED lit for about 30-40 seconds). If your blue LEDs are blinking back and forth non-stop, this means your SCK has lost its WiFi connection. Check to make sure your router is still on, and that you're still in range of it. LED5 - This is the green LED in the upper left corner. It will be lit when the SCK is turned on and has power.","title":"What are the LEDs for, and what does the LED blinking mean?"},{"location":"Components/legacy/Hardware/","text":"Hardware \u00b6 Inside the SCK \u00b6 Main Board \u00b6 The main board contains the basic functionality like sensor I/O to read de sensor values, communication with the platform through the wifi module, manage the power and battery charging. PINOUT \u00b6 The SCK Main Board connects to the Sensor Board 16 pin connector. This is how the pins are laid out on the board. The numbers in brackets are the actual pin numbers of the micro controller. Pins IO are digital and S are analogue. GND GND IO3 (10) IO2 (9) IO1 (13) IO0 (5) SCL SDA S5 (A1) S4 (A0) S3 (A3) S2 (A2) S1 (A5) S0 (A4) VBAT VBAT CPU \u00b6 Both versions of the SCK (1.0 and 1.1) are using the same CPU, ATMEGA32U4 (Arduino Leonardo). With the difference that the 1.0 works at 5V and 16MHZ and the 1.1 works at 3.3V and 8MHZ. In the 1.1 version we\u2019ve improved the power consumption. This CPU has native USB and an UART TTL port allowing us to connect directly with the WIFI module. ATMEGA32U4 datasheet USB CONNECTOR \u00b6 The 1.0 version uses a Mini USB connector and 1.1 version uses a Micro USB. WIFI MODULE \u00b6 The RN-131 module is a standalone, embedded wireless 802.11 b/g networking module. With its small form factor and extremely low power consumption, the RN-131 fits perfectly for the SCK wireless communication requirements. Main features: Qualified 2.4-GHz IEEE 802.11b/g transceiver Ultra-low power: 4 uA sleep, 40 mA Rx, 210 mA Tx High throughput, 1 Mbps sustained data rate with TCP/IP and WPA2 Small, compact surface-mount module On-board ceramic chip antenna and U.FL connector for external antenna 8-Mbit flash memory and 128-KB RAM UART hardware interface 10 general-purpose digital I/O pins 8 analog sensor interfaces Real-time clock for wakeup and time stamping Accepts 3.3-V regulated or 2 to 3 V battery Supports ad hoc and infrastructure networking modes On board ECOS -OS, TCP/IP stacks Wi-Fi Alliance certified for WPA2-PSK FCC/CE/ICS certified and RoHS compliant. Industrial (RN-131G) and commercial (RN-131C) grade temperature options WIFLY module - RN-131 datasheet BATTERY POWERING \u00b6 For powering the SCK, in both versions, we are using a 3.7v 2000 mAh li-on battery. SCK version 1.0 uses two different voltages, 3.3V and 5V to power the IC\u2019s. To get 5V from 3.3v we are using a step-up based on NCP1400, thus having a stable voltage at 5v and 100mA. On the other hand, to regulate the voltage and to obtain 3.3v, the SCK uses the IC MAX604. NCP1400 datasheet MAX604 datasheet In 1.1 version, to make things simpler, the voltage of entire SCK was unified to 3.3V. The responsible to regulate the voltage from 3.7v to 3.3v is the MCP1725 IC. MCP1725 datasheet BATTERY CHARGING \u00b6 For charging the battery there are two ways, USB or solar panel. To carry out the charging we are using MCP73831 IC. For charging the battery in 1.0 version the solar panel have to be 12v and 500mA. In 1.1 version, the solar panel can be more versatile in terms of amperage. MCP73831 datasheet SOLAR PANEL CHARGING \u00b6 Depending on the sunlight conditions the solar panel produces up to 12v, we have to reduce the voltage to 5v to feed up the Vin of the MCP73831 charger IC. To carry out this task we are using the LM2674 IC, a very efficient IC, with a rate of 91% of performance. LM2674 datasheet RTC (REAL TIME CLOCK) \u00b6 The SCK has a real time clock for keeping track of time when the kit is offline. For this task we chose the DS1307 IC for the 1.0 version and the DS1339Y-3+ IC for the 1.1 version. Different IC due to the different voltages, 5V for the 1.0 version and 3.3V for the 1.1 version. DS1307 datasheet DS1339Y-3+ datasheet SD CARD READER \u00b6 The SD card is used to store the data captured by the sensors when the kit is offline. When the kit gets connected, the data will be reeded from the SD card and uploaded to the platform. To hold the SD card we are using the DM3CS holder. The SD card is powered at 3.3V and communicates with the CPU through SPI protocol. DM3CS datasheet EEPROM MEMORY \u00b6 For the users that don\u2019t have a SD card we\u2019ve added an EEPROM memory to store the data when the SCK is offline. We chose the 24LC256 IC that can store 32kBytes, it communicates with the CPU through I2C protocol. 24LC256 datasheet MAIN BOARD BASIC SENSORS \u00b6 The main board has some basic sensors: Measurement of the battery level Measurement of the solar panel level Measurement of the wireless networks detected SENSOR BOARD \u00b6 The sensor board contains the necessary sensors for measuring all the other parameters. This means NO2 and CO gases, sunlight, noise pollution, temperature, humidity. Also, the sensor board has an I2C bus, this allows to expand the SCK to other kind of sensors. NO2 AND CO SENSORS \u00b6 To measure these two gases we chose e2v sensors. In particular, metal oxide sensors MICS5525 and MICS2710, for version 1.0. And MICS4514, for version 1.1, that contains both sensors in one. Metal oxide sensors are based on oxide semiconductors. Their electrical conductivity is modulated due to the reaction between the semiconductor and the gases in the atmosphere. MICS5525 datasheet MICS2710 datasheet MICS4514 datasheet LIGHT SENSOR \u00b6 The light sensor is a basic element to know the light pollution. In version 1.0, was used a LDR (light-dependent resistor) whose voltage varies depending on the light conditions. For version 1.1, was used a photodiode BH1730FVC. This sensor contains an I2C bus that gives us directly the amount of lux of ambient and infrared light. BH1730FVC datasheet NOISE SENSOR \u00b6 The noise sensor is based on an electret microphone. For the version 1.0 WM-61A was used as the microphone, the captured audio signal is passed through an operational amplifier configured as band pass filter. For the version 1.1 POM-3044P-R was used. WM-61A datasheet POM-3044P-R datasheet TEMPERATURE AND HUMIDITY SENSOR \u00b6 To measure temperature and humidity a module that integrates both sensors was used. For version 1.0 the RHT22 was used, it has one wire digital interface. For version 1.1 the SHT21 was used, it has I2C protocol and faster response between measures than the RHT22. RHT22 datasheet SHT21 datasheet 3 AXIS ACCELEROMETER \u00b6 In version 1.0 we detected that some measures vary depending on the orientation of the SCK. That's why in version 1.1 we added the ADXL345 accelerometer to detect the position and to compensate the measures depending on the orientation of the SCK. This accelerometer communicates via I2C protocol with the kit. ADXL345 datasheet I2C EXPANSION BUS \u00b6 Due to the ease of the I2C protocol. We\u2019ve included and I2C bus to provide to the community the opportunity of expanding the SCK. Detailed specifications \u00b6 Smart Smart Citizen Kit SCK 1.0 (Goteo Board) SCK 1.1 (Kickstarter Board) SCK 1.5 (Upcoming!) Data Board MCU ATMEGA32U4 ATMEGA32U4 SAMD21 Clock 16Mhz 8Mhz 32Mhz WiFi Microchip RN-131 802.11 b/g Microchip RN-131 802.11 b/g Espressif ESP8266-12E Firmware Repository Repository Repository Design files v1.01 v1.1 v1.5 Ambient Board Light PVD-P8001 BH1730FVC BH1730FVC Type LDR Analog Light Sensor Digital Ambient Light Sensor Digital Ambient Light Sensor Units % Lux Lux Datasheet PDV-P8001.pdf BH-1730FCV.pdf BH-1730FCV.pdf Performance 0.008 - 65535 lx (\u00b1 15%) ** 0.008 - 65535 lx (\u00b1 15%) ** Firmware SCKAmbient::getLight(); SCKAmbient::getLight(): Under development Temp DHT22 HPP828E031 (SHT21) SHT21 Type Digital Temperature and Relative Humidity Sensor Digital Temperature and Relative Humidity Sensor Digital Temperature and Relative Humidity Sensor Units \u00baC \u00baC \u00baC Datasheet DHT22.pdf HTU-21D.pdf SHT-21.pdf Firmware SCKAmbient::getDHT22(); SCKAmbient::getHumidity(); SCKAmbient::getSHT21(); SCKAmbient::getTemperature(); Under development Performance Linearity R\u00b2>0.94 * Under tests Humidity DHT22 HPP828E031 (SHT21) SHT21 Type Digital Temperature and Relative Humidity Sensor Digital Temperature and Relative Humidity Sensor Digital Temperature and Relative Humidity Sensor Units % Rel % Rel % Rel Datasheet DHT22.pdf HTU-21D.pdf SHT21.pdf Firmware SCKAmbient::getDHT22(); SCKAmbient::getHumidity(); SCKAmbient::getSHT21(); SCKAmbient::getHumidity(); Under development Performance Linearity R\u00b2>0.97 * Under tests NO\u00b2ise POM-3044P-R POM-3044P-R SPU0414HR5H Type Electret microphone with envelop follower sound pressure sensor Electret microphone with envelop follower sound pressure sensor New MEMS microphone with envelop follower sound pressure sensor Units dB dB dB Datasheet POM-3044P-R.pdf POM-3044P-R.pdf SPU0414HR5H.pdf Firmware SCKAmbient::getNO\u00b2ise(); SCKAmbient::getNO\u00b2ise(); Under development *Performance Range 50dB - 110dB (\u00b1 15%) ** Under tests CO MICS-5525 MiCS-4514 MiCS-4514 Type MOS CO gas sensor MOS CO and NO\u00b2 gas sensor MOS CO and NO\u00b2 gas sensor Units kOhm (ppm) kOhm (ppm) kOhm (ppm) Datasheet MICS-5525_CO.pdf MiCS-4514_CO_NO2.pdf MiCS-4514_CO_NO2.pdf Firmware SCKAmbient::getMICS(); SCKAmbient::getMICS(); Under development Performance Linearity 0.45 < R\u00b2 < 0.82 * Under tests NO\u00b22 MICS-2710 MiCS-4514 MiCS-4514 Type MOS NO\u00b2 gas sensor MOS CO and NO\u00b2 gas sensor MOS CO and NO\u00b2 gas sensor Units kOhm (ppm) kOhm (ppm) kOhm (ppm) Datasheet MICS-2710_NO2.pdf MiCS-4514_CO_NO2.pdf MiCS-4514_CO_NO2.pdf Firmware SCKAmbient::getMICS(); SCKAmbient::getMICS(); Under development Performance Linearity R\u00b2<0.0 * Under tests ** * ** South Coast AQMD The correlation coefficient (R\u00b2) is a statistical parameter indicating how well the performance of each sensor compares to that of a Federal Reference or Federal Equivalent Method (FRM and FEM, respectively) instrument. An R\u00b2 approaching the value of 1 reflects a near perfect agreement, whereas a value of 0 indicates a complete lack of correlation ** * ** Internal Smart Citizen Team WIP Evaluation Tests Enclosures \u00b6 We have designed a laser cut cover for an acrylic material and a 3D-Printed enclosure to better safeguard the hardware, particularly for outdoor applications. You can download the files through this links. Smart Citizen Enclosure 1.0 Smart Citizen Enclosure 1.1 Also, we are working in new cases that will be available soon. Smart Citizen Enclosure Assembly Instructions Acrylic cases \u00b6 This case has been designed to protect the electronics on the circuit boards and allows for mount the SCK's hardware on walls and other surfaces without much trouble. Particularly for indoor applications. Acrylic cases","title":"Hardware"},{"location":"Components/legacy/Hardware/#hardware","text":"","title":"Hardware"},{"location":"Components/legacy/Hardware/#inside-the-sck","text":"","title":"Inside the SCK"},{"location":"Components/legacy/Hardware/#main-board","text":"The main board contains the basic functionality like sensor I/O to read de sensor values, communication with the platform through the wifi module, manage the power and battery charging.","title":"Main Board"},{"location":"Components/legacy/Hardware/#pinout","text":"The SCK Main Board connects to the Sensor Board 16 pin connector. This is how the pins are laid out on the board. The numbers in brackets are the actual pin numbers of the micro controller. Pins IO are digital and S are analogue. GND GND IO3 (10) IO2 (9) IO1 (13) IO0 (5) SCL SDA S5 (A1) S4 (A0) S3 (A3) S2 (A2) S1 (A5) S0 (A4) VBAT VBAT","title":"PINOUT"},{"location":"Components/legacy/Hardware/#cpu","text":"Both versions of the SCK (1.0 and 1.1) are using the same CPU, ATMEGA32U4 (Arduino Leonardo). With the difference that the 1.0 works at 5V and 16MHZ and the 1.1 works at 3.3V and 8MHZ. In the 1.1 version we\u2019ve improved the power consumption. This CPU has native USB and an UART TTL port allowing us to connect directly with the WIFI module. ATMEGA32U4 datasheet","title":"CPU"},{"location":"Components/legacy/Hardware/#usb-connector","text":"The 1.0 version uses a Mini USB connector and 1.1 version uses a Micro USB.","title":"USB CONNECTOR"},{"location":"Components/legacy/Hardware/#wifi-module","text":"The RN-131 module is a standalone, embedded wireless 802.11 b/g networking module. With its small form factor and extremely low power consumption, the RN-131 fits perfectly for the SCK wireless communication requirements. Main features: Qualified 2.4-GHz IEEE 802.11b/g transceiver Ultra-low power: 4 uA sleep, 40 mA Rx, 210 mA Tx High throughput, 1 Mbps sustained data rate with TCP/IP and WPA2 Small, compact surface-mount module On-board ceramic chip antenna and U.FL connector for external antenna 8-Mbit flash memory and 128-KB RAM UART hardware interface 10 general-purpose digital I/O pins 8 analog sensor interfaces Real-time clock for wakeup and time stamping Accepts 3.3-V regulated or 2 to 3 V battery Supports ad hoc and infrastructure networking modes On board ECOS -OS, TCP/IP stacks Wi-Fi Alliance certified for WPA2-PSK FCC/CE/ICS certified and RoHS compliant. Industrial (RN-131G) and commercial (RN-131C) grade temperature options WIFLY module - RN-131 datasheet","title":"WIFI MODULE"},{"location":"Components/legacy/Hardware/#battery-powering","text":"For powering the SCK, in both versions, we are using a 3.7v 2000 mAh li-on battery. SCK version 1.0 uses two different voltages, 3.3V and 5V to power the IC\u2019s. To get 5V from 3.3v we are using a step-up based on NCP1400, thus having a stable voltage at 5v and 100mA. On the other hand, to regulate the voltage and to obtain 3.3v, the SCK uses the IC MAX604. NCP1400 datasheet MAX604 datasheet In 1.1 version, to make things simpler, the voltage of entire SCK was unified to 3.3V. The responsible to regulate the voltage from 3.7v to 3.3v is the MCP1725 IC. MCP1725 datasheet","title":"BATTERY POWERING"},{"location":"Components/legacy/Hardware/#battery-charging","text":"For charging the battery there are two ways, USB or solar panel. To carry out the charging we are using MCP73831 IC. For charging the battery in 1.0 version the solar panel have to be 12v and 500mA. In 1.1 version, the solar panel can be more versatile in terms of amperage. MCP73831 datasheet","title":"BATTERY CHARGING"},{"location":"Components/legacy/Hardware/#solar-panel-charging","text":"Depending on the sunlight conditions the solar panel produces up to 12v, we have to reduce the voltage to 5v to feed up the Vin of the MCP73831 charger IC. To carry out this task we are using the LM2674 IC, a very efficient IC, with a rate of 91% of performance. LM2674 datasheet","title":"SOLAR PANEL CHARGING"},{"location":"Components/legacy/Hardware/#rtc-real-time-clock","text":"The SCK has a real time clock for keeping track of time when the kit is offline. For this task we chose the DS1307 IC for the 1.0 version and the DS1339Y-3+ IC for the 1.1 version. Different IC due to the different voltages, 5V for the 1.0 version and 3.3V for the 1.1 version. DS1307 datasheet DS1339Y-3+ datasheet","title":"RTC (REAL TIME CLOCK)"},{"location":"Components/legacy/Hardware/#sd-card-reader","text":"The SD card is used to store the data captured by the sensors when the kit is offline. When the kit gets connected, the data will be reeded from the SD card and uploaded to the platform. To hold the SD card we are using the DM3CS holder. The SD card is powered at 3.3V and communicates with the CPU through SPI protocol. DM3CS datasheet","title":"SD CARD READER"},{"location":"Components/legacy/Hardware/#eeprom-memory","text":"For the users that don\u2019t have a SD card we\u2019ve added an EEPROM memory to store the data when the SCK is offline. We chose the 24LC256 IC that can store 32kBytes, it communicates with the CPU through I2C protocol. 24LC256 datasheet","title":"EEPROM MEMORY"},{"location":"Components/legacy/Hardware/#main-board-basic-sensors","text":"The main board has some basic sensors: Measurement of the battery level Measurement of the solar panel level Measurement of the wireless networks detected","title":"MAIN BOARD BASIC SENSORS"},{"location":"Components/legacy/Hardware/#sensor-board","text":"The sensor board contains the necessary sensors for measuring all the other parameters. This means NO2 and CO gases, sunlight, noise pollution, temperature, humidity. Also, the sensor board has an I2C bus, this allows to expand the SCK to other kind of sensors.","title":"SENSOR BOARD"},{"location":"Components/legacy/Hardware/#no2-and-co-sensors","text":"To measure these two gases we chose e2v sensors. In particular, metal oxide sensors MICS5525 and MICS2710, for version 1.0. And MICS4514, for version 1.1, that contains both sensors in one. Metal oxide sensors are based on oxide semiconductors. Their electrical conductivity is modulated due to the reaction between the semiconductor and the gases in the atmosphere. MICS5525 datasheet MICS2710 datasheet MICS4514 datasheet","title":"NO2 AND CO SENSORS"},{"location":"Components/legacy/Hardware/#light-sensor","text":"The light sensor is a basic element to know the light pollution. In version 1.0, was used a LDR (light-dependent resistor) whose voltage varies depending on the light conditions. For version 1.1, was used a photodiode BH1730FVC. This sensor contains an I2C bus that gives us directly the amount of lux of ambient and infrared light. BH1730FVC datasheet","title":"LIGHT SENSOR"},{"location":"Components/legacy/Hardware/#noise-sensor","text":"The noise sensor is based on an electret microphone. For the version 1.0 WM-61A was used as the microphone, the captured audio signal is passed through an operational amplifier configured as band pass filter. For the version 1.1 POM-3044P-R was used. WM-61A datasheet POM-3044P-R datasheet","title":"NOISE SENSOR"},{"location":"Components/legacy/Hardware/#temperature-and-humidity-sensor","text":"To measure temperature and humidity a module that integrates both sensors was used. For version 1.0 the RHT22 was used, it has one wire digital interface. For version 1.1 the SHT21 was used, it has I2C protocol and faster response between measures than the RHT22. RHT22 datasheet SHT21 datasheet","title":"TEMPERATURE AND HUMIDITY SENSOR"},{"location":"Components/legacy/Hardware/#3-axis-accelerometer","text":"In version 1.0 we detected that some measures vary depending on the orientation of the SCK. That's why in version 1.1 we added the ADXL345 accelerometer to detect the position and to compensate the measures depending on the orientation of the SCK. This accelerometer communicates via I2C protocol with the kit. ADXL345 datasheet","title":"3 AXIS ACCELEROMETER"},{"location":"Components/legacy/Hardware/#i2c-expansion-bus","text":"Due to the ease of the I2C protocol. We\u2019ve included and I2C bus to provide to the community the opportunity of expanding the SCK.","title":"I2C EXPANSION BUS"},{"location":"Components/legacy/Hardware/#detailed-specifications","text":"Smart Smart Citizen Kit SCK 1.0 (Goteo Board) SCK 1.1 (Kickstarter Board) SCK 1.5 (Upcoming!) Data Board MCU ATMEGA32U4 ATMEGA32U4 SAMD21 Clock 16Mhz 8Mhz 32Mhz WiFi Microchip RN-131 802.11 b/g Microchip RN-131 802.11 b/g Espressif ESP8266-12E Firmware Repository Repository Repository Design files v1.01 v1.1 v1.5 Ambient Board Light PVD-P8001 BH1730FVC BH1730FVC Type LDR Analog Light Sensor Digital Ambient Light Sensor Digital Ambient Light Sensor Units % Lux Lux Datasheet PDV-P8001.pdf BH-1730FCV.pdf BH-1730FCV.pdf Performance 0.008 - 65535 lx (\u00b1 15%) ** 0.008 - 65535 lx (\u00b1 15%) ** Firmware SCKAmbient::getLight(); SCKAmbient::getLight(): Under development Temp DHT22 HPP828E031 (SHT21) SHT21 Type Digital Temperature and Relative Humidity Sensor Digital Temperature and Relative Humidity Sensor Digital Temperature and Relative Humidity Sensor Units \u00baC \u00baC \u00baC Datasheet DHT22.pdf HTU-21D.pdf SHT-21.pdf Firmware SCKAmbient::getDHT22(); SCKAmbient::getHumidity(); SCKAmbient::getSHT21(); SCKAmbient::getTemperature(); Under development Performance Linearity R\u00b2>0.94 * Under tests Humidity DHT22 HPP828E031 (SHT21) SHT21 Type Digital Temperature and Relative Humidity Sensor Digital Temperature and Relative Humidity Sensor Digital Temperature and Relative Humidity Sensor Units % Rel % Rel % Rel Datasheet DHT22.pdf HTU-21D.pdf SHT21.pdf Firmware SCKAmbient::getDHT22(); SCKAmbient::getHumidity(); SCKAmbient::getSHT21(); SCKAmbient::getHumidity(); Under development Performance Linearity R\u00b2>0.97 * Under tests NO\u00b2ise POM-3044P-R POM-3044P-R SPU0414HR5H Type Electret microphone with envelop follower sound pressure sensor Electret microphone with envelop follower sound pressure sensor New MEMS microphone with envelop follower sound pressure sensor Units dB dB dB Datasheet POM-3044P-R.pdf POM-3044P-R.pdf SPU0414HR5H.pdf Firmware SCKAmbient::getNO\u00b2ise(); SCKAmbient::getNO\u00b2ise(); Under development *Performance Range 50dB - 110dB (\u00b1 15%) ** Under tests CO MICS-5525 MiCS-4514 MiCS-4514 Type MOS CO gas sensor MOS CO and NO\u00b2 gas sensor MOS CO and NO\u00b2 gas sensor Units kOhm (ppm) kOhm (ppm) kOhm (ppm) Datasheet MICS-5525_CO.pdf MiCS-4514_CO_NO2.pdf MiCS-4514_CO_NO2.pdf Firmware SCKAmbient::getMICS(); SCKAmbient::getMICS(); Under development Performance Linearity 0.45 < R\u00b2 < 0.82 * Under tests NO\u00b22 MICS-2710 MiCS-4514 MiCS-4514 Type MOS NO\u00b2 gas sensor MOS CO and NO\u00b2 gas sensor MOS CO and NO\u00b2 gas sensor Units kOhm (ppm) kOhm (ppm) kOhm (ppm) Datasheet MICS-2710_NO2.pdf MiCS-4514_CO_NO2.pdf MiCS-4514_CO_NO2.pdf Firmware SCKAmbient::getMICS(); SCKAmbient::getMICS(); Under development Performance Linearity R\u00b2<0.0 * Under tests ** * ** South Coast AQMD The correlation coefficient (R\u00b2) is a statistical parameter indicating how well the performance of each sensor compares to that of a Federal Reference or Federal Equivalent Method (FRM and FEM, respectively) instrument. An R\u00b2 approaching the value of 1 reflects a near perfect agreement, whereas a value of 0 indicates a complete lack of correlation ** * ** Internal Smart Citizen Team WIP Evaluation Tests","title":"Detailed specifications"},{"location":"Components/legacy/Hardware/#enclosures","text":"We have designed a laser cut cover for an acrylic material and a 3D-Printed enclosure to better safeguard the hardware, particularly for outdoor applications. You can download the files through this links. Smart Citizen Enclosure 1.0 Smart Citizen Enclosure 1.1 Also, we are working in new cases that will be available soon. Smart Citizen Enclosure Assembly Instructions","title":"Enclosures"},{"location":"Components/legacy/Hardware/#acrylic-cases","text":"This case has been designed to protect the electronics on the circuit boards and allows for mount the SCK's hardware on walls and other surfaces without much trouble. Particularly for indoor applications. Acrylic cases","title":"Acrylic cases"},{"location":"Components/legacy/Troubleshooting/","text":"Troubleshooting \u00b6 Add an SSID with two words \u00b6 If your SSID has more than one word you have to fill any spaces with the dollar ($) character. Serial port already in use \u00b6 This happens when one application is already using the serial port. For example, if you have the Arduino IDE serial monitor opened and you're trying to configure your SCK through the web browser. You have yo close the serial monitor first. No port available \u00b6 This message will appear when you have uploaded the wrong firmware version to your SCK. Unable to connect to the Board \u00b6 This happens when one application is already using the serial port. For example, if you have the Arduino IDE serial monitor opened and you're trying to configure your SCK through the web browser. You have yo close the serial monitor first. Unable to connect to the Internet \u00b6 If you're getting the message \"Error in connection\" when you run the SCK firmware this may be due: Your router works with a protocol different than 802.11AG You have set wrong SSID name and/or password Your network has an encryption different than OPEN, WEP, WPA1, WPA2 OR WEP64 Your firewall is blocking the mac address of your SCK Your internet connection is not stable No data received yet \u00b6 This message appears the first time you register your kit, is due to cache issues. This issue normally is fixed after a few hours, in any case we are working to improve this issue. Port is not appearing on the drop down \u00b6 This may be due: The SCK is turned off. The USB cable you're using has wired only power cable and not the data cables. The bootloader is corrupted. Firmware update problem \u00b6 If you're having problems updating the firmware you can try one of these two options: Update the latest firmware through the web browser configurator. Update the latest firmware through Arduino IDE. If you're still having problems it's may be due to a hardware or software issue, contact us at support@smartcitizen.me . No MAC address registered \u00b6 If you're getting this message, the may be due: Configuration process is not finished correctly. The WIFI module of your SCK is corrupted, so MAC address is not accessible. To repair your wifi module refer to this tutorial . Collapsed USB port \u00b6 First batches of SCK version 1.1 came with this issue. We have a tutorial you can follow to repair it or contact us at support@smartcitizen.me . Broken LiPo battery wire \u00b6 Depending on the conditions, the battery wires can suffer until its break. We encourage you to read this Battery Common Care Techniques in order to preserve your battery. Non-Stop Blue LED Blinking \u00b6 If your blue LEDs are blinking back and forth non-stop, this means your SCK has lost its WiFi connection. Check to make sure your router is still on, and that you're still in range. Reinstall the bootloader using another Arduino \u00b6 In this tutorial we are going to show you how turn an Arduino into AVR ISP to burn the bootloader to your SCK. The bootloader is a small piece of code running inside your Smart Smart Citizen Kit allowing it to be programmed and configured over USB. If suddenly you do not see anymore the USB / Serial port when connecting your Kit to a Computer maybe your bootloader crashed and it is time to reinstall it. Parts: \u00b6 Arduino Board 6 Patch Cables Male Female Software: \u00b6 Arduino IDE Instructions: \u00b6 Open the ArduinoISP sketch example in menu File > Examples > ArduinoISP . Select the correct board and ports in the menu Tools > Board > Port and Tools > Board > Port that correspond to the board you are using as the programmer (e.g., Arduino UNO). Upload the ArduinoISP sketch. Wire your Arduino board to the SCK as shown in the diagram below using the Patch cables. Take care the ISCP VCC goes to the 3.3V Pin on the Arduino UNO since the Smart Smart Citizen Kit works at 3.3V Select the board in the Tools > Board menu For SmartSmart Citizen Kit version 1.0 select Arduino Leonardo (ATmega 32U4 at 16Mhz) For SmartSmart Citizen Kit version 1.1 select Arduino LilyPad USB (ATmega 32U4 at 8Mhz) Select in Tools > Programmer > Arduino as ISP . Select in Tools > Burn Bootloader . This step can take some minutes. Done! Please, go back to the on-line setup page in order to install the firmware again. We know this is not an easy task! For any question contact support@smartcitizen.me or ask for help in the forum . Reinstall the bootloader using the AVRISP MKII \u00b6 In this tutorial we are going to show you how to program the SCK with the Atmel AVRISP MKII In-System Programmer. This is not a common tool you might have but we suggest you ask your closest Fab Lab . The bootloader is a small piece of code running inside your Smart Smart Citizen Kit allowing it to be programmed and configured over USB. If suddenly you do not see anymore the USB / Serial port when connecting your Kit to a Computer maybe your bootloader crashed and it is time to reinstall it. Parts: \u00b6 AVRISP mkII Software: \u00b6 Arduino IDE Instructions: \u00b6 Connect the AVRISP mkII with the USB cable to the computer. Connect your Smart Smart Citizen Kit to the computer with the micro-USB cable. Connect the six pins bus cable of the AVRISP mkII to the ISP connector of the SCK Board as shown the picture. Switch on your Smart Smart Citizen Kit, you'll find out a tiny switch in one side. Select the board in the Tools > Board menu For SmartSmart Citizen Kit version 1.0 select Arduino Leonardo (ATmega 32U4 at 16Mhz) For SmartSmart Citizen Kit version 1.1 select Arduino LilyPad USB (ATmega 32U4 at 8Mhz) Select in Tools > Programmer > AVRISP MKII . Select in Tools > Burn Bootloader . This step can take some minutes, the led AVRISP mkII will blink and after go green. Done! Please, go back to the on-line setup page in order to install the firmware again. We know this is not an easy task! For any question contact support@smartcitizen.me or ask for help in the forum .","title":"Troubleshooting"},{"location":"Components/legacy/Troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"Components/legacy/Troubleshooting/#add-an-ssid-with-two-words","text":"If your SSID has more than one word you have to fill any spaces with the dollar ($) character.","title":"Add an SSID with two words"},{"location":"Components/legacy/Troubleshooting/#serial-port-already-in-use","text":"This happens when one application is already using the serial port. For example, if you have the Arduino IDE serial monitor opened and you're trying to configure your SCK through the web browser. You have yo close the serial monitor first.","title":"Serial port already in use"},{"location":"Components/legacy/Troubleshooting/#no-port-available","text":"This message will appear when you have uploaded the wrong firmware version to your SCK.","title":"No port available"},{"location":"Components/legacy/Troubleshooting/#unable-to-connect-to-the-board","text":"This happens when one application is already using the serial port. For example, if you have the Arduino IDE serial monitor opened and you're trying to configure your SCK through the web browser. You have yo close the serial monitor first.","title":"Unable to connect to the Board"},{"location":"Components/legacy/Troubleshooting/#unable-to-connect-to-the-internet","text":"If you're getting the message \"Error in connection\" when you run the SCK firmware this may be due: Your router works with a protocol different than 802.11AG You have set wrong SSID name and/or password Your network has an encryption different than OPEN, WEP, WPA1, WPA2 OR WEP64 Your firewall is blocking the mac address of your SCK Your internet connection is not stable","title":"Unable to connect to the Internet"},{"location":"Components/legacy/Troubleshooting/#no-data-received-yet","text":"This message appears the first time you register your kit, is due to cache issues. This issue normally is fixed after a few hours, in any case we are working to improve this issue.","title":"No data received yet"},{"location":"Components/legacy/Troubleshooting/#port-is-not-appearing-on-the-drop-down","text":"This may be due: The SCK is turned off. The USB cable you're using has wired only power cable and not the data cables. The bootloader is corrupted.","title":"Port is not appearing on the drop down"},{"location":"Components/legacy/Troubleshooting/#firmware-update-problem","text":"If you're having problems updating the firmware you can try one of these two options: Update the latest firmware through the web browser configurator. Update the latest firmware through Arduino IDE. If you're still having problems it's may be due to a hardware or software issue, contact us at support@smartcitizen.me .","title":"Firmware update problem"},{"location":"Components/legacy/Troubleshooting/#no-mac-address-registered","text":"If you're getting this message, the may be due: Configuration process is not finished correctly. The WIFI module of your SCK is corrupted, so MAC address is not accessible. To repair your wifi module refer to this tutorial .","title":"No MAC address registered"},{"location":"Components/legacy/Troubleshooting/#collapsed-usb-port","text":"First batches of SCK version 1.1 came with this issue. We have a tutorial you can follow to repair it or contact us at support@smartcitizen.me .","title":"Collapsed USB port"},{"location":"Components/legacy/Troubleshooting/#broken-lipo-battery-wire","text":"Depending on the conditions, the battery wires can suffer until its break. We encourage you to read this Battery Common Care Techniques in order to preserve your battery.","title":"Broken LiPo battery wire"},{"location":"Components/legacy/Troubleshooting/#non-stop-blue-led-blinking","text":"If your blue LEDs are blinking back and forth non-stop, this means your SCK has lost its WiFi connection. Check to make sure your router is still on, and that you're still in range.","title":"Non-Stop Blue LED Blinking"},{"location":"Components/legacy/Troubleshooting/#reinstall-the-bootloader-using-another-arduino","text":"In this tutorial we are going to show you how turn an Arduino into AVR ISP to burn the bootloader to your SCK. The bootloader is a small piece of code running inside your Smart Smart Citizen Kit allowing it to be programmed and configured over USB. If suddenly you do not see anymore the USB / Serial port when connecting your Kit to a Computer maybe your bootloader crashed and it is time to reinstall it.","title":"Reinstall the bootloader using another Arduino"},{"location":"Components/legacy/Troubleshooting/#parts","text":"Arduino Board 6 Patch Cables Male Female","title":"Parts:"},{"location":"Components/legacy/Troubleshooting/#software","text":"Arduino IDE","title":"Software:"},{"location":"Components/legacy/Troubleshooting/#instructions","text":"Open the ArduinoISP sketch example in menu File > Examples > ArduinoISP . Select the correct board and ports in the menu Tools > Board > Port and Tools > Board > Port that correspond to the board you are using as the programmer (e.g., Arduino UNO). Upload the ArduinoISP sketch. Wire your Arduino board to the SCK as shown in the diagram below using the Patch cables. Take care the ISCP VCC goes to the 3.3V Pin on the Arduino UNO since the Smart Smart Citizen Kit works at 3.3V Select the board in the Tools > Board menu For SmartSmart Citizen Kit version 1.0 select Arduino Leonardo (ATmega 32U4 at 16Mhz) For SmartSmart Citizen Kit version 1.1 select Arduino LilyPad USB (ATmega 32U4 at 8Mhz) Select in Tools > Programmer > Arduino as ISP . Select in Tools > Burn Bootloader . This step can take some minutes. Done! Please, go back to the on-line setup page in order to install the firmware again. We know this is not an easy task! For any question contact support@smartcitizen.me or ask for help in the forum .","title":"Instructions:"},{"location":"Components/legacy/Troubleshooting/#reinstall-the-bootloader-using-the-avrisp-mkii","text":"In this tutorial we are going to show you how to program the SCK with the Atmel AVRISP MKII In-System Programmer. This is not a common tool you might have but we suggest you ask your closest Fab Lab . The bootloader is a small piece of code running inside your Smart Smart Citizen Kit allowing it to be programmed and configured over USB. If suddenly you do not see anymore the USB / Serial port when connecting your Kit to a Computer maybe your bootloader crashed and it is time to reinstall it.","title":"Reinstall the bootloader using the AVRISP MKII"},{"location":"Components/legacy/Troubleshooting/#parts_1","text":"AVRISP mkII","title":"Parts:"},{"location":"Components/legacy/Troubleshooting/#software_1","text":"Arduino IDE","title":"Software:"},{"location":"Components/legacy/Troubleshooting/#instructions_1","text":"Connect the AVRISP mkII with the USB cable to the computer. Connect your Smart Smart Citizen Kit to the computer with the micro-USB cable. Connect the six pins bus cable of the AVRISP mkII to the ISP connector of the SCK Board as shown the picture. Switch on your Smart Smart Citizen Kit, you'll find out a tiny switch in one side. Select the board in the Tools > Board menu For SmartSmart Citizen Kit version 1.0 select Arduino Leonardo (ATmega 32U4 at 16Mhz) For SmartSmart Citizen Kit version 1.1 select Arduino LilyPad USB (ATmega 32U4 at 8Mhz) Select in Tools > Programmer > AVRISP MKII . Select in Tools > Burn Bootloader . This step can take some minutes, the led AVRISP mkII will blink and after go green. Done! Please, go back to the on-line setup page in order to install the firmware again. We know this is not an easy task! For any question contact support@smartcitizen.me or ask for help in the forum .","title":"Instructions:"},{"location":"Components/legacy/sck/","text":"Smart Citizen Kit \u00b6 A note about versions The SCK 2.0 was the development version for the now commercially available SCK 2.1 sponsored thanks to the iSCAPE project under European Community\u2019s H2020 Programme under Grant Agreement No. 689954 Quick links Installation : start.smartcitizen.me Platform: smartcitizen.me Discuss: forum.smartcitizen.me Support: support@smartcitizen.me Measurements \u00b6 All the Smart Citizen Kit new sensors generation measure at least air temperature, relative humidity, noise level, ambient light, barometric pressure and particulate matter (PM). SCK 2.0 \u00b6 The non-commercially available SCK 2.0 components are listed below: Smart Citizen Kit 2.0 with Particle Sensor and battery with two mounting brackets. MicroSD card and microSD adapter to SD. USB cable and a USB charger. The measurements of the SCK2.0 are listed below: Measurement Units Sensors Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light Lux Rohm BH1721FVC Barometric pressure Pa NXP MPL3115A26 Particulate Matter PM 1 / 2.5 / 10 \u00b5g/m3 Planttower PMS 5003 Find out more Except for the sensors, most information about the SCK2.0 is the same as the one for SCK2.1. More information about the metal oxyde sensors can be found here The firmware for the 2.0 is still maintained and can be found in Github","title":"Main"},{"location":"Components/legacy/sck/#smart-citizen-kit","text":"A note about versions The SCK 2.0 was the development version for the now commercially available SCK 2.1 sponsored thanks to the iSCAPE project under European Community\u2019s H2020 Programme under Grant Agreement No. 689954 Quick links Installation : start.smartcitizen.me Platform: smartcitizen.me Discuss: forum.smartcitizen.me Support: support@smartcitizen.me","title":"Smart Citizen Kit"},{"location":"Components/legacy/sck/#measurements","text":"All the Smart Citizen Kit new sensors generation measure at least air temperature, relative humidity, noise level, ambient light, barometric pressure and particulate matter (PM).","title":"Measurements"},{"location":"Components/legacy/sck/#sck-20","text":"The non-commercially available SCK 2.0 components are listed below: Smart Citizen Kit 2.0 with Particle Sensor and battery with two mounting brackets. MicroSD card and microSD adapter to SD. USB cable and a USB charger. The measurements of the SCK2.0 are listed below: Measurement Units Sensors Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light Lux Rohm BH1721FVC Barometric pressure Pa NXP MPL3115A26 Particulate Matter PM 1 / 2.5 / 10 \u00b5g/m3 Planttower PMS 5003 Find out more Except for the sensors, most information about the SCK2.0 is the same as the one for SCK2.1. More information about the metal oxyde sensors can be found here The firmware for the 2.0 is still maintained and can be found in Github","title":"SCK 2.0"},{"location":"Components/sensors/performance/","text":"Sensor performance summary \u00b6 Metal Oxyde Sensors (all versions) \u00b6 The metal oxyde sensors section is so extense, that we decided to dedicate a full section to them. Have a look at it here ! What are normal values? More on the AMS CCS811, eCO2 and TVOC Noise Level Sensor (V2.0 onwards) \u00b6 The noise sensor is based on the INVENSENSE ICS-43432 2 high-performance, low power, digital output, omnidirectional MEMS microphone with a bottom port and I2S interface. The sensors are similar to the one found on some high-end smartphones. It delivers the information directly in a digital format to the MCU where a custom library has been developed to provide noise data in dB scales A, C and Z. The raw FFT is also accessible to support characterization of specific noise frequencies. The sensor has been calibrated specifically for the project on an anechoic chamber using standard microphone calibration procedures. The following characteristics have been considered for the sensor choice High 65 dBA SNR with a \u221226 dB FS Sensitivity Low Sensitivity Tolerance \u00b11 dB Wide Frequency Response from 50Hz to 20kHz High Acoustic Overload Point 116 dB SPL Low Power Info Check the Noise sensor implementation full documentation and the performance evaluation in the ISCAPE 7.8 Deliverable (section 6.1) Sensor integration Relative Humidity and Air Temperature Sensor (V2.0 onwards) \u00b6 Relative Humidity and Air Temperature Sensor are provided by a SENSIRION SHT31 3 module. Sensor upgrade Preliminary tests during the project shown a absolute calibration issues affecting the previously selected sensor, the SENSIRION SHT31. Those we updated the sensor to the newest SHT 31 with a PTFE layer for protection obtaining better results. The following characteristics have been considered for the sensor choice Calibrated, linearized sensor signals in digital, I2C format straight to the MCU where data is provided in degrees Celsius and Relative Humidity. Wide measurement range with high resolution. The relative humidity range of 0-100% RH with a 0.03% resolution and a repeatability of 0.1%, together with a temperature operating range from -40 to +125\u00b0C with a temperature resolution of 0.01 \u00baC and a repeatability of 0.1%. No need for calibration and long-term stability. Low power consumption Commonly found in many commercial weather stations as the Davis Vantage Pro. Sensor integration Ambient Light Sensor (V1.5 onwards) \u00b6 The Ambient Light Sensors is based around the ROHM BH1721FVC 4 which uses an LDR10 combined with an ADC and the corresponding circuit that allows communicating with the device with the I2C protocol. The following characteristics have been considered for the sensor choice: No need of external ADC or linearization circuits uses the well-known I2C protocol Measures ambient light data in a wide range from 1lx to 65528 lx a repeatability of 15% and a resolution of 8 lx. Possibility to adjust by an I2C command the kind of light that it should measure (visible or infrared). Low power consumption. 50Hz/60Hz (electric network frequency) light rejection. Filtering the interference of most artificial light sources. Sensor integration Barometric Pressure (V2.0 onwards) \u00b6 The Barometric Pressure sensor is based around the NXP MPL3115A2 5 is a compact, piezoresistive, absolute pressure sensor with an I2C digital interface. The following characteristics have been considered for the sensor choice: Wide operating range of 20 kPa to 110 kPa. Temperature compensated utilizing an on-chip temperature sensor. No need for an external ADC or linearization circuits. The pressure and temperature data is fed into an internal high-resolution ADC to provide fully compensated and digitized outputs for pressure in Pascals and temperature in \u00b0C using the well-known I2C protocol Barometric pressure is also processed by the MCU as height above mean sea level (AMSL) helping to determine the location of the device. Low power consumption. Sensor integration External PM Sensor (V2.0 onwards) \u00b6 An external connector on the board supports the connection of a Plantower PMS 5003 or PMS 7003 7 . The device is a digital particle concentration sensor that uses the Laser Scattering principle to obtain the number of suspended particles in the air. The sensor can be fully enabled or disabled in software to save energy when not in use. The following characteristics have been considered for the sensor choice: Provides PM1, PM 2.5 and PM10 measurements in ug/m\u00b3 Minimal distinguishable particle diameter of 0.3 um No need for external ADC or linearization circuits. The sensor includes an internal MCU capable of dealing with all the light emitting and sensing processing. All the communication is done using the I2C protocol. A dedicated driver has been designed for this. Ultra Low Cost when compared to other commercial solutions with similar performance Low Power Sensor integration CO2 NDIR Sensor \u00b6 Done with a CO2 NDIR sensor from Sensirion's SCD30 8 . The sensor also features a Sensition SHT31 for T/H measurements and can be connected to the I2C bus via the auxiliary grove port. CO2 measurement range: 0 - 40'000 ppm Accuracy: \u00b1 (30 ppm + 3% MV) - (25 \u00b0C, 400 - 10'000 ppm) Repeatability: 10ppm Temperature stability: 2.5 ppm / \u00b0C (0-50 \u00b0C) Response time (t63): 20s Calibration Make sure to check the sensor calibration guide for this sensor. Source files \u00b6 Download Check the source code SGX MICS 4514 Technical Datasheet https://sgx.cdistore.com/datasheets/sgx/0278_Datasheet%20MiCS-4514%20rev%2017.pdf \u21a9 INVENSENSE 43432 Technical Datasheet https://www.invensense.com/wp-content/uploads/2015/02/ICS-43432-data-sheet-v1.3.pdf \u21a9 SENSIRION SHT31 Technical Datasheet https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/2_Humidity_Sensors/Datasheets/Sensirion_Humidity_Sensors_SHT3x_Datasheet_digital.pdf \u21a9 ROHM BH1730 Technical Datasheet http://rohmfs.rohm.com/en/products/databook/datasheet/ic/sensor/light/bh1721fvc-e.pdf \u21a9 NXP MPL3115A2 Technical Datasheet http://www.nxp.com/docs/en/data-sheet/MPL3115A2.pdf \u21a9 MAXIM 30105 Technical Datasheet https://datasheets.maximintegrated.com/en/ds/MAX30105.pdf \u21a9 PLANTOWER PMS5003 Technical Datasheet https://aqicn.org/air/view/sensor/spec/pms5003.pdf \u21a9 Sensirion SCD30 Technical Datasheet https://files.seeedstudio.com/wiki/Grove-CO2-Temperature-Humidity-Sensor-SCD30/res/Sensirion_CO2_Sensors_SCD30_Datasheet.pdf \u21a9","title":"Performance summary"},{"location":"Components/sensors/performance/#sensor-performance-summary","text":"","title":"Sensor performance summary"},{"location":"Components/sensors/performance/#metal-oxyde-sensors-all-versions","text":"The metal oxyde sensors section is so extense, that we decided to dedicate a full section to them. Have a look at it here ! What are normal values? More on the AMS CCS811, eCO2 and TVOC","title":"Metal Oxyde Sensors (all versions)"},{"location":"Components/sensors/performance/#noise-level-sensor-v20-onwards","text":"The noise sensor is based on the INVENSENSE ICS-43432 2 high-performance, low power, digital output, omnidirectional MEMS microphone with a bottom port and I2S interface. The sensors are similar to the one found on some high-end smartphones. It delivers the information directly in a digital format to the MCU where a custom library has been developed to provide noise data in dB scales A, C and Z. The raw FFT is also accessible to support characterization of specific noise frequencies. The sensor has been calibrated specifically for the project on an anechoic chamber using standard microphone calibration procedures. The following characteristics have been considered for the sensor choice High 65 dBA SNR with a \u221226 dB FS Sensitivity Low Sensitivity Tolerance \u00b11 dB Wide Frequency Response from 50Hz to 20kHz High Acoustic Overload Point 116 dB SPL Low Power Info Check the Noise sensor implementation full documentation and the performance evaluation in the ISCAPE 7.8 Deliverable (section 6.1) Sensor integration","title":"Noise Level Sensor (V2.0 onwards)"},{"location":"Components/sensors/performance/#relative-humidity-and-air-temperature-sensor-v20-onwards","text":"Relative Humidity and Air Temperature Sensor are provided by a SENSIRION SHT31 3 module. Sensor upgrade Preliminary tests during the project shown a absolute calibration issues affecting the previously selected sensor, the SENSIRION SHT31. Those we updated the sensor to the newest SHT 31 with a PTFE layer for protection obtaining better results. The following characteristics have been considered for the sensor choice Calibrated, linearized sensor signals in digital, I2C format straight to the MCU where data is provided in degrees Celsius and Relative Humidity. Wide measurement range with high resolution. The relative humidity range of 0-100% RH with a 0.03% resolution and a repeatability of 0.1%, together with a temperature operating range from -40 to +125\u00b0C with a temperature resolution of 0.01 \u00baC and a repeatability of 0.1%. No need for calibration and long-term stability. Low power consumption Commonly found in many commercial weather stations as the Davis Vantage Pro. Sensor integration","title":"Relative Humidity and Air Temperature Sensor (V2.0 onwards)"},{"location":"Components/sensors/performance/#ambient-light-sensor-v15-onwards","text":"The Ambient Light Sensors is based around the ROHM BH1721FVC 4 which uses an LDR10 combined with an ADC and the corresponding circuit that allows communicating with the device with the I2C protocol. The following characteristics have been considered for the sensor choice: No need of external ADC or linearization circuits uses the well-known I2C protocol Measures ambient light data in a wide range from 1lx to 65528 lx a repeatability of 15% and a resolution of 8 lx. Possibility to adjust by an I2C command the kind of light that it should measure (visible or infrared). Low power consumption. 50Hz/60Hz (electric network frequency) light rejection. Filtering the interference of most artificial light sources. Sensor integration","title":"Ambient Light Sensor (V1.5 onwards)"},{"location":"Components/sensors/performance/#barometric-pressure-v20-onwards","text":"The Barometric Pressure sensor is based around the NXP MPL3115A2 5 is a compact, piezoresistive, absolute pressure sensor with an I2C digital interface. The following characteristics have been considered for the sensor choice: Wide operating range of 20 kPa to 110 kPa. Temperature compensated utilizing an on-chip temperature sensor. No need for an external ADC or linearization circuits. The pressure and temperature data is fed into an internal high-resolution ADC to provide fully compensated and digitized outputs for pressure in Pascals and temperature in \u00b0C using the well-known I2C protocol Barometric pressure is also processed by the MCU as height above mean sea level (AMSL) helping to determine the location of the device. Low power consumption. Sensor integration","title":"Barometric Pressure (V2.0 onwards)"},{"location":"Components/sensors/performance/#external-pm-sensor-v20-onwards","text":"An external connector on the board supports the connection of a Plantower PMS 5003 or PMS 7003 7 . The device is a digital particle concentration sensor that uses the Laser Scattering principle to obtain the number of suspended particles in the air. The sensor can be fully enabled or disabled in software to save energy when not in use. The following characteristics have been considered for the sensor choice: Provides PM1, PM 2.5 and PM10 measurements in ug/m\u00b3 Minimal distinguishable particle diameter of 0.3 um No need for external ADC or linearization circuits. The sensor includes an internal MCU capable of dealing with all the light emitting and sensing processing. All the communication is done using the I2C protocol. A dedicated driver has been designed for this. Ultra Low Cost when compared to other commercial solutions with similar performance Low Power Sensor integration","title":"External PM Sensor (V2.0 onwards)"},{"location":"Components/sensors/performance/#co2-ndir-sensor","text":"Done with a CO2 NDIR sensor from Sensirion's SCD30 8 . The sensor also features a Sensition SHT31 for T/H measurements and can be connected to the I2C bus via the auxiliary grove port. CO2 measurement range: 0 - 40'000 ppm Accuracy: \u00b1 (30 ppm + 3% MV) - (25 \u00b0C, 400 - 10'000 ppm) Repeatability: 10ppm Temperature stability: 2.5 ppm / \u00b0C (0-50 \u00b0C) Response time (t63): 20s Calibration Make sure to check the sensor calibration guide for this sensor.","title":"CO2 NDIR Sensor"},{"location":"Components/sensors/performance/#source-files","text":"Download Check the source code SGX MICS 4514 Technical Datasheet https://sgx.cdistore.com/datasheets/sgx/0278_Datasheet%20MiCS-4514%20rev%2017.pdf \u21a9 INVENSENSE 43432 Technical Datasheet https://www.invensense.com/wp-content/uploads/2015/02/ICS-43432-data-sheet-v1.3.pdf \u21a9 SENSIRION SHT31 Technical Datasheet https://www.sensirion.com/fileadmin/user_upload/customers/sensirion/Dokumente/2_Humidity_Sensors/Datasheets/Sensirion_Humidity_Sensors_SHT3x_Datasheet_digital.pdf \u21a9 ROHM BH1730 Technical Datasheet http://rohmfs.rohm.com/en/products/databook/datasheet/ic/sensor/light/bh1721fvc-e.pdf \u21a9 NXP MPL3115A2 Technical Datasheet http://www.nxp.com/docs/en/data-sheet/MPL3115A2.pdf \u21a9 MAXIM 30105 Technical Datasheet https://datasheets.maximintegrated.com/en/ds/MAX30105.pdf \u21a9 PLANTOWER PMS5003 Technical Datasheet https://aqicn.org/air/view/sensor/spec/pms5003.pdf \u21a9 Sensirion SCD30 Technical Datasheet https://files.seeedstudio.com/wiki/Grove-CO2-Temperature-Humidity-Sensor-SCD30/res/Sensirion_CO2_Sensors_SCD30_Datasheet.pdf \u21a9","title":"Source files"},{"location":"Components/sensors/air/CCS811/","text":"eCO2 and TVOC sensor \u00b6 The AMS CCS811 is a Metal Oxide Sensor with I2C connectivity which is capable of measuring a volatile organic compounds (VOCs for short). This sensor was introduced in the SCK2.1, in replacement of the SGX MICS4514 from previous designs. As mentioned in other parts of the documentation, this decission was mainly due to the lower power consumption of the CCS811 and the easy implementation of reading processing provided by the manufacturer. Does it measure CO2? No. Despite the name, the sensor does not measure CO2. See below for a detailed description of the sensor measurements. Measurements \u00b6 eCO2 and eTVOC are two related measurements. The first stands for equivalent CO2 , and it's an indication of the concentration of CO2 that would cause the same level of radiative forcing as a given type and concentration of greenhouse gas. The eCO2 measurement is therefore a derived measurement from the reactions all these substances in the air with the metal oxide substrate in the sensor. eCO2 bottomline starts at 400ppm (current background CO2, sadly) and can reach several thousands. On the other hand, eTVOC stands for equivalent total volatile organic compounds and is a measurement of the total amount of any emitted gases coming from toxins and chemicals. They come from a wide range of everyday items including paints and varnishes, wax and cosmetics, cleaning and hobby products, and even cooking. When you have an enclosed space like a home or office, these emitted gases accumulate and pollute our fresh air. Global Warming Potential \u00b6 To understand the eCO2 readings , we need to know what is the Global Warming Potential ( GWP for short). GWP is an estimate of how much a given greenhouse gas contributes to Earth\u2019s radiative forcing. We know that CO2 is one of the major contributors to global warming, but there are others (and that are much worse). For example: CO2 has a value of 1 GWP, whereas methane has a GWP of 72 over 20 years, but a lower GWP of 25 over 100 years. This is because it is very potent in the short-term but then breaks down to CO2 and water in the atmosphere, meaning that the longer the period you consider it over, the more similar its effect is to that of CO2 alone. This means that 1ppm of CH4 is much more worrying for the global warming of the planet than 1ppm CO2 in the short term, because it can produce a higher increment of the atmosphere temperature. All this is at the same time interesting and worrying, because many products used for painting, solvents, varnish, refrigeration, and more contain pollutants with high GWP. A very interesting article can be found here . Working principle \u00b6 As any metal oxide sensor, the CCS811 measures the resistance of a sensitive layer, exposed to ambient air. This layer is heated up with a heater element (a resistance) up to several hundred \u00baC, and some oxidation reactions take place on it. The characteristics of the sensitive element vary from sensor to sensor, and with time, depending as well on the exposure to different chemical components and ambient conditions. For this reason an individual sensor charactersition is very tricky , and relative measurements are used, using an internal processing that monitors the baseline resistance of the sensor (i.e., the resistance of the sensitive layer when exposed to clean air). The sensor generally targets pollutants that can get oxidised in the sensor substrate. This oxidation process modifies the resistance of the sensor, and the more oxidation reactions we have the lower the resistance is. The concept of baseline resistance in this sense can be confusing, but basically can be explained as: the higher resistance, the cleaner the environment. Temperature and humidity are used internally to compensate the readings, as the sensor compares it\u2019s actual resistance with the clean air one (baseline), and inputs the ambient conditions in the correction. Sensor considerations \u00b6 Like any sensor, the CCS811 has some limitations. As mentioned above, the sensitive layer will decrease it's resistance when in presence of VOCs , but other pollutants can have the opposite effect on it. For instance, Ozone (O3) will increase the sensor's resistance, and it could be seen as clean air by the sensor. This could explain why in some outdoor environments (generally with traffic and high levels of sun radiation), the sensor can present an unstable behaviour. Additionally, humidity is known to affect the sensor resistance. The internal humidity correction can limit this effect up to a certain extent, but a perfect correction is not possible. We also recommend setting the sensor in a stable environment, in which temperature and relative humidity changes are not abrupt. When moving the sensor to another location, beware that any high resistance could be seen as the new baseline resistance , and this value might not apply to the previous environment, should you put the sensor back into it's original location. Resetting the baseline resistance The sensor keeps track of the baseline resistance even after a factory reset. Currently, there is no method to reset the baseline resistance in the firmware, but it will soonly be introduced. When changing locations, a baseline resistance reset should be performed. Finally, although the sensor is considered to be an indoor sensor, it can be placed outdoor , but keeping in mind, that the environment will be very different and that the sensor might behave in unexpected ways. Sources Have a read to the Datasheet or some other ANs here Early-Life (Burn-In) \u00b6 The CCS811 performance in terms of resistance levels and sensitivities will change during early life. The change in resistance is greatest over the first 48 hours of operation, although this process can last up to 5 days. CCS811 controls the burn-in period allowing eCO2 and eTVOC readings to be used from first power-on after 60 minutes of operation. Conditioning Period (Run-In) \u00b6 After early-life (Burn-In) the conditioning or run-in period is the time required to achieve good sensor stability before measuring VOCs after long idle period. The sensor will need to run for 20 minutes, before accurate readings are generated.","title":"eCO2/TVOC"},{"location":"Components/sensors/air/CCS811/#eco2-and-tvoc-sensor","text":"The AMS CCS811 is a Metal Oxide Sensor with I2C connectivity which is capable of measuring a volatile organic compounds (VOCs for short). This sensor was introduced in the SCK2.1, in replacement of the SGX MICS4514 from previous designs. As mentioned in other parts of the documentation, this decission was mainly due to the lower power consumption of the CCS811 and the easy implementation of reading processing provided by the manufacturer. Does it measure CO2? No. Despite the name, the sensor does not measure CO2. See below for a detailed description of the sensor measurements.","title":"eCO2 and TVOC sensor"},{"location":"Components/sensors/air/CCS811/#measurements","text":"eCO2 and eTVOC are two related measurements. The first stands for equivalent CO2 , and it's an indication of the concentration of CO2 that would cause the same level of radiative forcing as a given type and concentration of greenhouse gas. The eCO2 measurement is therefore a derived measurement from the reactions all these substances in the air with the metal oxide substrate in the sensor. eCO2 bottomline starts at 400ppm (current background CO2, sadly) and can reach several thousands. On the other hand, eTVOC stands for equivalent total volatile organic compounds and is a measurement of the total amount of any emitted gases coming from toxins and chemicals. They come from a wide range of everyday items including paints and varnishes, wax and cosmetics, cleaning and hobby products, and even cooking. When you have an enclosed space like a home or office, these emitted gases accumulate and pollute our fresh air.","title":"Measurements"},{"location":"Components/sensors/air/CCS811/#global-warming-potential","text":"To understand the eCO2 readings , we need to know what is the Global Warming Potential ( GWP for short). GWP is an estimate of how much a given greenhouse gas contributes to Earth\u2019s radiative forcing. We know that CO2 is one of the major contributors to global warming, but there are others (and that are much worse). For example: CO2 has a value of 1 GWP, whereas methane has a GWP of 72 over 20 years, but a lower GWP of 25 over 100 years. This is because it is very potent in the short-term but then breaks down to CO2 and water in the atmosphere, meaning that the longer the period you consider it over, the more similar its effect is to that of CO2 alone. This means that 1ppm of CH4 is much more worrying for the global warming of the planet than 1ppm CO2 in the short term, because it can produce a higher increment of the atmosphere temperature. All this is at the same time interesting and worrying, because many products used for painting, solvents, varnish, refrigeration, and more contain pollutants with high GWP. A very interesting article can be found here .","title":"Global Warming Potential"},{"location":"Components/sensors/air/CCS811/#working-principle","text":"As any metal oxide sensor, the CCS811 measures the resistance of a sensitive layer, exposed to ambient air. This layer is heated up with a heater element (a resistance) up to several hundred \u00baC, and some oxidation reactions take place on it. The characteristics of the sensitive element vary from sensor to sensor, and with time, depending as well on the exposure to different chemical components and ambient conditions. For this reason an individual sensor charactersition is very tricky , and relative measurements are used, using an internal processing that monitors the baseline resistance of the sensor (i.e., the resistance of the sensitive layer when exposed to clean air). The sensor generally targets pollutants that can get oxidised in the sensor substrate. This oxidation process modifies the resistance of the sensor, and the more oxidation reactions we have the lower the resistance is. The concept of baseline resistance in this sense can be confusing, but basically can be explained as: the higher resistance, the cleaner the environment. Temperature and humidity are used internally to compensate the readings, as the sensor compares it\u2019s actual resistance with the clean air one (baseline), and inputs the ambient conditions in the correction.","title":"Working principle"},{"location":"Components/sensors/air/CCS811/#sensor-considerations","text":"Like any sensor, the CCS811 has some limitations. As mentioned above, the sensitive layer will decrease it's resistance when in presence of VOCs , but other pollutants can have the opposite effect on it. For instance, Ozone (O3) will increase the sensor's resistance, and it could be seen as clean air by the sensor. This could explain why in some outdoor environments (generally with traffic and high levels of sun radiation), the sensor can present an unstable behaviour. Additionally, humidity is known to affect the sensor resistance. The internal humidity correction can limit this effect up to a certain extent, but a perfect correction is not possible. We also recommend setting the sensor in a stable environment, in which temperature and relative humidity changes are not abrupt. When moving the sensor to another location, beware that any high resistance could be seen as the new baseline resistance , and this value might not apply to the previous environment, should you put the sensor back into it's original location. Resetting the baseline resistance The sensor keeps track of the baseline resistance even after a factory reset. Currently, there is no method to reset the baseline resistance in the firmware, but it will soonly be introduced. When changing locations, a baseline resistance reset should be performed. Finally, although the sensor is considered to be an indoor sensor, it can be placed outdoor , but keeping in mind, that the environment will be very different and that the sensor might behave in unexpected ways. Sources Have a read to the Datasheet or some other ANs here","title":"Sensor considerations"},{"location":"Components/sensors/air/CCS811/#early-life-burn-in","text":"The CCS811 performance in terms of resistance levels and sensitivities will change during early life. The change in resistance is greatest over the first 48 hours of operation, although this process can last up to 5 days. CCS811 controls the burn-in period allowing eCO2 and eTVOC readings to be used from first power-on after 60 minutes of operation.","title":"Early-Life (Burn-In)"},{"location":"Components/sensors/air/CCS811/#conditioning-period-run-in","text":"After early-life (Burn-In) the conditioning or run-in period is the time required to achieve good sensor stability before measuring VOCs after long idle period. The sensor will need to run for 20 minutes, before accurate readings are generated.","title":"Conditioning Period (Run-In)"},{"location":"Components/sensors/air/Electrochemical%20Sensors/","text":"Working principle \u00b6 The electrochemical cells used are toxic gas sensors from Alphasense Ltd. that operate in an amperometric mode. That is, they generate a current that is linearly proportional to the fractional volume of the toxic gas in the environment: Image Source: Alphasense Ltd. These electrochemical sensors are comprised of four electrodes: Working electrode Auxiliary electrode Counter electrode Reference electrode The working electrode is where the oxidation (CO, H2S, NO, SO2) or reduction (NO 2 , Cl2) of the toxic gas to be measured takes place. This electrode is exposed to the outside air and directly exposed to all gases in the air including the gas to be measured. This electrode may as well be poisoned if it is exposed to certain gases that either adsorb onto the catalyst (such as acetylene onto CO sensors), or react, creating by-products which inhibit the catalyst (NO 2 or aromatics onto H2S sensors). The auxiliary electrode is an electrode of the same characteristics to those of the working electrode, but it is buried inside an electrolite and, hence, it is not in contact with the target gas. Since it is isolated from external conditions that could affect the working electrode , it serves as a reference to the measurements provided by the latter. The counter electrode balances the reaction of the working electrode \u2013 if the working electrode oxidises the gas, then the counter electrode must reduce some other molecule to generate an equivalent current, in the opposite sense. For example, where carbon monoxide will be oxidised on the working electrode, oxygen will be reduced on the counter electrode. The reference electrode anchors the working electrode potential to ensure that it is always working in the right conditions. It is important that the reference electrode has a stable potential, keeping the working electrode at the right electrochemical potential to maintain a constant sensitivity, good linearity and minimum sensitivity to interfering gases. Therefore, while the sensor response is exposed to the target gas, it creates a current flowing from the working to the counter electrode or viceversa (depending on the oxidative or reductive nature of the target gas). This current has been found to be nicely responsive to target gas and therefore subject to characterisation and calibration. Reduction vs Oxidation Electrochemical Sensor \u00b6 As mentioned above, the counter electrode is meant to balance the reaction of the working electrode. This determines the current direction within the board: whether it goes from the working electrode to the counter electrode or viceversa. Oxidation sensors, such as CO, provoke a positive current out of the working electrode and the larger the amount of CO present, the larger (positive) is this current. Reduction sensors, such as NO 2 , provoke a negative current, i.e: going into the sensor and the larger the amount of NO 2 present, the larger (negative) is this current Usage and considerations \u00b6 Alphasense Ltd. provides the calibration data in laboratory conditions for each of the electrochemical cells used. This data can be used to calculate pollutant concentration and to correct for known effects by temperature deviations. More on this Alphasense Ltd. provides very useful application notes for the sensor usage. Pollutant calculation based on calibration data in laboratory conditions, can be insightful enough for certain applications, but it might not suffice for some conditions in which the sensors are exposed to other pollutants or in harsh environments. For this reason, two different approaches build on top of the laboratory calibration data: Usage of more advanced physical models as detailed in 1 Usage of site-specific calibration models with short-term deployments in co-location with reference measurement equipment and generalised calibration models derived from the junction of these 4 . Stabilisation \u00b6 The electrochemical sensors need stabilisation time under the testing conditions they will be at. It is important to set and power the sensors with sufficient time (1-2 days) on the test environment for them to adapt. The newer the sensor, the more stabilisation time it requires. For this deployment, you will be receiving brand new sensors. Humidity and temperature extremes will require of further sensor adaptation, in order to dry out or absorb the necessary humidity for their proper functioning. Danger Do not extract/attach the sensor capsule from the base board while powered, this could irreversibly damage the sensor. Open questions \u00b6 These methods, however, are still open to discussion and more research is necessary to address all use cases. For this reason, the use of these sensors in the Smart Citizen Station is tailored to each use and adapted to the calibration needs of the deployment. Characterisation techniques based on manufacturer data and physical models (i.e. classical linear regression using sensor sensitivity, span and zero) require a big development effort in order to characterise the sensor behaviour that, in the case of low-cost sensors, is affected by a wide variety of external factors such as temperature, humidity and pollutant cross-sensitivity, each of which imply a larger characterisation effort and that can\u2019t be fully represented in a controlled setting. On the other hand, statistical models are able to generate models that describe the sensor behaviour in a mathematical way, but they need to be properly adjusted with large amounts of test data, preferably in the actual deployment site. This approach can be applied per sensor, or to a batch of sensors, assuming that the inter-sensor variation is low or that they can be normalised. In the case of deploying the sensors in different locations, the conditions of these sites should be sufficiently similar to those when the model was generated, since many models won\u2019t be able to extrapolate well, or account for effects they have not seen (i.e. temperature gradients, specific pollutants, etc). How much is \u200bsufficiently similar\u200b, depends on the type of model and it is not easy to determine and, since this is not often assessed easily, researchers suggest ( 5 , 6 ) that a co-location prior to and post data acquisition with reference sensors should be carried out. In any case, the development of these models highly depends on the amount and quality of the data obtained from both: sensor data and reference data. In the case of reference data 6 have pointed out that reference stations can deviate up to 15% from the actual pollutant concentration, but this has not been taken into account in this study. Since co-location possibilities could be limited, two options are compared for the calibration of these sensors: a specific on-site calibration with sensor co-location, aiming to calibrate the sensors with the data from that period; and a general model approach, in which all the co-location tests from the different sensors deployed are input into a statistical model that aims to describe the global behaviour. Whether these methods are able to generalise or not, it's yet to be answered, and it's probably to be defined for each use case in particular. Results \u00b6 A whole section of the electrochemical sensors validation is available in the iSCAPE D7.8 report on Sensor monitoring experiences and technological innovations 4 . References \u00b6 The use of electrochemical sensors for monitoring urban air quality in low-cost, high-density networks - M.I. Mead, O.A.M. Popoola, G.B. Stewart, P. Landshoff, M. Calleja, M. Hayesb, J.J. Baldovi, M.W. McLeod, T.F. Hodgson, J. Dicks, A. Lewis J. Cohen, R. Baron, J.R. Saffell, R.L. Jones \u21a9 Development of a baseline-temperature correction methodology for electrochemical sensors and its implications for long-term stability - Olalekan A.M. Popoola*, Gregor B. Stewart, Mohammed I. Mead, Roderic L. Jones \u21a9 Modelling atmospheric composition in urban street canyons - Vivien Bright, William Bloss and Xiaoming Cai \u21a9 ISCAPE D7.8 Sensor monitoring experiences and technological innovations ] \u21a9 \u21a9 Kizel et al - Node-to-node field calibration of wireless distributed air pollution sensor network. In: Environmental pollution (2017) \u21a9 Du\u0161an et al - In search of an optimal in-field calibration method of low-cost gas sensors for ambient air pollutants: comparison of linear, multilinear and artificial neural network approaches. In: Atmospheric Environment (2018) \u21a9 \u21a9","title":"Electrochemical Sensors"},{"location":"Components/sensors/air/Electrochemical%20Sensors/#working-principle","text":"The electrochemical cells used are toxic gas sensors from Alphasense Ltd. that operate in an amperometric mode. That is, they generate a current that is linearly proportional to the fractional volume of the toxic gas in the environment: Image Source: Alphasense Ltd. These electrochemical sensors are comprised of four electrodes: Working electrode Auxiliary electrode Counter electrode Reference electrode The working electrode is where the oxidation (CO, H2S, NO, SO2) or reduction (NO 2 , Cl2) of the toxic gas to be measured takes place. This electrode is exposed to the outside air and directly exposed to all gases in the air including the gas to be measured. This electrode may as well be poisoned if it is exposed to certain gases that either adsorb onto the catalyst (such as acetylene onto CO sensors), or react, creating by-products which inhibit the catalyst (NO 2 or aromatics onto H2S sensors). The auxiliary electrode is an electrode of the same characteristics to those of the working electrode, but it is buried inside an electrolite and, hence, it is not in contact with the target gas. Since it is isolated from external conditions that could affect the working electrode , it serves as a reference to the measurements provided by the latter. The counter electrode balances the reaction of the working electrode \u2013 if the working electrode oxidises the gas, then the counter electrode must reduce some other molecule to generate an equivalent current, in the opposite sense. For example, where carbon monoxide will be oxidised on the working electrode, oxygen will be reduced on the counter electrode. The reference electrode anchors the working electrode potential to ensure that it is always working in the right conditions. It is important that the reference electrode has a stable potential, keeping the working electrode at the right electrochemical potential to maintain a constant sensitivity, good linearity and minimum sensitivity to interfering gases. Therefore, while the sensor response is exposed to the target gas, it creates a current flowing from the working to the counter electrode or viceversa (depending on the oxidative or reductive nature of the target gas). This current has been found to be nicely responsive to target gas and therefore subject to characterisation and calibration.","title":"Working principle"},{"location":"Components/sensors/air/Electrochemical%20Sensors/#reduction-vs-oxidation-electrochemical-sensor","text":"As mentioned above, the counter electrode is meant to balance the reaction of the working electrode. This determines the current direction within the board: whether it goes from the working electrode to the counter electrode or viceversa. Oxidation sensors, such as CO, provoke a positive current out of the working electrode and the larger the amount of CO present, the larger (positive) is this current. Reduction sensors, such as NO 2 , provoke a negative current, i.e: going into the sensor and the larger the amount of NO 2 present, the larger (negative) is this current","title":"Reduction vs Oxidation Electrochemical Sensor"},{"location":"Components/sensors/air/Electrochemical%20Sensors/#usage-and-considerations","text":"Alphasense Ltd. provides the calibration data in laboratory conditions for each of the electrochemical cells used. This data can be used to calculate pollutant concentration and to correct for known effects by temperature deviations. More on this Alphasense Ltd. provides very useful application notes for the sensor usage. Pollutant calculation based on calibration data in laboratory conditions, can be insightful enough for certain applications, but it might not suffice for some conditions in which the sensors are exposed to other pollutants or in harsh environments. For this reason, two different approaches build on top of the laboratory calibration data: Usage of more advanced physical models as detailed in 1 Usage of site-specific calibration models with short-term deployments in co-location with reference measurement equipment and generalised calibration models derived from the junction of these 4 .","title":"Usage and considerations"},{"location":"Components/sensors/air/Electrochemical%20Sensors/#stabilisation","text":"The electrochemical sensors need stabilisation time under the testing conditions they will be at. It is important to set and power the sensors with sufficient time (1-2 days) on the test environment for them to adapt. The newer the sensor, the more stabilisation time it requires. For this deployment, you will be receiving brand new sensors. Humidity and temperature extremes will require of further sensor adaptation, in order to dry out or absorb the necessary humidity for their proper functioning. Danger Do not extract/attach the sensor capsule from the base board while powered, this could irreversibly damage the sensor.","title":"Stabilisation"},{"location":"Components/sensors/air/Electrochemical%20Sensors/#open-questions","text":"These methods, however, are still open to discussion and more research is necessary to address all use cases. For this reason, the use of these sensors in the Smart Citizen Station is tailored to each use and adapted to the calibration needs of the deployment. Characterisation techniques based on manufacturer data and physical models (i.e. classical linear regression using sensor sensitivity, span and zero) require a big development effort in order to characterise the sensor behaviour that, in the case of low-cost sensors, is affected by a wide variety of external factors such as temperature, humidity and pollutant cross-sensitivity, each of which imply a larger characterisation effort and that can\u2019t be fully represented in a controlled setting. On the other hand, statistical models are able to generate models that describe the sensor behaviour in a mathematical way, but they need to be properly adjusted with large amounts of test data, preferably in the actual deployment site. This approach can be applied per sensor, or to a batch of sensors, assuming that the inter-sensor variation is low or that they can be normalised. In the case of deploying the sensors in different locations, the conditions of these sites should be sufficiently similar to those when the model was generated, since many models won\u2019t be able to extrapolate well, or account for effects they have not seen (i.e. temperature gradients, specific pollutants, etc). How much is \u200bsufficiently similar\u200b, depends on the type of model and it is not easy to determine and, since this is not often assessed easily, researchers suggest ( 5 , 6 ) that a co-location prior to and post data acquisition with reference sensors should be carried out. In any case, the development of these models highly depends on the amount and quality of the data obtained from both: sensor data and reference data. In the case of reference data 6 have pointed out that reference stations can deviate up to 15% from the actual pollutant concentration, but this has not been taken into account in this study. Since co-location possibilities could be limited, two options are compared for the calibration of these sensors: a specific on-site calibration with sensor co-location, aiming to calibrate the sensors with the data from that period; and a general model approach, in which all the co-location tests from the different sensors deployed are input into a statistical model that aims to describe the global behaviour. Whether these methods are able to generalise or not, it's yet to be answered, and it's probably to be defined for each use case in particular.","title":"Open questions"},{"location":"Components/sensors/air/Electrochemical%20Sensors/#results","text":"A whole section of the electrochemical sensors validation is available in the iSCAPE D7.8 report on Sensor monitoring experiences and technological innovations 4 .","title":"Results"},{"location":"Components/sensors/air/Electrochemical%20Sensors/#references","text":"The use of electrochemical sensors for monitoring urban air quality in low-cost, high-density networks - M.I. Mead, O.A.M. Popoola, G.B. Stewart, P. Landshoff, M. Calleja, M. Hayesb, J.J. Baldovi, M.W. McLeod, T.F. Hodgson, J. Dicks, A. Lewis J. Cohen, R. Baron, J.R. Saffell, R.L. Jones \u21a9 Development of a baseline-temperature correction methodology for electrochemical sensors and its implications for long-term stability - Olalekan A.M. Popoola*, Gregor B. Stewart, Mohammed I. Mead, Roderic L. Jones \u21a9 Modelling atmospheric composition in urban street canyons - Vivien Bright, William Bloss and Xiaoming Cai \u21a9 ISCAPE D7.8 Sensor monitoring experiences and technological innovations ] \u21a9 \u21a9 Kizel et al - Node-to-node field calibration of wireless distributed air pollution sensor network. In: Environmental pollution (2017) \u21a9 Du\u0161an et al - In search of an optimal in-field calibration method of low-cost gas sensors for ambient air pollutants: comparison of linear, multilinear and artificial neural network approaches. In: Atmospheric Environment (2018) \u21a9 \u21a9","title":"References"},{"location":"Components/sensors/air/Metal%20Oxide/","text":"Metal Oxide sensors \u00b6 The Smart Citizen Kit has been using metal oxide sensors for air quality metrics for a long time, and we thought that it would be interesting to dedicate a section for them! Learn More Check this link for more information about the specifics of the eCO2 - TVOC sensor Looking for the CO/NO2 MOs? Check the Legacy Hardware Section ! A word about Metal Oxide Sensors \u00b6 Metal Oxide Sensors measure the resistance (R S ) of a sensitive layer after heating it up with a heating element (normally another resistor). However, this reading cannot be considered as an absolute measurement of the target pollutant concentration, since the resistance varies from sensor to sensor, and it's affected by several conditions, such as temperature, humidity and other non-target pollutant affectations. To mitigate this problem, the output of the sensor is normalized using the baseline resistance (R A ): R S is divided by R A . This baseline resistance is the resistance that the sensor sees in clean air, and the cleaner the air is, the higher the resistance is. Unfortunately, since R A varies with the deployment conditions, R A cannot be determined by a one-time calibration; and in the case of the AMS CCS811 included in the SCK V2.1, is maintained on-the-fly in software. This process is known as baseline correction . Previous versions of the SCK (V1.5, V2.0 and others) included the SGX MICS4514, which was meant to measure CO and NO 2 , and a lot of effort was put in V2.0 to improve the driver for the sensor, aiming to reduce power consumption and improve sensor readings. Unfortunately, this didn't match our expectations in terms of data quality and power consumption, and since individual sensor calibration is not feasible in our case (as some scientific publications have suggested), we decided to focus efforts in simpler, more robust and understandable set of sensors. That being said, the SCK V2.1 includes the AMS CCS811 for Air Quality indicative measurements for indoor air quality in the Urban Sensor Board, and the PMS5003 for outdoor PM exposure. More complex outdoor set-ups will be also possible, for instance using the Analog Sensor Board . What to expect from Metal Oxide Sensors \u00b6 As said above, this type of sensors is not meant for fine pollution monitoring , but is more oriented for air quality indications and trends detection . Our approach is to use them for indicative measurements, and progressively tend towards a more reliable, fine and robust system, once the technology is capable of providing so. While deploying them, since the air quality is expected to vary in a typical environment, the minimum time over which a baseline correction is applied is 24 hours. This means that the sensor output will change with time, until the baseline is roughly stable. Since the sensor monitors the baseline resistance periodically, if a cleaner air is found, the new baseline resistance is used to calculate the sensor readings (although this is only done for future readings). This also means that the SCK should not be interrupted with an ad hoc power cut since this could erase the baseline resistance and the sensor could always yield wrong readings since it never sees clean air .","title":"What to expect"},{"location":"Components/sensors/air/Metal%20Oxide/#metal-oxide-sensors","text":"The Smart Citizen Kit has been using metal oxide sensors for air quality metrics for a long time, and we thought that it would be interesting to dedicate a section for them! Learn More Check this link for more information about the specifics of the eCO2 - TVOC sensor Looking for the CO/NO2 MOs? Check the Legacy Hardware Section !","title":"Metal Oxide sensors"},{"location":"Components/sensors/air/Metal%20Oxide/#a-word-about-metal-oxide-sensors","text":"Metal Oxide Sensors measure the resistance (R S ) of a sensitive layer after heating it up with a heating element (normally another resistor). However, this reading cannot be considered as an absolute measurement of the target pollutant concentration, since the resistance varies from sensor to sensor, and it's affected by several conditions, such as temperature, humidity and other non-target pollutant affectations. To mitigate this problem, the output of the sensor is normalized using the baseline resistance (R A ): R S is divided by R A . This baseline resistance is the resistance that the sensor sees in clean air, and the cleaner the air is, the higher the resistance is. Unfortunately, since R A varies with the deployment conditions, R A cannot be determined by a one-time calibration; and in the case of the AMS CCS811 included in the SCK V2.1, is maintained on-the-fly in software. This process is known as baseline correction . Previous versions of the SCK (V1.5, V2.0 and others) included the SGX MICS4514, which was meant to measure CO and NO 2 , and a lot of effort was put in V2.0 to improve the driver for the sensor, aiming to reduce power consumption and improve sensor readings. Unfortunately, this didn't match our expectations in terms of data quality and power consumption, and since individual sensor calibration is not feasible in our case (as some scientific publications have suggested), we decided to focus efforts in simpler, more robust and understandable set of sensors. That being said, the SCK V2.1 includes the AMS CCS811 for Air Quality indicative measurements for indoor air quality in the Urban Sensor Board, and the PMS5003 for outdoor PM exposure. More complex outdoor set-ups will be also possible, for instance using the Analog Sensor Board .","title":"A word about Metal Oxide Sensors"},{"location":"Components/sensors/air/Metal%20Oxide/#what-to-expect-from-metal-oxide-sensors","text":"As said above, this type of sensors is not meant for fine pollution monitoring , but is more oriented for air quality indications and trends detection . Our approach is to use them for indicative measurements, and progressively tend towards a more reliable, fine and robust system, once the technology is capable of providing so. While deploying them, since the air quality is expected to vary in a typical environment, the minimum time over which a baseline correction is applied is 24 hours. This means that the sensor output will change with time, until the baseline is roughly stable. Since the sensor monitors the baseline resistance periodically, if a cleaner air is found, the new baseline resistance is used to calculate the sensor readings (although this is only done for future readings). This also means that the SCK should not be interrupted with an ad hoc power cut since this could erase the baseline resistance and the sensor could always yield wrong readings since it never sees clean air .","title":"What to expect from Metal Oxide Sensors"},{"location":"Components/sensors/air/Noise/","text":"Noise readings \u00b6 The new Urban Sensor Board SCK 2.0 (and onwards) comes with a digital MEMs I2S microphone . There is a wide range of possibilities in the market, and our pick was the INVENSENSE (now TDK) ICS43432 : a tiny digital MEMs microphone with I2S output. There is an extensive documentation at TDK's website coming from the former and we would recommend to review the nicely put documents for those interested in the topic. Image credit: Invensense ICS43432 Hardware \u00b6 The MEMs microphone comes with a transducer element which converts the sound pressure into electric signals. The sound pressure reaches the transducer through a hole drilled in the package and the transducer's signal is sent to an ADC which provides with a signal which can be pulse density modulated (PDM) or in I2S format. Since the ADC is already in the microphone, we have an all-digital audio capture path to the processor and it\u2019s less likely to pick up interferences from other RF, such as the WiFi, for example. The I2S has the advantage of a decimated output, and since the SAMD21 has an I2S port, this allows us to connect it directly to the microcontroller with no CODEC needed to decode the audio data. Additionally, there is a bandpass filter, which eliminates DC and low frequency components (i.e. at fs = 48kHz, the filter has -3dB corner at 3,7Hz) and high frequencies at 0,5\u00b7fs (-3dB cutoff). Both specifications are important to consider when analysing the data and discarding unusable frequencies. The microphone acoustic response has to be considered as well, with subsequent equalisation in the data treatment in order. Image credit: ICS43432 Datasheet - TDK Invensense I2S Protocol \u00b6 The I2S protocol ( Inter-IC-Sound ) is a serial bus interface which consists of: a bit clock line or Serial Clock ( SCK ), a word clock line or Word Select ( WS ) and a multiplexed Serial Data line ( SD ). The SD is transmitted in two\u2019s complement with MSB first, with a 24-bit word length in the microphone we picked. The WS is used to indicate which channel is being transmitted (left or right). In the case of the ICS43432, there is an additional pin which corresponds with the L/R, allowing to use the left or right channel to output the signal and the use of stereo configurations. When set to left, the data follows WS\u2019s falling edge and when set to right, the WS\u2019s rising edge. For the SAMD21 processor, there is a well developed I2S library that will take control of this configuration. Image credit: I2S bus specification - Philips Semiconductors The SD line of the I2S protocol is quite delicate at high frequencies and it is largely affected by noise in the path the line follows. If you want to try this at home (for example with an Arduino Zero and an I2S microphone like this one , it is important not to use cables in this line and to connect the output pin directly to the board, to avoid having interfaces throughout the SD line. One interesting way to see this is that every time the line sees a medium change, part of it will be reflected and part will be transmitted, just like any other wave. This means that introducing a cable for the line will provoke at least three medium changes and a potential signal quality loss much higher than a direct connection. Apart from this point, the I2S connection is pretty straight forward and it is reasonably easy to retrieve data from the line and start playing around with some FFT analysis. Manufacturer specifications \u00b6 Parameter Value EIN (dB) - Equivalent input noise 29 Acoustic Dynamic Range (dB) 87 AOP - Acoustic overload point (dB) 116 Full Scale digital (dB SPL) 120 BIT length (-) 24 Sensitivity at 94 dBSPL 1kHz (dBFS) -26 Evaluation \u00b6 The sensor is calibrated in an anechoic chamber with a reference microphone to obtain sensor characteristics. The ICS43432 has a clear non-linear response, which is specified in it's datasheet and is characterised in an anechoic chamber: Image credit: Invensense ICS43432 Test setup \u00b6 SCK side 1 x microphone installed in Arduino Zero (alternating Invensense and Knowles), at h = 1,2m Instrumentation side 1 x Speaker at 4m distance from the microphone at h = 1,2m 1 x Microphone 1 x Class I sonometer for double point test Noise floor \u00b6 The noise floor of the microphone in this test setup is of 35,5 dB / 30,1 dBA Spectrum response \u00b6 The results for this characterisation, for different SPLs are shown below: The microphone's spectrum response is not dependent on the SPL, but only on the frequency. The above response is corrected in the Smart Citizen Kit on real time. A double point validation is performed on both microphones, from the SCK1.5 and the SCK2.0 (onwards), yielding the following results ( the results below do not show any equalisation ): Finally, if comparing these with the thresholds, in dBA scale IEC 61672-1 , without accounting for the previous equalisation: Which yields a very good linearity off-the-shelf over the common urban frequency range (below 2000Hz). Sensor Considerations \u00b6 There are some known limitations that need to be taken into account when performing noise measurements with the SCK: The microphone is not isolated in any way from humidity, dust or particles. These can affect the readings and provoke clipping in the readings (absurdly high readings). Up to version 0.9.7 of the firmware, there was a problem in the equalisation tables that provoked low frequencies to be amplified. The fact that the microphone is surface mounted on a PCB can make that certain frequencies resonate on the board and get amplified. Noise measurement basic knowledge \u00b6 Real-world sound pressure levels (SPL) travelling around in the air are not fully perceived by our ears. Image credit: Human hearing - DSP Guide There are several studies and models of what we actually perceive which yield several types of the so called weighting functions . Some of them have been standarised for the purpose of SPL measurement, finding different types like A-weighting (the most common one), B-weighting, D (both in disuse) and others. In the frequency domain, they look like this: Image credit: A-weighting - Wikipedia Even if the are high sound pressure levels floating around in the air, we might not hear them just because of the frequency they are at. Normally humans can hear from something around 20Hz to 20kHz, although most adults might not hear anything in out-of-laboratory conditions above 15kHz. Some animals though, can perceive a great range of frequencies , and for example mouses can hear up to 80kHz. Because of all this, the very first thing we would like to do is to be able to perform weighting on the samples we measure. The I2S microphone is interesting in order to understand sources of urban noise pollution since it provides us with a raw SPL buffer we can play with. As well, we can obtain dBA levels (SPL with a-weighting correction) by processing this buffer in several ways and calculate the RMS level of the resulting signal. Signal processing \u00b6 This is the whole signal treatment process we use for the I2S microphone ICS43432. We will have a look at windowing and its use in future sections, as well as its implementation in the SAMD21 Cortex M0+ for our firmware. Signal acquisition Windowing FFT Spectrum Normalisation Equalisation A-weighting RMS calculation Calculations A note with the calculations on the microphone can be found here About sampling periods A note with the sampling periods on the microphone can be found here For the purists Being mathematical purist, there is yet another possibility for this procedure using convolution in time domain, which is covered below, although not implemented. RMS and FFT algorithm simplified \u00b6 In the previous section we introduced the concept of weighting and our interest on calculating the sound pressure level in different scales. Normally, SPL is expressed in RMS levels, or root mean square . This is nothing more than a modified arithmetic average, where each term of the expression is added in its square form. We then take the square root of all the average: x = {\\sqrt{x_1^2+x_2^2+...+x_N^2 \\over N}} x = {\\sqrt{x_1^2+x_2^2+...+x_N^2 \\over N}} The interesting thing about the RMS level, is that it expresses an average signal level throughout the signal, and it actually relates to the peak level of sinusoid wave by \u221a2. Therefore, it is a very interesting way to express average levels for signals and for that reason, it's the common standard used. Image credit: Sine wave parameters- Wikipedia Now that we know how to calculate the RMS level of our signal, let's go into something more interesting: how do we actually perform the weighting? Well, if you recall the previous section, when we talked about hearing, we were talking about the different hearing capabilities in terms of frequencies (in humans, mouses, beluga whales... ). Therefore, something interesting to know about our signal is its frequency content , so that we are able to perform the weighting. For this purpose, we have the FFT algorithm . FFT stands for Fast Fourier Transform , and it's an algorithm capable of performing a Fourier Transform in a simplified and efficient way (that's where the fast comes in). What it does in a detailed mathematical way is something quite complicated with the details; but being practical, it is basically a convertion between the signal in time domain and its frequency domain components. Interestingly, this process is reversible and the other way around it is called IFFT ( I for Inverse ). Image credit: Smart Citizen In the example above, things in the time domain get a bit messy, but in the frequency domain we can clearly see the composition of two sine waves of the same amplitude of roughly 40Hz and 120Hz. The FFT algorithm hence helps us digest the information contained in a signal in a more visually understandable way. For this introduction, let's move on to what we actually want to do: the much anticipated weighting . At this point, our task is fairly easy: we just have to multiply both: our signal in the frequency domain with the weighting function and that's it! If we have a look at the figure below, in the time and frequency domain, the signals look like this: Image credit: Smart Citizen This example shows how our ears are only capable of perceiving the signal in red, but the actual sound components are in blue -- being much higher in the amplitude spectrum. If you want to get into the thick of it, here you have the actual implementation in Matlab/Octave of the A-weighting function that we'll use in the SCK V2.0. Signal windowing \u00b6 In this section we are going to describe how we have to pre process our signals in order to obtain the results in the manner we are expecting. These are very important steps in our processing chain, since the FFT algorithms -or convolution FIR Filters- won't be able to cope with our system's limitations. These limitations might not be obvious at the beginning, but you really don't want to ignore them while designing your system, since they'll invalidate many of your measurements. The very first of these limitations, is the fact that our microphone is, in fact, taking discrete samples of the ambient noise surrounding it. This means that, from the very beginning, we are missing some pieces of information and we will never be able to process them. For the purpose of our analysis, we don't need to sample continuosly and this situation is easily bypassed. Image credit: NUTAQ - Signal processing Discrete sampling has two main consequences for us: the first one is that we are taking samples once every 1/f_s 1/f_s , where f_s f_s is the sampling frequency. Normal audio systems sample at 44,1kHz, but this number might vary depending on the application. If you remember this chart , you might be wondering why we have to sample at such a high frequency. Image credit: Signal acquisition - Adinstruments Nyquist sampling criterion states that at a minimum, we have to sample at double the maximum frequency we want to analyse . Since humans hearing has a limited frequency range that goes up to 20kHz in some cases, it is reasonable to use something around 40kHz. With this, the Nyquist criterion solves the so called aliasing problem , in which several sinusoid signals could fit the same sampling pattern if the number of samples is too low: Image credit: Wikipedia - Aliasing The second of the discrete sampling limitation comes from the amount of samples we are able to handle at a time . Normally, this is due to memory limitations in the RAM. Nevertheless, it is not useful to handle buffers that are too long , since at some point, the increase of buffer length does not provide any additional information. Buffer length requirements in our case come from the minimum frequency we want to sample, which is around 20Hz . Doing some quick math, we need 0,05s worth of sample buffer, which at 44,1kHz is roughly 2200 samples . This is equally too many samples, considering that each could be allocated as a uint8_t , taking up to 16kB just for the raw buffer! This is where signal windowing kicks in. Imagine that we have a very-low-frequency sinusoid and that we are not able to sample completely the whole sine wave, due to buffer limitations. By definition, our system is assuming that the discrete samples we measure are constantly being repeated in the environment, one after the other: Image credit: Smart Citizen When we take the FFT of this signal, we see undesired frequencies that make our frequency spectrum invalid. This is called spectral leakage and it's mitigated by the use of windows (math funcions, not the OS). These windows operate by smoothing the edges of our measurement and preventing the jumps in the signal helping the FFT algorithm to properly analyse the signals. Image credit: Smart Citizen With the use of signal windowing , more specifically with the use of the hamming window , we are then able to reduce the amount of samples needed to roughly 1000 samples. Now we are down to 50% of the memory allocation needed without windowing . You can see the effect on the RMS relative errors in the image below, where the trend of the Hann (another common window) and the Hamming treated buffers, with respect to the frequency tends to stabilise much more quickly than the raw buffers. Image credit: Smart Citizen There is a wide range of functions to use and the decision depends on your application. For audio applications, the most common ones are the Hann, Hamming, and Blackmann. We chose the Hamming because it's trend is to stabilise a bit more quickly than the rest, although the differencies are minimal. For reference, there is a very interesting description of all these phenomena in this article , where you'll find a more mathematical approach. Signal Equalisation \u00b6 The equalisation process basically tries to correct the microphone response and make it linear. This is because the microphone responds by amplifying some frequencies more than other and we compensate this. To do so, we performed tests in an anechoic chamber and we extracted [this equalisation table]( https://github.com/fablabbcn/smartcitizen-kit-21/blob/master/sam/src/SckSoundTables.h#L18-L21 . This table matches roughly the response of the microphone, but also some other resonances from the urban board. Info This multiplicative factor goes very much in line with the ICS43432 datasheet, although with additional noise components. Extra ball: Filtering and convolution \u00b6 What if we don't like the FFT algorithm and we only want to obtain a dBA or dBC results? There is a fairly simple solution to this problem, and it's called filtering . Filtering is a very common technique in signal acquisition that eliminates some frequency components of the raw signal. Examples of filters you very likely have heard of are low-pass, high-pass and band-pass filters . These only let pass the low, high or a defined interval range of frequencies, mostly cancelling out the rest. In the frequency domain, they basicly multiply the spectrum of our signal with its filter spectrum. Exactly what we have done with the weighting. Image credit: Norwegian Creations First, it is important to get a glimpse of the math behind the filters and why they do their magic. And for this, the most important thing we need to know is called convolution . Image credit: River Trail For the purpose of audio analysis , let's consider we have an input vector, a filter kernel and an output vector. Our input vector can be the raw audio signal we have captured, being the output signal the result of the convolution operation. The filter kernel is the characteristic of the filter and will be, for this example, a one dimension array. What the convolution operation is going to do, in a very very very simplified way , is to sweep through the input sample and multiply each component with it's corresponding filter kernel component, then sum the results and put them in the corresponding output sample. If we put some math notation and call x[n] to the input vector, h[n] to the filter kernel and y[n] to the output vector, it all ends up looking like this: Image credit: DSP Guide Now, the most interesting thing of all this theory is that convolution and multiplication are equivalent operations when we jump from the time to the frequency domain . This means that multiplication in time domain equals to convolution in frequency domain, and more importantly for us, convolution in the time domain, equals to multiplication in the frequency domain . To sum up, the relationship between both domains would look like: Image credit: SmartCitizen Therefore, what we could do is to define a custom filter function and apply it via convolution to our input buffer. This is basically a FIR filter , where FIR stands for Finite Impulse Response . There is another type of filters called IIR , where IIR stands for Infinite impulse response . The difference between them is that FIR uses convolution and IIR uses recursion . The concept of recursion is very simple and it's nothing else than a simplification of the convolution, given that in the convolution algorithm, there are many recursive operations that we repeat over an over and we can implement into a smarter algorithm. Normally, IIR filters are more efficient in terms of speed and memory , but we need to specify a series of coefficients, and it's tricky, if not impossible, to create a custom filter response. Image credit: DSP Guide So finally! How can we avoid using the FFT algorithm to extract the desired frequency content of a signal and recreate the signal without it? Sounds complex, but now we know that we can use a FIR filter , with a custom frequency response and apply it via convolution to our input buffer. As simple as that. The custom frequency response, with the proper math, can be optained by applying the IFFT algorithm to the desired frequency response (for example, the A-weighting function). You can have a look to this example if you want to create a custom filter function in octave , with A or C weighting and implement it to a FIR filter in C++. Image credit: SmartCitizen Also, if you are really into it, you can read more about convolution and other DSP topics, we would recommended to go through this fantastic guide . Source files \u00b6 Download Check the source code","title":"Noise"},{"location":"Components/sensors/air/Noise/#noise-readings","text":"The new Urban Sensor Board SCK 2.0 (and onwards) comes with a digital MEMs I2S microphone . There is a wide range of possibilities in the market, and our pick was the INVENSENSE (now TDK) ICS43432 : a tiny digital MEMs microphone with I2S output. There is an extensive documentation at TDK's website coming from the former and we would recommend to review the nicely put documents for those interested in the topic. Image credit: Invensense ICS43432","title":"Noise readings"},{"location":"Components/sensors/air/Noise/#hardware","text":"The MEMs microphone comes with a transducer element which converts the sound pressure into electric signals. The sound pressure reaches the transducer through a hole drilled in the package and the transducer's signal is sent to an ADC which provides with a signal which can be pulse density modulated (PDM) or in I2S format. Since the ADC is already in the microphone, we have an all-digital audio capture path to the processor and it\u2019s less likely to pick up interferences from other RF, such as the WiFi, for example. The I2S has the advantage of a decimated output, and since the SAMD21 has an I2S port, this allows us to connect it directly to the microcontroller with no CODEC needed to decode the audio data. Additionally, there is a bandpass filter, which eliminates DC and low frequency components (i.e. at fs = 48kHz, the filter has -3dB corner at 3,7Hz) and high frequencies at 0,5\u00b7fs (-3dB cutoff). Both specifications are important to consider when analysing the data and discarding unusable frequencies. The microphone acoustic response has to be considered as well, with subsequent equalisation in the data treatment in order. Image credit: ICS43432 Datasheet - TDK Invensense","title":"Hardware"},{"location":"Components/sensors/air/Noise/#i2s-protocol","text":"The I2S protocol ( Inter-IC-Sound ) is a serial bus interface which consists of: a bit clock line or Serial Clock ( SCK ), a word clock line or Word Select ( WS ) and a multiplexed Serial Data line ( SD ). The SD is transmitted in two\u2019s complement with MSB first, with a 24-bit word length in the microphone we picked. The WS is used to indicate which channel is being transmitted (left or right). In the case of the ICS43432, there is an additional pin which corresponds with the L/R, allowing to use the left or right channel to output the signal and the use of stereo configurations. When set to left, the data follows WS\u2019s falling edge and when set to right, the WS\u2019s rising edge. For the SAMD21 processor, there is a well developed I2S library that will take control of this configuration. Image credit: I2S bus specification - Philips Semiconductors The SD line of the I2S protocol is quite delicate at high frequencies and it is largely affected by noise in the path the line follows. If you want to try this at home (for example with an Arduino Zero and an I2S microphone like this one , it is important not to use cables in this line and to connect the output pin directly to the board, to avoid having interfaces throughout the SD line. One interesting way to see this is that every time the line sees a medium change, part of it will be reflected and part will be transmitted, just like any other wave. This means that introducing a cable for the line will provoke at least three medium changes and a potential signal quality loss much higher than a direct connection. Apart from this point, the I2S connection is pretty straight forward and it is reasonably easy to retrieve data from the line and start playing around with some FFT analysis.","title":"I2S Protocol"},{"location":"Components/sensors/air/Noise/#manufacturer-specifications","text":"Parameter Value EIN (dB) - Equivalent input noise 29 Acoustic Dynamic Range (dB) 87 AOP - Acoustic overload point (dB) 116 Full Scale digital (dB SPL) 120 BIT length (-) 24 Sensitivity at 94 dBSPL 1kHz (dBFS) -26","title":"Manufacturer specifications"},{"location":"Components/sensors/air/Noise/#evaluation","text":"The sensor is calibrated in an anechoic chamber with a reference microphone to obtain sensor characteristics. The ICS43432 has a clear non-linear response, which is specified in it's datasheet and is characterised in an anechoic chamber: Image credit: Invensense ICS43432","title":"Evaluation"},{"location":"Components/sensors/air/Noise/#test-setup","text":"SCK side 1 x microphone installed in Arduino Zero (alternating Invensense and Knowles), at h = 1,2m Instrumentation side 1 x Speaker at 4m distance from the microphone at h = 1,2m 1 x Microphone 1 x Class I sonometer for double point test","title":"Test setup"},{"location":"Components/sensors/air/Noise/#noise-floor","text":"The noise floor of the microphone in this test setup is of 35,5 dB / 30,1 dBA","title":"Noise floor"},{"location":"Components/sensors/air/Noise/#spectrum-response","text":"The results for this characterisation, for different SPLs are shown below: The microphone's spectrum response is not dependent on the SPL, but only on the frequency. The above response is corrected in the Smart Citizen Kit on real time. A double point validation is performed on both microphones, from the SCK1.5 and the SCK2.0 (onwards), yielding the following results ( the results below do not show any equalisation ): Finally, if comparing these with the thresholds, in dBA scale IEC 61672-1 , without accounting for the previous equalisation: Which yields a very good linearity off-the-shelf over the common urban frequency range (below 2000Hz).","title":"Spectrum response"},{"location":"Components/sensors/air/Noise/#sensor-considerations","text":"There are some known limitations that need to be taken into account when performing noise measurements with the SCK: The microphone is not isolated in any way from humidity, dust or particles. These can affect the readings and provoke clipping in the readings (absurdly high readings). Up to version 0.9.7 of the firmware, there was a problem in the equalisation tables that provoked low frequencies to be amplified. The fact that the microphone is surface mounted on a PCB can make that certain frequencies resonate on the board and get amplified.","title":"Sensor Considerations"},{"location":"Components/sensors/air/Noise/#noise-measurement-basic-knowledge","text":"Real-world sound pressure levels (SPL) travelling around in the air are not fully perceived by our ears. Image credit: Human hearing - DSP Guide There are several studies and models of what we actually perceive which yield several types of the so called weighting functions . Some of them have been standarised for the purpose of SPL measurement, finding different types like A-weighting (the most common one), B-weighting, D (both in disuse) and others. In the frequency domain, they look like this: Image credit: A-weighting - Wikipedia Even if the are high sound pressure levels floating around in the air, we might not hear them just because of the frequency they are at. Normally humans can hear from something around 20Hz to 20kHz, although most adults might not hear anything in out-of-laboratory conditions above 15kHz. Some animals though, can perceive a great range of frequencies , and for example mouses can hear up to 80kHz. Because of all this, the very first thing we would like to do is to be able to perform weighting on the samples we measure. The I2S microphone is interesting in order to understand sources of urban noise pollution since it provides us with a raw SPL buffer we can play with. As well, we can obtain dBA levels (SPL with a-weighting correction) by processing this buffer in several ways and calculate the RMS level of the resulting signal.","title":"Noise measurement basic knowledge"},{"location":"Components/sensors/air/Noise/#signal-processing","text":"This is the whole signal treatment process we use for the I2S microphone ICS43432. We will have a look at windowing and its use in future sections, as well as its implementation in the SAMD21 Cortex M0+ for our firmware. Signal acquisition Windowing FFT Spectrum Normalisation Equalisation A-weighting RMS calculation Calculations A note with the calculations on the microphone can be found here About sampling periods A note with the sampling periods on the microphone can be found here For the purists Being mathematical purist, there is yet another possibility for this procedure using convolution in time domain, which is covered below, although not implemented.","title":"Signal processing"},{"location":"Components/sensors/air/Noise/#rms-and-fft-algorithm-simplified","text":"In the previous section we introduced the concept of weighting and our interest on calculating the sound pressure level in different scales. Normally, SPL is expressed in RMS levels, or root mean square . This is nothing more than a modified arithmetic average, where each term of the expression is added in its square form. We then take the square root of all the average: x = {\\sqrt{x_1^2+x_2^2+...+x_N^2 \\over N}} x = {\\sqrt{x_1^2+x_2^2+...+x_N^2 \\over N}} The interesting thing about the RMS level, is that it expresses an average signal level throughout the signal, and it actually relates to the peak level of sinusoid wave by \u221a2. Therefore, it is a very interesting way to express average levels for signals and for that reason, it's the common standard used. Image credit: Sine wave parameters- Wikipedia Now that we know how to calculate the RMS level of our signal, let's go into something more interesting: how do we actually perform the weighting? Well, if you recall the previous section, when we talked about hearing, we were talking about the different hearing capabilities in terms of frequencies (in humans, mouses, beluga whales... ). Therefore, something interesting to know about our signal is its frequency content , so that we are able to perform the weighting. For this purpose, we have the FFT algorithm . FFT stands for Fast Fourier Transform , and it's an algorithm capable of performing a Fourier Transform in a simplified and efficient way (that's where the fast comes in). What it does in a detailed mathematical way is something quite complicated with the details; but being practical, it is basically a convertion between the signal in time domain and its frequency domain components. Interestingly, this process is reversible and the other way around it is called IFFT ( I for Inverse ). Image credit: Smart Citizen In the example above, things in the time domain get a bit messy, but in the frequency domain we can clearly see the composition of two sine waves of the same amplitude of roughly 40Hz and 120Hz. The FFT algorithm hence helps us digest the information contained in a signal in a more visually understandable way. For this introduction, let's move on to what we actually want to do: the much anticipated weighting . At this point, our task is fairly easy: we just have to multiply both: our signal in the frequency domain with the weighting function and that's it! If we have a look at the figure below, in the time and frequency domain, the signals look like this: Image credit: Smart Citizen This example shows how our ears are only capable of perceiving the signal in red, but the actual sound components are in blue -- being much higher in the amplitude spectrum. If you want to get into the thick of it, here you have the actual implementation in Matlab/Octave of the A-weighting function that we'll use in the SCK V2.0.","title":"RMS and FFT algorithm simplified"},{"location":"Components/sensors/air/Noise/#signal-windowing","text":"In this section we are going to describe how we have to pre process our signals in order to obtain the results in the manner we are expecting. These are very important steps in our processing chain, since the FFT algorithms -or convolution FIR Filters- won't be able to cope with our system's limitations. These limitations might not be obvious at the beginning, but you really don't want to ignore them while designing your system, since they'll invalidate many of your measurements. The very first of these limitations, is the fact that our microphone is, in fact, taking discrete samples of the ambient noise surrounding it. This means that, from the very beginning, we are missing some pieces of information and we will never be able to process them. For the purpose of our analysis, we don't need to sample continuosly and this situation is easily bypassed. Image credit: NUTAQ - Signal processing Discrete sampling has two main consequences for us: the first one is that we are taking samples once every 1/f_s 1/f_s , where f_s f_s is the sampling frequency. Normal audio systems sample at 44,1kHz, but this number might vary depending on the application. If you remember this chart , you might be wondering why we have to sample at such a high frequency. Image credit: Signal acquisition - Adinstruments Nyquist sampling criterion states that at a minimum, we have to sample at double the maximum frequency we want to analyse . Since humans hearing has a limited frequency range that goes up to 20kHz in some cases, it is reasonable to use something around 40kHz. With this, the Nyquist criterion solves the so called aliasing problem , in which several sinusoid signals could fit the same sampling pattern if the number of samples is too low: Image credit: Wikipedia - Aliasing The second of the discrete sampling limitation comes from the amount of samples we are able to handle at a time . Normally, this is due to memory limitations in the RAM. Nevertheless, it is not useful to handle buffers that are too long , since at some point, the increase of buffer length does not provide any additional information. Buffer length requirements in our case come from the minimum frequency we want to sample, which is around 20Hz . Doing some quick math, we need 0,05s worth of sample buffer, which at 44,1kHz is roughly 2200 samples . This is equally too many samples, considering that each could be allocated as a uint8_t , taking up to 16kB just for the raw buffer! This is where signal windowing kicks in. Imagine that we have a very-low-frequency sinusoid and that we are not able to sample completely the whole sine wave, due to buffer limitations. By definition, our system is assuming that the discrete samples we measure are constantly being repeated in the environment, one after the other: Image credit: Smart Citizen When we take the FFT of this signal, we see undesired frequencies that make our frequency spectrum invalid. This is called spectral leakage and it's mitigated by the use of windows (math funcions, not the OS). These windows operate by smoothing the edges of our measurement and preventing the jumps in the signal helping the FFT algorithm to properly analyse the signals. Image credit: Smart Citizen With the use of signal windowing , more specifically with the use of the hamming window , we are then able to reduce the amount of samples needed to roughly 1000 samples. Now we are down to 50% of the memory allocation needed without windowing . You can see the effect on the RMS relative errors in the image below, where the trend of the Hann (another common window) and the Hamming treated buffers, with respect to the frequency tends to stabilise much more quickly than the raw buffers. Image credit: Smart Citizen There is a wide range of functions to use and the decision depends on your application. For audio applications, the most common ones are the Hann, Hamming, and Blackmann. We chose the Hamming because it's trend is to stabilise a bit more quickly than the rest, although the differencies are minimal. For reference, there is a very interesting description of all these phenomena in this article , where you'll find a more mathematical approach.","title":"Signal windowing"},{"location":"Components/sensors/air/Noise/#signal-equalisation","text":"The equalisation process basically tries to correct the microphone response and make it linear. This is because the microphone responds by amplifying some frequencies more than other and we compensate this. To do so, we performed tests in an anechoic chamber and we extracted [this equalisation table]( https://github.com/fablabbcn/smartcitizen-kit-21/blob/master/sam/src/SckSoundTables.h#L18-L21 . This table matches roughly the response of the microphone, but also some other resonances from the urban board. Info This multiplicative factor goes very much in line with the ICS43432 datasheet, although with additional noise components.","title":"Signal Equalisation"},{"location":"Components/sensors/air/Noise/#extra-ball-filtering-and-convolution","text":"What if we don't like the FFT algorithm and we only want to obtain a dBA or dBC results? There is a fairly simple solution to this problem, and it's called filtering . Filtering is a very common technique in signal acquisition that eliminates some frequency components of the raw signal. Examples of filters you very likely have heard of are low-pass, high-pass and band-pass filters . These only let pass the low, high or a defined interval range of frequencies, mostly cancelling out the rest. In the frequency domain, they basicly multiply the spectrum of our signal with its filter spectrum. Exactly what we have done with the weighting. Image credit: Norwegian Creations First, it is important to get a glimpse of the math behind the filters and why they do their magic. And for this, the most important thing we need to know is called convolution . Image credit: River Trail For the purpose of audio analysis , let's consider we have an input vector, a filter kernel and an output vector. Our input vector can be the raw audio signal we have captured, being the output signal the result of the convolution operation. The filter kernel is the characteristic of the filter and will be, for this example, a one dimension array. What the convolution operation is going to do, in a very very very simplified way , is to sweep through the input sample and multiply each component with it's corresponding filter kernel component, then sum the results and put them in the corresponding output sample. If we put some math notation and call x[n] to the input vector, h[n] to the filter kernel and y[n] to the output vector, it all ends up looking like this: Image credit: DSP Guide Now, the most interesting thing of all this theory is that convolution and multiplication are equivalent operations when we jump from the time to the frequency domain . This means that multiplication in time domain equals to convolution in frequency domain, and more importantly for us, convolution in the time domain, equals to multiplication in the frequency domain . To sum up, the relationship between both domains would look like: Image credit: SmartCitizen Therefore, what we could do is to define a custom filter function and apply it via convolution to our input buffer. This is basically a FIR filter , where FIR stands for Finite Impulse Response . There is another type of filters called IIR , where IIR stands for Infinite impulse response . The difference between them is that FIR uses convolution and IIR uses recursion . The concept of recursion is very simple and it's nothing else than a simplification of the convolution, given that in the convolution algorithm, there are many recursive operations that we repeat over an over and we can implement into a smarter algorithm. Normally, IIR filters are more efficient in terms of speed and memory , but we need to specify a series of coefficients, and it's tricky, if not impossible, to create a custom filter response. Image credit: DSP Guide So finally! How can we avoid using the FFT algorithm to extract the desired frequency content of a signal and recreate the signal without it? Sounds complex, but now we know that we can use a FIR filter , with a custom frequency response and apply it via convolution to our input buffer. As simple as that. The custom frequency response, with the proper math, can be optained by applying the IFFT algorithm to the desired frequency response (for example, the A-weighting function). You can have a look to this example if you want to create a custom filter function in octave , with A or C weighting and implement it to a FIR filter in C++. Image credit: SmartCitizen Also, if you are really into it, you can read more about convolution and other DSP topics, we would recommended to go through this fantastic guide .","title":"Extra ball: Filtering and convolution"},{"location":"Components/sensors/air/Noise/#source-files","text":"Download Check the source code","title":"Source files"},{"location":"Components/sensors/air/PM%20Sensors/","text":"PM Sensors \u00b6 Working principle \u00b6 The PM sensors available in the Smart Citizen Kit (one sensor per Kit) and the Smart Citizen Station (two sensors per Station), are the Plantower PMS5003 sensor. The PMS5003 is a nephelometer , and this type of measures suspended particulates by employing a light beam and a light detector set to one side (often 90\u00b0) of the source beam. Particle density is then a function of the light reflected into the detector and the particle mass is a calculation derived from this density, assuming certain properties of the particles, such as shape, color and reflectivity, among others. What the sensor does, is to analyse the readings from the sensing element and count how many particles are there, for different particles sizes, or bins. This means that the sensor will group, for instance, the particles that have a diameter between 1um and 2.5um in one bucket, and count them. Once it has the particle number calculated for all the buckets, it estimates the Particle Mass for PM1 (particles with a diameter below 1um), PM2.5 (particles with a diameter below 2.5um) and PM10 (particles with a diameter below 10um). For estimating this, it makes quite a few assumptions (the internal calculations are unknown to us), such as: Particle shape (normally a sphere, but with some shape factors) Particle color, and hence reflectivity index Particle composition, and hence density The performance of the sensor We have been part of a study in which we characterised a few low cost sensors. You can check it in here Sensor considerations \u00b6 Sources Have a read to the Datasheet These sensors are used in some other projects, such as Purple Air and have been evaluated in laboratory by the Finnish Meteorological Institute - FMI and in outdoor conditions the South Coast AQMD (Air Quality Management District), USA. The study by the FMI did not yield good results for this sensor (specially in PM10), but given the cost we still think is a good citizen awareness sensor and that can be used for certain studies. The AQMD study shows better results for PM10 and PM2.5 with high correlation results with respect to reference equipment (R2 > 0.9 in most cases), although we are not aware of actual testing conditions, or the reference equipment calibration. Other authors also show good results and recommend the usage of these sensors, although in some measurement conditions (like specific types of particles) they perform better, which makes sense given the assumptions mentioned above (read the academic article here ). Similar sensors are used in the Luftdaten project (with a SDS011 in this case). Relative humidity affects this type of sensor, since particles can absorb water and grow in size, hence modifying the fractions and the calculated mass. Additionally, particle's chemistry can affect these assumed properties, and these assumptions may not be usable in every type of environment. However, a relative humidity correction is being tested, correcting size distribution based on particle higroscopicity. Dusty environments The sensor might get clogged in a very dusty environment (like a workshop) and might need some periodic cleaning. It is safe to use a vaccum cleaner to do so, but be careful not to damage the light sensor, the laser emitter or the fan during the process. Sensor operation \u00b6 The sensor is operated in a one-shot mode : turning on for 15s the sensor, everytime a reading is needed. This is done this way in order to save battery. About one-shot mode An study of this was carried out to validate the measurements and can be found here From the long term deployment point of view, the one-shot mode has not been found to have any effect of this in the performance of the sensor, other than normal accumulation of dust in the inner channels of the PMS. This has been seen in continuous mode as well, and it\u2019s probably more due to the construction of the sensor itself. Working in pairs In the Smart Citizen Station, the particle sensors measurements are delivered as averages of the two sensors with periodic validity checks. Please make sure the sensor has reliable energy supply if you will use these sensors permanently. Powering the sensor \u00b6 Make sure that you power the Smart Citizen Kit with a good enough USB cable and with an adaptor that can provide at least 1A. We have found some issues when powering the sensor with a thin cable, or from a weak power source, like a screen.","title":"Particulate Matter"},{"location":"Components/sensors/air/PM%20Sensors/#pm-sensors","text":"","title":"PM Sensors"},{"location":"Components/sensors/air/PM%20Sensors/#working-principle","text":"The PM sensors available in the Smart Citizen Kit (one sensor per Kit) and the Smart Citizen Station (two sensors per Station), are the Plantower PMS5003 sensor. The PMS5003 is a nephelometer , and this type of measures suspended particulates by employing a light beam and a light detector set to one side (often 90\u00b0) of the source beam. Particle density is then a function of the light reflected into the detector and the particle mass is a calculation derived from this density, assuming certain properties of the particles, such as shape, color and reflectivity, among others. What the sensor does, is to analyse the readings from the sensing element and count how many particles are there, for different particles sizes, or bins. This means that the sensor will group, for instance, the particles that have a diameter between 1um and 2.5um in one bucket, and count them. Once it has the particle number calculated for all the buckets, it estimates the Particle Mass for PM1 (particles with a diameter below 1um), PM2.5 (particles with a diameter below 2.5um) and PM10 (particles with a diameter below 10um). For estimating this, it makes quite a few assumptions (the internal calculations are unknown to us), such as: Particle shape (normally a sphere, but with some shape factors) Particle color, and hence reflectivity index Particle composition, and hence density The performance of the sensor We have been part of a study in which we characterised a few low cost sensors. You can check it in here","title":"Working principle"},{"location":"Components/sensors/air/PM%20Sensors/#sensor-considerations","text":"Sources Have a read to the Datasheet These sensors are used in some other projects, such as Purple Air and have been evaluated in laboratory by the Finnish Meteorological Institute - FMI and in outdoor conditions the South Coast AQMD (Air Quality Management District), USA. The study by the FMI did not yield good results for this sensor (specially in PM10), but given the cost we still think is a good citizen awareness sensor and that can be used for certain studies. The AQMD study shows better results for PM10 and PM2.5 with high correlation results with respect to reference equipment (R2 > 0.9 in most cases), although we are not aware of actual testing conditions, or the reference equipment calibration. Other authors also show good results and recommend the usage of these sensors, although in some measurement conditions (like specific types of particles) they perform better, which makes sense given the assumptions mentioned above (read the academic article here ). Similar sensors are used in the Luftdaten project (with a SDS011 in this case). Relative humidity affects this type of sensor, since particles can absorb water and grow in size, hence modifying the fractions and the calculated mass. Additionally, particle's chemistry can affect these assumed properties, and these assumptions may not be usable in every type of environment. However, a relative humidity correction is being tested, correcting size distribution based on particle higroscopicity. Dusty environments The sensor might get clogged in a very dusty environment (like a workshop) and might need some periodic cleaning. It is safe to use a vaccum cleaner to do so, but be careful not to damage the light sensor, the laser emitter or the fan during the process.","title":"Sensor considerations"},{"location":"Components/sensors/air/PM%20Sensors/#sensor-operation","text":"The sensor is operated in a one-shot mode : turning on for 15s the sensor, everytime a reading is needed. This is done this way in order to save battery. About one-shot mode An study of this was carried out to validate the measurements and can be found here From the long term deployment point of view, the one-shot mode has not been found to have any effect of this in the performance of the sensor, other than normal accumulation of dust in the inner channels of the PMS. This has been seen in continuous mode as well, and it\u2019s probably more due to the construction of the sensor itself. Working in pairs In the Smart Citizen Station, the particle sensors measurements are delivered as averages of the two sensors with periodic validity checks. Please make sure the sensor has reliable energy supply if you will use these sensors permanently.","title":"Sensor operation"},{"location":"Components/sensors/air/PM%20Sensors/#powering-the-sensor","text":"Make sure that you power the Smart Citizen Kit with a good enough USB cable and with an adaptor that can provide at least 1A. We have found some issues when powering the sensor with a thin cable, or from a weak power source, like a screen.","title":"Powering the sensor"},{"location":"Components/sensors/air/SGX%20MICS/","text":"About CO-NO2 Metal Oxide Sensors \u00b6 The SGX Mics is a Metal Oxide Resistive sensor capable of reacting to different substances in the atmosphere. In a simplified way, it is comprised of two main elements: A SnO 2 substrate that acts as a sensor element A heater element to keep the substrate in an optimal working area The SnO 2 is a chemically sensitive metal oxide which has interactions with molecules to be detected in the target gas. The reactions that can occur on SnO 2 surface are adsorption and catalytic reactions , which basically mean that the gas molecules can be adsorbed onto the surface or can catalyse reactions (trigger or enhance them). They take place at the so called active sites or grain boundaries, which are areas where the grains that constitute the sensor resistance are in contact with the air (e.g. with metallic contacts). Hence, metal oxide substrate is basically a collection of sites at which different molecules can be absorbed and therefore interact in various manners with the species present in the atmosphere: either through catalytic reaction, surface reaction, grain boundary reaction ( among others ). 2 . The sensor element is typically heated to a few hundred degrees (\u00baC) using a small resistive heater . The regions within the sensor can be described as in Peterson et al. 1 : the surface, which interacts with the gas, the bulk, which is unaffected by it, and the particle boundary, which lies in between these two . The particle boundary is situated at a distance from any material exposed to the atmosphere into the sensor that chemical electrostatic effects can propagate (the so called Debye length), and this is related to the material\u2019s physical properties. At high temperatures, oxygen atoms bond onto the boundary, extracting electrons in the process from the semiconductor\u2019s surface region. The oxygen either then directly reacts with ambient gases, or these gases also bond onto the sensor, which causes more charge carriers to be withdrawn or injected into the surface region. All these effects change the sensor resistance and it is measured accordingly in 1 : In the case of the SGX 4514, the detection of the pollution gases is achieved by measuring the sensing resistance of both sensors. In a generic way, we could characterise the sensor resistance as follows: RED sensor resistance decreases in the presence of CO and hydrocarbons. OX sensor resistance increases in the presence of NO 2 . Finally, the chemical reactions within the resistive element are directly related to temperature and follow an Arrhenius equation type of behaviour. Each sensor's type has a different optimal operation temperature, which is translated into different heating powers for the heater element. Depending on the heating power and transition speeds, different reactions can be facilitated and this can lead to positive effects such as sensor clean up or battery compsuption savings, for example, when heated up in a pulsed profile. On the other hand, it can facilitate sensor poisoning or ageing, which highlights the need of proper sensor characterisation. Sensor Calibration \u00b6 The SGX4514 is a low cost sensor originally ment to detect instances or trends of target gas in the atmosphere 4 5 . The applications intended for these sensors are \u2018event sensing\u2018 applications and the level of accuracy required is not necessarily within regulatory standards. Furthermore, these sensors should not be used with safety related issues. However, despite the low cost nature of these sensors, they have been subject of a great deal of research 1 2 3 and have been reported to give considerably good results in field applications. Before delving into the details of sensor calibration, we will try to understand what these sensors are and how they should be handled. Some important definitions are: Sensor baseline resistance : is the resistance that the sensor exhibits when it's not powered Sensor sensitivity : is the resistance variation with variations in the target gas Sensor cross-sensitivity : is the resistance variation with variations of gases other than the target gas Sensor poisoning : an irreversible resistance variation provoked by the reaction of gases other than the target gas Source: Peterson et al. 1 Peterson et al. 1 describes the various types of interactions between atmospheric gases and a MOS sensor surface. In the image above, the leftmost region describes the unpowered behaviour, or base resistance . The three other regions of the diagram describe different processes that actually occur simultaneously to varying degrees. The sensor\u2019s output is the resistance across the whole of the sensor material, which forms a resistor network with contributions from both the bulk and surface regions. The model described in 1 also explains the wide variation in base resistance between individual sensors of the same type, as the random nature of the surface geometry means an equally random network of resistances. This diagram is a two-dimensional representation of a three-dimensional material; in an actual sensor, the sensitive region is spread into the surface with a distance dependent on the grain size and arrangement resulting from the sintering. Each sensor will then have a different resistance in air and how much this baseline resistance changes with the concentration of the target gas will also differ (what we defined above as sensitivity). Therefore to convert from resistance readings to concentration it is necessary to derive a calibration curve for each sensor . This will require measuring the resistances in air and at a number of gas concentrations over the desired range. It is important that the concentrations are in a background of air as Oxygen is needed for the sensor to work correctly. As stated in 2 , the sensor\u2019s response is only partially a function of the amount of gas to which the surface is exposed. Instead, the sensor will have a baseline resistance that is related to the bulk and particle boundary resistance. Because of the random geometry of the granular sensor surface, the baseline resistance will vary between individual sensors. The change in resistance with the change in gas concentration is generally not a linear response. The response can be measured and fitted to a polynomial relationship , with interactions from other metrics such as temperature, humidity and other gases. It has been proved that air flow around the sensor yields better sensor reactivity, and that the usage of PTFE filters also helps reducing cross-sensitivity and sensor poisoning. An important practical consideration with any in situ air quality sensor design is ensuring adequate flow of sampling air through the device. Stale air inside a casing will produce unrepresentative results , and even sensors mounted outside a casing might not get a properly-mixed sample. Source: Peterson et al. 1 Although the deployment of multiple different sensors can compensate for the cross-sensitivity issues in calibration, it cannot eliminate it. MOS sensors can thus be used only in situations where any interfering species can either be measured by other means, or they must be calibrated regularly and used in locations where the background varies in concentration slowly compared with the target gases. As well, the sensor drift over time is an important issue that requires sensor recalibration over time. There are two major factors in the longevity of a sensor\u2019s calibration. The first is the natural degradation of the heater element, which becomes hotter over prolonged use and causes the sensor\u2019s response profile to vary. The second is the effect of slowly-varying interfering gases, which over the course of months shifts the sensor\u2019s baseline. The first problem may have an engineering solution, but the second will involve taking the results of the tests in an artificial atmosphere, identifying the most critical species and either measuring or possibly modelling their likely concentrations during deployments. An analytical approach to counteracting this drift might be \"merging calibrations\", where a sensor is calibrated at the start and end of a four-month campaign, and the coefficients gradually change from one end of the experiment run to the other. Having all this in mind, the sensor calibration we follow is comprised of the following steps: Sensor behaviour characterisation under different temperature profiles Sensor baseline and sensitivity characterisation in controlled conditions Sensor deployment with reference measurements collocation and model calibration The use of deployment campaigns is of utmost importance in order to develop sensor models that are reality proof . With the possibility of collecting the data with the SmartCitizen Platform and the data treatment provided by the Sensor Calibration Framework , we are able to iterate over the different sensor calibration possibilities, ranging from Ordinary Linear Regression or more advanced techniques such as ML models such as LSTMs networks. Field results \u00b6 In this section, we will detail some of the MOS related results obtained during the sensor validation campaigns detailed below: University of Bologna : data collected from 23/January to 13/February. The measured pollutants with reference equipments were CO, NO 2 , NO, NOx and O3. Two prototype Smart Citizen Stations were deployed in two different sites, with two Smart Citizen Kits. University College Dublin : data collected from 27/March to 17/April. The measured pollutants with reference equipments were NO, NO 2 and NOX. One prototype Smart Citizen Station was deployed with two Smart Citizen Kits For both results shown below, we used an LSTM with 200 epochs training and the following structure: from keras.models import Sequential from keras.layers import Dense, Activation, LSTM, Dropout model = Sequential() layers = [50, 100, 1] model.add(LSTM(layers[0], return_sequences=True, input_shape=(train_X.shape[1], train_X.shape[2]))) model.add(Dropout(0.2)) model.add(LSTM(layers[1], return_sequences=False)) model.add(Dropout(0.2)) model.add(Dense(output_dim=layers[2])) model.add(Activation(\"linear\")) model.compile(loss='mse', optimizer='rmsprop') Carbon Monoxide \u00b6 The CO model included the following features: CO_{R}^{-1} CO_{R}^{-1} , CO_R^{-2} CO_R^{-2} , Temp Temp and Temperature^2 Temperature^2 . The results can be seen below: Nitrogen Dioxide \u00b6 The NO 2 model included the following features: NO~2~_{R} NO~2~_{R} , NO~2~_R^{-2} NO~2~_R^{-2} , Light, Temp Temp and Temperature^2 Temperature^2 . The results can be seen below: Warning This test campaign contains a short amount of data to be used as a training dataset for a LSTM algorithm. Therefore, this is just to considered as an use case example and further tests and data should be carried out to train broader models. Metal Oxide Sensors Implementation \u00b6 Heating stage \u00b6 The solution present at Urban Sensor Board V2.0 for MICS-4514 sensor's heaters excitation, pretends to make it compatible with a 3.3V global voltage source. The manufacturer reccomend the following circuit topology, with a global supply voltage of 5V. In the datasheet are collected the electrical nominal conditions for that resistors, in order to operate safely with the heater, without damaging it. Besides that, several other possible conditions could also damage early the heater resistors, like the fact of consider a pure PWM signal, with source 5V and subsequent dutty cycle, as excitation. Even if the frequency is relatively high (100kHz), the resistors are forced to operate briefly with 5V, and this accelerates the destruction of this part of the MICS sensor. So its is possible to provide the nominal voltages for heater resistors from a 3.3V source, if we replace the auxiliar resistors (from recomended topology) with corresponding values, to preserve the total power dissipated and current at same normal operating conditions. Even more, we can upgrade the function of the auxiliar resistors adding a capacitor to form a passive RC filter. In the DC or continuous operation, the capacitor is fully charged and the current is limited by the auxiliar resistor. In AC or pulsed operation, the capacitor can be selected to remove this AC component, and feed the heater resistor with a nearly constant voltage or at least with small variations (<1%). The source for the PWM signal must be buffered, because the resistive load of the system demands currents avobe the SAMD21 can supply. For this purpose, the solution selected is to use a digital hex-inverter buffer, which can drive up to 32mA with each output pin, wich we can paralelize to operate under propper safety factor for the buffer. Simulations \u00b6 The first simulations and given values leads to the selection of the RC components values if we set a PWM frequency around 40 kHz. To evaluate the R part of the filter, is needed to take into account the output resistance of the hex-inverter buffer. Prototypes \u00b6 We build the circuit into a protoboard, with several IC HEX-INV manufacturers, based on the following schematic: The measures are sumarized in the following table, in which we compare four pre-selected devices, which can fit in our application for size an price considerations. Four cases with paralellized inverters, for each device were performed: pasive load 70R test with DC input, and three tests with 10R+Rheater load at DC input, 60% dutty cycle and 30% dutty cycle. The 74LCX04FT(AE) was selected because it has the lowest LOW output level (0.45V,0.22V), which is considered here as the quality (or close to ideal) of the square wave input source. Final implementation \u00b6 The solution implemented in the PCB, has a constant auxilar R (10R+Rout_buff), and constant C (47uF), and also operates at consatant frequency, then, the output power regulation is based on the PWM's dutty cycle. The following circuit represent the implemented schematic. Operation \u00b6 First of all, is needed to know the real implemented Rheater of each sensor (which may vary among devices and time), and can be estimated by measuring the V_heater_* at 100% dutty cycle, then: Where Rint_buff can be aproximated with 4 Ohm resistor. The desired_reference_voltage is function of the desired_power_Rheater and dutty cycle. If we set 80mW we can use the value of the Rheater to obtain desired_reference_voltage through tis formula: (Take into account this resistor has a drift over time, therefore is recomended to take periodic measurements of the value of Rheater itself, and check the output power reachability). With selected parameters, after 2ms of PWM operation, the RC reaches the permanent, and then is recomended to take measurements of V_HEATER_ . The loop can be closed to determine the dutty cycle as function of the difference (desired_reference_voltage \u2013 V_HEATER_ (averaged)). Is recomended to average several samples to remove the AC part of the signal. The measured DC signal has a noise of \u00b120mV peak to peak (with triangular distribution). The sign of the PWM signal is inverted due to the action of the inverter, then, a desired x% dutty is obtained as 100%-x%. As initial PWM aproximation to begin to converge close to the regulated dutty cycle can be obtained through this simplification: References \u00b6 Practical Use of Metal Oxide Semiconductor Gas Sensors for Measuring Nitrogen Dioxide and Ozone in Urban Environments \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 Modelling Of Water Adsorption On SnO 2 Surface \u21a9 \u21a9 \u21a9 MICS-4514 Datasheet \u21a9 Frequently-Asked-Questions-for-MiCS-Gas-Sensors \u21a9 SGX Metal Oxide Gas Sensors - How to use and how they perform \u21a9 Sensors 2017, 17, 1653 \u21a9","title":"About the CO-NO2 MOs"},{"location":"Components/sensors/air/SGX%20MICS/#about-co-no2-metal-oxide-sensors","text":"The SGX Mics is a Metal Oxide Resistive sensor capable of reacting to different substances in the atmosphere. In a simplified way, it is comprised of two main elements: A SnO 2 substrate that acts as a sensor element A heater element to keep the substrate in an optimal working area The SnO 2 is a chemically sensitive metal oxide which has interactions with molecules to be detected in the target gas. The reactions that can occur on SnO 2 surface are adsorption and catalytic reactions , which basically mean that the gas molecules can be adsorbed onto the surface or can catalyse reactions (trigger or enhance them). They take place at the so called active sites or grain boundaries, which are areas where the grains that constitute the sensor resistance are in contact with the air (e.g. with metallic contacts). Hence, metal oxide substrate is basically a collection of sites at which different molecules can be absorbed and therefore interact in various manners with the species present in the atmosphere: either through catalytic reaction, surface reaction, grain boundary reaction ( among others ). 2 . The sensor element is typically heated to a few hundred degrees (\u00baC) using a small resistive heater . The regions within the sensor can be described as in Peterson et al. 1 : the surface, which interacts with the gas, the bulk, which is unaffected by it, and the particle boundary, which lies in between these two . The particle boundary is situated at a distance from any material exposed to the atmosphere into the sensor that chemical electrostatic effects can propagate (the so called Debye length), and this is related to the material\u2019s physical properties. At high temperatures, oxygen atoms bond onto the boundary, extracting electrons in the process from the semiconductor\u2019s surface region. The oxygen either then directly reacts with ambient gases, or these gases also bond onto the sensor, which causes more charge carriers to be withdrawn or injected into the surface region. All these effects change the sensor resistance and it is measured accordingly in 1 : In the case of the SGX 4514, the detection of the pollution gases is achieved by measuring the sensing resistance of both sensors. In a generic way, we could characterise the sensor resistance as follows: RED sensor resistance decreases in the presence of CO and hydrocarbons. OX sensor resistance increases in the presence of NO 2 . Finally, the chemical reactions within the resistive element are directly related to temperature and follow an Arrhenius equation type of behaviour. Each sensor's type has a different optimal operation temperature, which is translated into different heating powers for the heater element. Depending on the heating power and transition speeds, different reactions can be facilitated and this can lead to positive effects such as sensor clean up or battery compsuption savings, for example, when heated up in a pulsed profile. On the other hand, it can facilitate sensor poisoning or ageing, which highlights the need of proper sensor characterisation.","title":"About CO-NO2 Metal Oxide Sensors"},{"location":"Components/sensors/air/SGX%20MICS/#sensor-calibration","text":"The SGX4514 is a low cost sensor originally ment to detect instances or trends of target gas in the atmosphere 4 5 . The applications intended for these sensors are \u2018event sensing\u2018 applications and the level of accuracy required is not necessarily within regulatory standards. Furthermore, these sensors should not be used with safety related issues. However, despite the low cost nature of these sensors, they have been subject of a great deal of research 1 2 3 and have been reported to give considerably good results in field applications. Before delving into the details of sensor calibration, we will try to understand what these sensors are and how they should be handled. Some important definitions are: Sensor baseline resistance : is the resistance that the sensor exhibits when it's not powered Sensor sensitivity : is the resistance variation with variations in the target gas Sensor cross-sensitivity : is the resistance variation with variations of gases other than the target gas Sensor poisoning : an irreversible resistance variation provoked by the reaction of gases other than the target gas Source: Peterson et al. 1 Peterson et al. 1 describes the various types of interactions between atmospheric gases and a MOS sensor surface. In the image above, the leftmost region describes the unpowered behaviour, or base resistance . The three other regions of the diagram describe different processes that actually occur simultaneously to varying degrees. The sensor\u2019s output is the resistance across the whole of the sensor material, which forms a resistor network with contributions from both the bulk and surface regions. The model described in 1 also explains the wide variation in base resistance between individual sensors of the same type, as the random nature of the surface geometry means an equally random network of resistances. This diagram is a two-dimensional representation of a three-dimensional material; in an actual sensor, the sensitive region is spread into the surface with a distance dependent on the grain size and arrangement resulting from the sintering. Each sensor will then have a different resistance in air and how much this baseline resistance changes with the concentration of the target gas will also differ (what we defined above as sensitivity). Therefore to convert from resistance readings to concentration it is necessary to derive a calibration curve for each sensor . This will require measuring the resistances in air and at a number of gas concentrations over the desired range. It is important that the concentrations are in a background of air as Oxygen is needed for the sensor to work correctly. As stated in 2 , the sensor\u2019s response is only partially a function of the amount of gas to which the surface is exposed. Instead, the sensor will have a baseline resistance that is related to the bulk and particle boundary resistance. Because of the random geometry of the granular sensor surface, the baseline resistance will vary between individual sensors. The change in resistance with the change in gas concentration is generally not a linear response. The response can be measured and fitted to a polynomial relationship , with interactions from other metrics such as temperature, humidity and other gases. It has been proved that air flow around the sensor yields better sensor reactivity, and that the usage of PTFE filters also helps reducing cross-sensitivity and sensor poisoning. An important practical consideration with any in situ air quality sensor design is ensuring adequate flow of sampling air through the device. Stale air inside a casing will produce unrepresentative results , and even sensors mounted outside a casing might not get a properly-mixed sample. Source: Peterson et al. 1 Although the deployment of multiple different sensors can compensate for the cross-sensitivity issues in calibration, it cannot eliminate it. MOS sensors can thus be used only in situations where any interfering species can either be measured by other means, or they must be calibrated regularly and used in locations where the background varies in concentration slowly compared with the target gases. As well, the sensor drift over time is an important issue that requires sensor recalibration over time. There are two major factors in the longevity of a sensor\u2019s calibration. The first is the natural degradation of the heater element, which becomes hotter over prolonged use and causes the sensor\u2019s response profile to vary. The second is the effect of slowly-varying interfering gases, which over the course of months shifts the sensor\u2019s baseline. The first problem may have an engineering solution, but the second will involve taking the results of the tests in an artificial atmosphere, identifying the most critical species and either measuring or possibly modelling their likely concentrations during deployments. An analytical approach to counteracting this drift might be \"merging calibrations\", where a sensor is calibrated at the start and end of a four-month campaign, and the coefficients gradually change from one end of the experiment run to the other. Having all this in mind, the sensor calibration we follow is comprised of the following steps: Sensor behaviour characterisation under different temperature profiles Sensor baseline and sensitivity characterisation in controlled conditions Sensor deployment with reference measurements collocation and model calibration The use of deployment campaigns is of utmost importance in order to develop sensor models that are reality proof . With the possibility of collecting the data with the SmartCitizen Platform and the data treatment provided by the Sensor Calibration Framework , we are able to iterate over the different sensor calibration possibilities, ranging from Ordinary Linear Regression or more advanced techniques such as ML models such as LSTMs networks.","title":"Sensor Calibration"},{"location":"Components/sensors/air/SGX%20MICS/#field-results","text":"In this section, we will detail some of the MOS related results obtained during the sensor validation campaigns detailed below: University of Bologna : data collected from 23/January to 13/February. The measured pollutants with reference equipments were CO, NO 2 , NO, NOx and O3. Two prototype Smart Citizen Stations were deployed in two different sites, with two Smart Citizen Kits. University College Dublin : data collected from 27/March to 17/April. The measured pollutants with reference equipments were NO, NO 2 and NOX. One prototype Smart Citizen Station was deployed with two Smart Citizen Kits For both results shown below, we used an LSTM with 200 epochs training and the following structure: from keras.models import Sequential from keras.layers import Dense, Activation, LSTM, Dropout model = Sequential() layers = [50, 100, 1] model.add(LSTM(layers[0], return_sequences=True, input_shape=(train_X.shape[1], train_X.shape[2]))) model.add(Dropout(0.2)) model.add(LSTM(layers[1], return_sequences=False)) model.add(Dropout(0.2)) model.add(Dense(output_dim=layers[2])) model.add(Activation(\"linear\")) model.compile(loss='mse', optimizer='rmsprop')","title":"Field results"},{"location":"Components/sensors/air/SGX%20MICS/#carbon-monoxide","text":"The CO model included the following features: CO_{R}^{-1} CO_{R}^{-1} , CO_R^{-2} CO_R^{-2} , Temp Temp and Temperature^2 Temperature^2 . The results can be seen below:","title":"Carbon Monoxide"},{"location":"Components/sensors/air/SGX%20MICS/#nitrogen-dioxide","text":"The NO 2 model included the following features: NO~2~_{R} NO~2~_{R} , NO~2~_R^{-2} NO~2~_R^{-2} , Light, Temp Temp and Temperature^2 Temperature^2 . The results can be seen below: Warning This test campaign contains a short amount of data to be used as a training dataset for a LSTM algorithm. Therefore, this is just to considered as an use case example and further tests and data should be carried out to train broader models.","title":"Nitrogen Dioxide"},{"location":"Components/sensors/air/SGX%20MICS/#metal-oxide-sensors-implementation","text":"","title":"Metal Oxide Sensors Implementation"},{"location":"Components/sensors/air/SGX%20MICS/#heating-stage","text":"The solution present at Urban Sensor Board V2.0 for MICS-4514 sensor's heaters excitation, pretends to make it compatible with a 3.3V global voltage source. The manufacturer reccomend the following circuit topology, with a global supply voltage of 5V. In the datasheet are collected the electrical nominal conditions for that resistors, in order to operate safely with the heater, without damaging it. Besides that, several other possible conditions could also damage early the heater resistors, like the fact of consider a pure PWM signal, with source 5V and subsequent dutty cycle, as excitation. Even if the frequency is relatively high (100kHz), the resistors are forced to operate briefly with 5V, and this accelerates the destruction of this part of the MICS sensor. So its is possible to provide the nominal voltages for heater resistors from a 3.3V source, if we replace the auxiliar resistors (from recomended topology) with corresponding values, to preserve the total power dissipated and current at same normal operating conditions. Even more, we can upgrade the function of the auxiliar resistors adding a capacitor to form a passive RC filter. In the DC or continuous operation, the capacitor is fully charged and the current is limited by the auxiliar resistor. In AC or pulsed operation, the capacitor can be selected to remove this AC component, and feed the heater resistor with a nearly constant voltage or at least with small variations (<1%). The source for the PWM signal must be buffered, because the resistive load of the system demands currents avobe the SAMD21 can supply. For this purpose, the solution selected is to use a digital hex-inverter buffer, which can drive up to 32mA with each output pin, wich we can paralelize to operate under propper safety factor for the buffer.","title":"Heating stage"},{"location":"Components/sensors/air/SGX%20MICS/#simulations","text":"The first simulations and given values leads to the selection of the RC components values if we set a PWM frequency around 40 kHz. To evaluate the R part of the filter, is needed to take into account the output resistance of the hex-inverter buffer.","title":"Simulations"},{"location":"Components/sensors/air/SGX%20MICS/#prototypes","text":"We build the circuit into a protoboard, with several IC HEX-INV manufacturers, based on the following schematic: The measures are sumarized in the following table, in which we compare four pre-selected devices, which can fit in our application for size an price considerations. Four cases with paralellized inverters, for each device were performed: pasive load 70R test with DC input, and three tests with 10R+Rheater load at DC input, 60% dutty cycle and 30% dutty cycle. The 74LCX04FT(AE) was selected because it has the lowest LOW output level (0.45V,0.22V), which is considered here as the quality (or close to ideal) of the square wave input source.","title":"Prototypes"},{"location":"Components/sensors/air/SGX%20MICS/#final-implementation","text":"The solution implemented in the PCB, has a constant auxilar R (10R+Rout_buff), and constant C (47uF), and also operates at consatant frequency, then, the output power regulation is based on the PWM's dutty cycle. The following circuit represent the implemented schematic.","title":"Final implementation"},{"location":"Components/sensors/air/SGX%20MICS/#operation","text":"First of all, is needed to know the real implemented Rheater of each sensor (which may vary among devices and time), and can be estimated by measuring the V_heater_* at 100% dutty cycle, then: Where Rint_buff can be aproximated with 4 Ohm resistor. The desired_reference_voltage is function of the desired_power_Rheater and dutty cycle. If we set 80mW we can use the value of the Rheater to obtain desired_reference_voltage through tis formula: (Take into account this resistor has a drift over time, therefore is recomended to take periodic measurements of the value of Rheater itself, and check the output power reachability). With selected parameters, after 2ms of PWM operation, the RC reaches the permanent, and then is recomended to take measurements of V_HEATER_ . The loop can be closed to determine the dutty cycle as function of the difference (desired_reference_voltage \u2013 V_HEATER_ (averaged)). Is recomended to average several samples to remove the AC part of the signal. The measured DC signal has a noise of \u00b120mV peak to peak (with triangular distribution). The sign of the PWM signal is inverted due to the action of the inverter, then, a desired x% dutty is obtained as 100%-x%. As initial PWM aproximation to begin to converge close to the regulated dutty cycle can be obtained through this simplification:","title":"Operation"},{"location":"Components/sensors/air/SGX%20MICS/#references","text":"Practical Use of Metal Oxide Semiconductor Gas Sensors for Measuring Nitrogen Dioxide and Ozone in Urban Environments \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 Modelling Of Water Adsorption On SnO 2 Surface \u21a9 \u21a9 \u21a9 MICS-4514 Datasheet \u21a9 Frequently-Asked-Questions-for-MiCS-Gas-Sensors \u21a9 SGX Metal Oxide Gas Sensors - How to use and how they perform \u21a9 Sensors 2017, 17, 1653 \u21a9","title":"References"},{"location":"Components/sensors/soil/Soil%20Moisture%20Sensors/","text":"Soil Moisture Sensor \u00b6 The Chirp Sensor is a low cost moisture and temperature sensor developed by WeMakeThings : a hackers and engineers collective based in Vilnius, Lithuania. Their hardware and software are fully open-source, and it can be easily integrated but also replicated and customized for new projects. The sensor uses capacitive sensing to measure soil's moisture. A 1MHz square wave is output from the chip through a resistor into a big pad that, together with the surrounding ground plane, it forms a parasitic capacitor. The resistor and the capacitor create a low pass filter which cut-off frequency changes with changing capacitance. The soil around the sensor acts as an electrolyte whose dielectric constant changes depending on the amount of moisture in it, so the capacitance of our makeshift capacitor changes too. The filtered square wave is then fed into a peak detector formed of out a diode and a capacitor. An ADC measures this voltage in the microcontroller. The sensor also includes a temperature sensor with a calculated absolute measurement accuracy around 2%. There are different versions of the Chirp sensor, and for this application we chose the Chirp I2C sensor. The sensor was integrated on to the SCK's firmware, and it is automatically recognized by the board once it is plugged into the SCK using the Aux sensor connector. A Grove 4 pin Female Jumper to Grove will need to be used with the sensor to connect it to the SCK. The original Chirp sensors come coated with PRF202 - a moisture resistant varnish for electronics, but it is not enough for actual deployment. For such, one must add additional protection to the whole sensor. We suggest polyester or epoxy resin. However, you must note that sensitivity of the sensor will decrease depending on how thick the layer you are going to apply and might need to be recalibrated. We also recommend covering the electronics with heat shrink to fully waterproof the sensor. Some versions already include a pre-ruggedized sensor, which is a recommended solution for a faster use. Sensor validation \u00b6 Three Chirp sensors were compared to the Parrot Flower Power (now discontinued). The Flower Power can measure several metrics, such as light, temperature, fertilizer and soil moisture. In this test, we compared the soil moisture readings for three Flower Parrot sensors, compared to three Chirp sensors. Both sensors show a good behaviour and the values can be correlated with good R2 scores. The approach for this low-cost sensors, in general, should be more qualitative than quantitative (analyse the trends rather than the absolute values), since their values appear to differ between sensors, even when normalised. In the particular case of the Chirp sensor, the sensor seems to be fairly normalised with simply a two calibration values (water and air) as a first approach.","title":"Soil Moisture Sensors"},{"location":"Components/sensors/soil/Soil%20Moisture%20Sensors/#soil-moisture-sensor","text":"The Chirp Sensor is a low cost moisture and temperature sensor developed by WeMakeThings : a hackers and engineers collective based in Vilnius, Lithuania. Their hardware and software are fully open-source, and it can be easily integrated but also replicated and customized for new projects. The sensor uses capacitive sensing to measure soil's moisture. A 1MHz square wave is output from the chip through a resistor into a big pad that, together with the surrounding ground plane, it forms a parasitic capacitor. The resistor and the capacitor create a low pass filter which cut-off frequency changes with changing capacitance. The soil around the sensor acts as an electrolyte whose dielectric constant changes depending on the amount of moisture in it, so the capacitance of our makeshift capacitor changes too. The filtered square wave is then fed into a peak detector formed of out a diode and a capacitor. An ADC measures this voltage in the microcontroller. The sensor also includes a temperature sensor with a calculated absolute measurement accuracy around 2%. There are different versions of the Chirp sensor, and for this application we chose the Chirp I2C sensor. The sensor was integrated on to the SCK's firmware, and it is automatically recognized by the board once it is plugged into the SCK using the Aux sensor connector. A Grove 4 pin Female Jumper to Grove will need to be used with the sensor to connect it to the SCK. The original Chirp sensors come coated with PRF202 - a moisture resistant varnish for electronics, but it is not enough for actual deployment. For such, one must add additional protection to the whole sensor. We suggest polyester or epoxy resin. However, you must note that sensitivity of the sensor will decrease depending on how thick the layer you are going to apply and might need to be recalibrated. We also recommend covering the electronics with heat shrink to fully waterproof the sensor. Some versions already include a pre-ruggedized sensor, which is a recommended solution for a faster use.","title":"Soil Moisture Sensor"},{"location":"Components/sensors/soil/Soil%20Moisture%20Sensors/#sensor-validation","text":"Three Chirp sensors were compared to the Parrot Flower Power (now discontinued). The Flower Power can measure several metrics, such as light, temperature, fertilizer and soil moisture. In this test, we compared the soil moisture readings for three Flower Parrot sensors, compared to three Chirp sensors. Both sensors show a good behaviour and the values can be correlated with good R2 scores. The approach for this low-cost sensors, in general, should be more qualitative than quantitative (analyse the trends rather than the absolute values), since their values appear to differ between sensors, even when normalised. In the particular case of the Chirp sensor, the sensor seems to be fairly normalised with simply a two calibration values (water and air) as a first approach.","title":"Sensor validation"},{"location":"Components/sensors/soil/Tensiometer/","text":"Tensiometer \u00b6 WIP This version is a WIP but is not fully functional with the SCK 2.1. It is shown here as a showcase of the project's capabilities. Have a look at the forum or drop us an email to discuss this. Check the source files . Soil Moisture data as the one provided by the Chirp Moisture Sensor is interesting for research, but when it comes to crops irrigation management, we usually like to know the soil water tension (SWT). That is because Soil Moisture in water is not directly related to the water plants roots might be able to extract because it is deeply affected by the soil composition. Even soil irrigation can be inferred from soil moisture when the soil type is known we think a soil tensiometer. Also when it is a simple solution, it is a useful tool for crops management. The design is entirely open source and it is deeply inspired by the work of Reinier Van der Lee from the Vinduino project , using an already calibrated commercial probe like the Watermark 200SS9 . The sensor itself is straightforward and it consists of two stainless steel screws that work as electrodes cast inside a piece of plaster and covered by a plastic mesh to prevent erosion. As water is added more electrons can pass between the electrodes of the probe reducing the amount of resistance between them. By using this range of values, you can determine the amount of water that exists in your soil. To avoid interferences and degradation of the electrodes the design only applies voltage for a very short time and uses alternating electric polarities. For the sensor to work, we need a minimal circuit that uses two resistors and two diodes. The resistors work together with the electrodes to build a voltage divider. We can calculate the resistance value between the two electrodes by knowing the value of the resistors and the voltage. However to be able to alternate the electric current we need to duplicate the circuit and add two diodes. In total, we need 4 Pins to be connected to a microcontroller like the Arduino or the Smart Citizen Kit.","title":"Tensionmenter"},{"location":"Components/sensors/soil/Tensiometer/#tensiometer","text":"WIP This version is a WIP but is not fully functional with the SCK 2.1. It is shown here as a showcase of the project's capabilities. Have a look at the forum or drop us an email to discuss this. Check the source files . Soil Moisture data as the one provided by the Chirp Moisture Sensor is interesting for research, but when it comes to crops irrigation management, we usually like to know the soil water tension (SWT). That is because Soil Moisture in water is not directly related to the water plants roots might be able to extract because it is deeply affected by the soil composition. Even soil irrigation can be inferred from soil moisture when the soil type is known we think a soil tensiometer. Also when it is a simple solution, it is a useful tool for crops management. The design is entirely open source and it is deeply inspired by the work of Reinier Van der Lee from the Vinduino project , using an already calibrated commercial probe like the Watermark 200SS9 . The sensor itself is straightforward and it consists of two stainless steel screws that work as electrodes cast inside a piece of plaster and covered by a plastic mesh to prevent erosion. As water is added more electrons can pass between the electrodes of the probe reducing the amount of resistance between them. By using this range of values, you can determine the amount of water that exists in your soil. To avoid interferences and degradation of the electrodes the design only applies voltage for a very short time and uses alternating electric polarities. For the sensor to work, we need a minimal circuit that uses two resistors and two diodes. The resistors work together with the electrodes to build a voltage divider. We can calculate the resistance value between the two electrodes by knowing the value of the resistors and the voltage. However to be able to alternate the electric current we need to duplicate the circuit and add two diodes. In total, we need 4 Pins to be connected to a microcontroller like the Arduino or the Smart Citizen Kit.","title":"Tensiometer"},{"location":"Data/Data%20Analysis/","text":"Sensor Analysis Framework \u00b6 When dealing with sensor data, specially with low cost sensors, a great part of the effort needs to be dedicated to data analysis . After a careful data collection, this stage of our experiments is fundamental to extract meaningful conclusions and prepare reports from them. For this reason, we have developed a data analysis framework that we call the Sensor Analysis Framework . In this section, we will detail how this framework is built, how to install it, and make most use of it. We care for open science \u00b6 The framework is writen in Python , and can be easily installed on any computer with simple pip install scdata . It is intended to provide an state-of-the art data analysis environment , adapted for the uses within the Smart Citizen Project, but that can be easily expanded for other use cases. The ultimate purpose of the framework, is to allow for reproducible research by providing a set of tools that can are replicable, and expandable among researchers and users alike, contributing to FAIR data principles . By SangyaPundir - Own work , CC BY-SA 4.0 Raw and processed data All the raw sensor data from the devices is sent to the Platform and processed outside of the sensors. Raw data is never deleted , and the postprocessing of it can be traced back to it's origin by using the sensor blueprint information. This way, we guarantee openness and accesibility of the data for research purposes. Check this guide to learn more about how we postprocess the data of the sensors and how to make it your own way. The framework integrates with the Smart Citizen API and helps with the analysis of large amounts of data in an efficient way . It also integrates functionality to generate reports in html or pdf format, and to publish datasets and documents to Zenodo . More familiar with R? R users won't be left stranded. RPY2 provides functionality to send data from python to R quite easily. Check the source code How we use it \u00b6 The main purpose of the framework is to make our lives easier when dealing with various sources of data. Let's see different use cases: Get sensor data and visualise it This is probably the most common use case: exploring data in a visual way. The framework allows downloading data from the Smart Citizen API or other sources , as well as to load local csv files. Then, different data explorations options are readily available, and not limited to them due to the great visualisation tools in python . Finally, you can generate html, or pdf reports for sharing the results. Examples Check the examples in the Github Repository Organise your data Handling a lot of different sensors can be at times difficult to organise and have traceability. For this, we created the concept of test , which groups a set of devices, potentially from various sources. This is convenient since metadata can be addeed to the test instance describing, for instance, what was done, the calibration data for the device, necessary preprocessing for the data, etc. This test can be later loaded in a separate analysis session, modified or expanded, keeping all the data findable. Some example metadata that can be stored would be: Test Location, date and author Kit type and reference Sensor calibration data or reference Availability of reference equipment measurement and type A brief schema of the test structure is specified below: Check the guide Check the guide on how to organise sensor data Clean sensor data Sensor data never comes clean and tidy in the real world. For this reason, data can be cleaned with simple, and not that simple algorithms for later processing. Several functions are already implemented (filtering with convolution, Kalman filters , anomaly detection, ...), and more can be implemented in the source files. Model sensor data Low cost sensor data needs calibration, with more or less complex regression algorithms. This can be done at times with a simple linear regression, but it is not the only case. Sensors generally present non-linearities, and linear models might not be the bests at handling the data robustly. For this, a set of models ir rightly implemented, using the power of common statistics and machine learning frameworks such as sci-kit learn , tensorflow , keras , and stats models . Guidelines on sensor development Check our guidelines on sensor deployment to see why this is important in some cases. Batch analysis Automatisation of all this tools can be very handy at times, since we want to spend less time programming analysis tools than actually doing analysis. Tasks can be programmed in batch to be processed automatically by the framework in an autonomous way. For instance, some interesting use cases of this could be: Downloading data from many devices, do something (clean it) and export it to .csv Downloading data and generate plots, extract metrics and generate reports for many devices Testing calibration models with different hyperparameters, modeling approaches and datasets Share data One important aspect of our research is to share the data so that others can work on it, and build on top of our results, validate the conclusions or simply disseminate the work done. For this, integration with zenodo is provided to share datasets and reports: Have a look at the features within the framework: Tools to retrieve data from the Smart Citizen's API or to load them from local sources (in csv format, compatible with the SCK SD card data) A data handling framework based on the well known Pandas package An exploratory data analysis tools to study sensor behaviour and correlations with different types of plots A sensor model calibration toolset with classical statistical methods such as linear regression, ARIMA, SARIMA-X, as well as more modern Machine Learning techniques with the use of LSTM networks, RF (Random Forest), SVR (Support Vector Regression) models for sequential data prediction and forecasting Methods to statistically validate and study the performance of these models, export and store them As a bonus, an interface to convert the python objects into the statistical analysis language R Info Check the guide on how to set it up here Loading and managing the data \u00b6 Data can be downloaded from the SmartCitizen API with the KIT IDs or using csv. In order to tidy up the data, the recordings are organised around the concept of test , an entity containing all the kits' references, sensors and general information regarding the conditions at which the measurements were carried out: Test Location, date and author Kit type and reference Sensor calibration data or reference Availability of reference equipment measurement and type A brief schema of the test structure is specified below: All this structure is filled up at the test creation with a dedicated script, saving future time to understand mismatching reading units, timestamps formats and so on. Exploratory data analysis \u00b6 The device's data can be explored visually with different types of plots. It can also be generated in batch with descriptor files, as shown in the guide . Some of the functionalities implemented are: Time series visualisation Correlation plot and pairs plot Correlogram Heatmaps Violin plots This section uses interactive plotting frameworks as Plotly and the well known matplotlib to serve different exploratory analysis tools. Data models \u00b6 The data models section includes tools to prepare, train and evaluate models coming from different devices within a test in order to calibrate your sensors. It provides an interface with common statistics and machine learning frameworks such as sci-kit learn , tensorflow , keras , and stats models . These frameworks provide tools to perform: Pre-processing stage: Outliers detection with Holt-Winters methods (triple exponential smoothing) and XGBoost Regressors Data study and analysis for multicollinearity and autocorrelation in order to determine significant variables and avoid model overfit with non-significant exogenous variables Trend decomposition and seasonality analysis Model stage Baseline model estimations in order to assess minimum targets for model quality (using naive regression models) Ordinary Linear Regression techniques for univariate and multivariate linear and non-linear independent variables ARIMA-X (Autorregresive, Integrated, Moving Average) models with exogenous variables using Box-Jenkis parameter selection methods Supervised learning techiques: Single and multiple layers LSTM (Long-Thort Term Memory) networks with configurable structure Random Forest and Support Vector methods for regression An example of the model is shown below for the estimation of the SGX4514 CO with the use of the rest of the Kit's available sensor, using a single layer LSTM network only two weeks of training: Depending on the model selected, different validation techniques are implemented, in order to verify models' assumptions and avoid data misinterpretation (i.e. Durbin Watson or Jacque Bera test for linear regression). Finally, it is important to follow carefully the instructions as stated in the notebook, in order to avoid low model quality. Source files \u00b6 Download Check the source code","title":"Data Analysis"},{"location":"Data/Data%20Analysis/#sensor-analysis-framework","text":"When dealing with sensor data, specially with low cost sensors, a great part of the effort needs to be dedicated to data analysis . After a careful data collection, this stage of our experiments is fundamental to extract meaningful conclusions and prepare reports from them. For this reason, we have developed a data analysis framework that we call the Sensor Analysis Framework . In this section, we will detail how this framework is built, how to install it, and make most use of it.","title":"Sensor Analysis Framework"},{"location":"Data/Data%20Analysis/#we-care-for-open-science","text":"The framework is writen in Python , and can be easily installed on any computer with simple pip install scdata . It is intended to provide an state-of-the art data analysis environment , adapted for the uses within the Smart Citizen Project, but that can be easily expanded for other use cases. The ultimate purpose of the framework, is to allow for reproducible research by providing a set of tools that can are replicable, and expandable among researchers and users alike, contributing to FAIR data principles . By SangyaPundir - Own work , CC BY-SA 4.0 Raw and processed data All the raw sensor data from the devices is sent to the Platform and processed outside of the sensors. Raw data is never deleted , and the postprocessing of it can be traced back to it's origin by using the sensor blueprint information. This way, we guarantee openness and accesibility of the data for research purposes. Check this guide to learn more about how we postprocess the data of the sensors and how to make it your own way. The framework integrates with the Smart Citizen API and helps with the analysis of large amounts of data in an efficient way . It also integrates functionality to generate reports in html or pdf format, and to publish datasets and documents to Zenodo . More familiar with R? R users won't be left stranded. RPY2 provides functionality to send data from python to R quite easily. Check the source code","title":"We care for open science"},{"location":"Data/Data%20Analysis/#how-we-use-it","text":"The main purpose of the framework is to make our lives easier when dealing with various sources of data. Let's see different use cases: Get sensor data and visualise it This is probably the most common use case: exploring data in a visual way. The framework allows downloading data from the Smart Citizen API or other sources , as well as to load local csv files. Then, different data explorations options are readily available, and not limited to them due to the great visualisation tools in python . Finally, you can generate html, or pdf reports for sharing the results. Examples Check the examples in the Github Repository Organise your data Handling a lot of different sensors can be at times difficult to organise and have traceability. For this, we created the concept of test , which groups a set of devices, potentially from various sources. This is convenient since metadata can be addeed to the test instance describing, for instance, what was done, the calibration data for the device, necessary preprocessing for the data, etc. This test can be later loaded in a separate analysis session, modified or expanded, keeping all the data findable. Some example metadata that can be stored would be: Test Location, date and author Kit type and reference Sensor calibration data or reference Availability of reference equipment measurement and type A brief schema of the test structure is specified below: Check the guide Check the guide on how to organise sensor data Clean sensor data Sensor data never comes clean and tidy in the real world. For this reason, data can be cleaned with simple, and not that simple algorithms for later processing. Several functions are already implemented (filtering with convolution, Kalman filters , anomaly detection, ...), and more can be implemented in the source files. Model sensor data Low cost sensor data needs calibration, with more or less complex regression algorithms. This can be done at times with a simple linear regression, but it is not the only case. Sensors generally present non-linearities, and linear models might not be the bests at handling the data robustly. For this, a set of models ir rightly implemented, using the power of common statistics and machine learning frameworks such as sci-kit learn , tensorflow , keras , and stats models . Guidelines on sensor development Check our guidelines on sensor deployment to see why this is important in some cases. Batch analysis Automatisation of all this tools can be very handy at times, since we want to spend less time programming analysis tools than actually doing analysis. Tasks can be programmed in batch to be processed automatically by the framework in an autonomous way. For instance, some interesting use cases of this could be: Downloading data from many devices, do something (clean it) and export it to .csv Downloading data and generate plots, extract metrics and generate reports for many devices Testing calibration models with different hyperparameters, modeling approaches and datasets Share data One important aspect of our research is to share the data so that others can work on it, and build on top of our results, validate the conclusions or simply disseminate the work done. For this, integration with zenodo is provided to share datasets and reports: Have a look at the features within the framework: Tools to retrieve data from the Smart Citizen's API or to load them from local sources (in csv format, compatible with the SCK SD card data) A data handling framework based on the well known Pandas package An exploratory data analysis tools to study sensor behaviour and correlations with different types of plots A sensor model calibration toolset with classical statistical methods such as linear regression, ARIMA, SARIMA-X, as well as more modern Machine Learning techniques with the use of LSTM networks, RF (Random Forest), SVR (Support Vector Regression) models for sequential data prediction and forecasting Methods to statistically validate and study the performance of these models, export and store them As a bonus, an interface to convert the python objects into the statistical analysis language R Info Check the guide on how to set it up here","title":"How we use it"},{"location":"Data/Data%20Analysis/#loading-and-managing-the-data","text":"Data can be downloaded from the SmartCitizen API with the KIT IDs or using csv. In order to tidy up the data, the recordings are organised around the concept of test , an entity containing all the kits' references, sensors and general information regarding the conditions at which the measurements were carried out: Test Location, date and author Kit type and reference Sensor calibration data or reference Availability of reference equipment measurement and type A brief schema of the test structure is specified below: All this structure is filled up at the test creation with a dedicated script, saving future time to understand mismatching reading units, timestamps formats and so on.","title":"Loading and managing the data"},{"location":"Data/Data%20Analysis/#exploratory-data-analysis","text":"The device's data can be explored visually with different types of plots. It can also be generated in batch with descriptor files, as shown in the guide . Some of the functionalities implemented are: Time series visualisation Correlation plot and pairs plot Correlogram Heatmaps Violin plots This section uses interactive plotting frameworks as Plotly and the well known matplotlib to serve different exploratory analysis tools.","title":"Exploratory data analysis"},{"location":"Data/Data%20Analysis/#data-models","text":"The data models section includes tools to prepare, train and evaluate models coming from different devices within a test in order to calibrate your sensors. It provides an interface with common statistics and machine learning frameworks such as sci-kit learn , tensorflow , keras , and stats models . These frameworks provide tools to perform: Pre-processing stage: Outliers detection with Holt-Winters methods (triple exponential smoothing) and XGBoost Regressors Data study and analysis for multicollinearity and autocorrelation in order to determine significant variables and avoid model overfit with non-significant exogenous variables Trend decomposition and seasonality analysis Model stage Baseline model estimations in order to assess minimum targets for model quality (using naive regression models) Ordinary Linear Regression techniques for univariate and multivariate linear and non-linear independent variables ARIMA-X (Autorregresive, Integrated, Moving Average) models with exogenous variables using Box-Jenkis parameter selection methods Supervised learning techiques: Single and multiple layers LSTM (Long-Thort Term Memory) networks with configurable structure Random Forest and Support Vector methods for regression An example of the model is shown below for the estimation of the SGX4514 CO with the use of the rest of the Kit's available sensor, using a single layer LSTM network only two weeks of training: Depending on the model selected, different validation techniques are implemented, in order to verify models' assumptions and avoid data misinterpretation (i.e. Durbin Watson or Jacque Bera test for linear regression). Finally, it is important to follow carefully the instructions as stated in the notebook, in order to avoid low model quality.","title":"Data models"},{"location":"Data/Data%20Analysis/#source-files","text":"Download Check the source code","title":"Source files"},{"location":"Data/Low%20Cost%20Sensors%20Calibration/","text":"Low Cost Sensors Calibration \u00b6 Low cost sensor calibration and assessment poses a great challenge for data quality objectives. We follow this sensor calibration procedure , which can be split into three stages: Behaviour assesment : in laboratory conditions, serving as base testing for assessing general sensor behaviour. Characterisation : also in laboratory conditions, assess generic sensor parameters as sensitivity, zero and span. Modelisation with real world deployment : including other variables such as environmental factors and sensor cross-sensitivity. Each of these stages apply differently depending on the type of sensor. For instance the electrochemical sensors present in the Station are already characterised by the manufacturer, while the old SGX MICS4514 Metal Oxyde Sensors in the Urban Board of the Smart Citizen Kit are not. The different characteristics of these sensors make different calibration approaches to be carried out. Base calibration parameters need to be determined in controlled conditions. In this stage, the aim would be to find parameters such as: Sensor sensitivity : the sensor response per each ppm of target pollutant in nominal conditions Zero : the sensor reading in zero air (pure air at 25degC). Sensor response (t 90 ) Sensor range : maximum and minimum readings for the sensor Finally, after this initial calibration assessment, it is critical to gather as much data as possible from long term sensor deployments . These deployments should aim to cover the widest range of sensor exposure conditions, in order to generate robust models. While dealing with low cost sensors this stage is very important, as it is detailed in the sections below. These sensor deployments serve for two main purposes: to generate quantitative classification methods that can classify the air quality in predefined ranges (i.e. 'poor', 'fair', good'); and to generate predictive qualitative models for more accurate values. Either of them need large amounts of data if the models are aimed to be representative. Additionally, by the mere nature of the data and the sensors themselves, these models would need to be: Robusts to noise Capable of learning non-linear relationships Handle multivariate inputs Capable of learning temporal dependence These needs make machine learning methods great canditates for modeling the data. These methods are implemented in the Sensor Analysis Framework, as well as other more traditional linear methods. The combination of these algorithms with large amounts of data gathered during, for instance, the iScape project, offers a great opportunity to demonstrate the use of low cost sensors for air quality monitoring. Smart Citizen Kits \u00b6 Due to their construction, low-cost metal oxyde sensors suffer from high levels of spread in their baseline resistance and sensitivity. As well, these sensors are generally reactive to other pollutants in the atmosphere, with a low selectivity of the actual target pollutant and drifts in their behaviour can be seen after some weeks of exposure. As well, metal oxyde sensors show short and long term drifts in their calibrations. Ideally, a sensor characterisation in laboratory conditions is needed to assess sensitiviy, baseline resistances sensor-to-sensor spread, aiming to obtain normalising factors for each sensor or group of sensors. Even if possible, the variability of the sensor behaviour during the deployment stage, makes the individual characterisation and calibration of the Metal Oxyde sensors unrealistic. For this reason, indicative measurements are to be expected from this type of low cost sensors. More information about the sensors present in the urban board of the SCK can be found in this section . Smart Citizen Stations \u00b6 Electrochemical sensors These sensors can achieve significant accuracy, but they require a particular data post-processing that combines the measurement at the sensor electrodes with the sensor characterisation on the factory as well as other environmental parameters as air temperature and relative humidity (i.e. absolute humidity). Luckily the manufacturer of these sensors, Alphasense, provides us with that reference data. However, the complexity of the operations performed can not be done inside the sensing device as it uses advanced operations as well as historical data from the same device. For that reason, the data needs to be post processed using the Sensors Analysis Framework. The algorithm is in a beta stage and later it will be applied automatically on the data once it arrives at the platform. More details can be found in the Electrochemical sensor baseline methodology Section . This process doesn't require any on-site reference data but requires the data to be processed using the manufacturer calibration reference per sensor as well as other environmental values as temperature and humidity. PM sensor The selected PM sensor is internally characterised by the manufacturer and, it's readings are currently being evaluated. Preliminarily, the measurements can be as well improved when reference data is available, as some have noted that the PM sensors can be affected by relative humidity. Plantower PMS 5003 Read more on the Plantower PMS 5003 implementation on the PM Sensor Board .","title":"Low Cost Sensors Calibration"},{"location":"Data/Low%20Cost%20Sensors%20Calibration/#low-cost-sensors-calibration","text":"Low cost sensor calibration and assessment poses a great challenge for data quality objectives. We follow this sensor calibration procedure , which can be split into three stages: Behaviour assesment : in laboratory conditions, serving as base testing for assessing general sensor behaviour. Characterisation : also in laboratory conditions, assess generic sensor parameters as sensitivity, zero and span. Modelisation with real world deployment : including other variables such as environmental factors and sensor cross-sensitivity. Each of these stages apply differently depending on the type of sensor. For instance the electrochemical sensors present in the Station are already characterised by the manufacturer, while the old SGX MICS4514 Metal Oxyde Sensors in the Urban Board of the Smart Citizen Kit are not. The different characteristics of these sensors make different calibration approaches to be carried out. Base calibration parameters need to be determined in controlled conditions. In this stage, the aim would be to find parameters such as: Sensor sensitivity : the sensor response per each ppm of target pollutant in nominal conditions Zero : the sensor reading in zero air (pure air at 25degC). Sensor response (t 90 ) Sensor range : maximum and minimum readings for the sensor Finally, after this initial calibration assessment, it is critical to gather as much data as possible from long term sensor deployments . These deployments should aim to cover the widest range of sensor exposure conditions, in order to generate robust models. While dealing with low cost sensors this stage is very important, as it is detailed in the sections below. These sensor deployments serve for two main purposes: to generate quantitative classification methods that can classify the air quality in predefined ranges (i.e. 'poor', 'fair', good'); and to generate predictive qualitative models for more accurate values. Either of them need large amounts of data if the models are aimed to be representative. Additionally, by the mere nature of the data and the sensors themselves, these models would need to be: Robusts to noise Capable of learning non-linear relationships Handle multivariate inputs Capable of learning temporal dependence These needs make machine learning methods great canditates for modeling the data. These methods are implemented in the Sensor Analysis Framework, as well as other more traditional linear methods. The combination of these algorithms with large amounts of data gathered during, for instance, the iScape project, offers a great opportunity to demonstrate the use of low cost sensors for air quality monitoring.","title":"Low Cost Sensors Calibration"},{"location":"Data/Low%20Cost%20Sensors%20Calibration/#smart-citizen-kits","text":"Due to their construction, low-cost metal oxyde sensors suffer from high levels of spread in their baseline resistance and sensitivity. As well, these sensors are generally reactive to other pollutants in the atmosphere, with a low selectivity of the actual target pollutant and drifts in their behaviour can be seen after some weeks of exposure. As well, metal oxyde sensors show short and long term drifts in their calibrations. Ideally, a sensor characterisation in laboratory conditions is needed to assess sensitiviy, baseline resistances sensor-to-sensor spread, aiming to obtain normalising factors for each sensor or group of sensors. Even if possible, the variability of the sensor behaviour during the deployment stage, makes the individual characterisation and calibration of the Metal Oxyde sensors unrealistic. For this reason, indicative measurements are to be expected from this type of low cost sensors. More information about the sensors present in the urban board of the SCK can be found in this section .","title":"Smart Citizen Kits"},{"location":"Data/Low%20Cost%20Sensors%20Calibration/#smart-citizen-stations","text":"Electrochemical sensors These sensors can achieve significant accuracy, but they require a particular data post-processing that combines the measurement at the sensor electrodes with the sensor characterisation on the factory as well as other environmental parameters as air temperature and relative humidity (i.e. absolute humidity). Luckily the manufacturer of these sensors, Alphasense, provides us with that reference data. However, the complexity of the operations performed can not be done inside the sensing device as it uses advanced operations as well as historical data from the same device. For that reason, the data needs to be post processed using the Sensors Analysis Framework. The algorithm is in a beta stage and later it will be applied automatically on the data once it arrives at the platform. More details can be found in the Electrochemical sensor baseline methodology Section . This process doesn't require any on-site reference data but requires the data to be processed using the manufacturer calibration reference per sensor as well as other environmental values as temperature and humidity. PM sensor The selected PM sensor is internally characterised by the manufacturer and, it's readings are currently being evaluated. Preliminarily, the measurements can be as well improved when reference data is available, as some have noted that the PM sensors can be affected by relative humidity. Plantower PMS 5003 Read more on the Plantower PMS 5003 implementation on the PM Sensor Board .","title":"Smart Citizen Stations"},{"location":"Data/Sensor%20Platform/","text":"Sensor Platform \u00b6 The platform is a front and backend solution for ingesting, storing and interacting with public data with a particular focus on crowd sensing applications. We believe building modular and reusable software and using existing platforms is critical towards optimizing the research and development effort. Are all systems operational? Check the smartcitizen.me instance status in real time in the uptimerobot.com dashboard. Check the guides We prepared a series of guides to help you on the most common features you will use Onboarding Sensors Uploading SD Card Data Downloading data Want to learn more? Check the developers ready API Documentation Software components \u00b6 Smart Citizen Website : It aims to provide a visual website where the project environmental sensors can be accessed in near real time to facilitate the exploration of data with other contextual data (maps, keywords) and processed reports. This is especially important towards citizens engaging at each local site having a sense of ownership over a technology intervention has been associated with sustained community engagement (Balestrini et al. 2014) . The main instance its available at smartcitizen.me/kits . You can explore and contribute to the source . This is free software available under GNU Affero General Public License (AGPL). Smart Citizen API : The platform provides a REST interface for all the functionalities available on the Website. That allows applications to be developed on easily on top having access to all the features to create complex and rich tools. The main instance its available at api.smartcitizen.me . You can explore and contribute to the source . One examples of this tools is the Sensors Analysis Framework or the iSCAPE Virtual Living Lab , both developed during the iSCAPE project ) This is free software available under GNU Affero General Public License (AGPL). Onboarding app : It aims to facilitate the process of sensor setup to ensure that users, irrespective of technical expertise, can install the sensors. It guides the user through the process of the setup using simple language and a friendly graphic language. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. It exchange data with the core platform using the Smart Citizen API. The main instance its available at start.smartcitizen.me . There are also customized instances for specific projects such us onboarding.iscape.smartcitizen.me or start.decode.smartcitizen.me . You can explore and contribute to the source . This is free software available under a MIT License. Source files \u00b6 Check the source code","title":"Sensor Platform"},{"location":"Data/Sensor%20Platform/#sensor-platform","text":"The platform is a front and backend solution for ingesting, storing and interacting with public data with a particular focus on crowd sensing applications. We believe building modular and reusable software and using existing platforms is critical towards optimizing the research and development effort. Are all systems operational? Check the smartcitizen.me instance status in real time in the uptimerobot.com dashboard. Check the guides We prepared a series of guides to help you on the most common features you will use Onboarding Sensors Uploading SD Card Data Downloading data Want to learn more? Check the developers ready API Documentation","title":"Sensor Platform"},{"location":"Data/Sensor%20Platform/#software-components","text":"Smart Citizen Website : It aims to provide a visual website where the project environmental sensors can be accessed in near real time to facilitate the exploration of data with other contextual data (maps, keywords) and processed reports. This is especially important towards citizens engaging at each local site having a sense of ownership over a technology intervention has been associated with sustained community engagement (Balestrini et al. 2014) . The main instance its available at smartcitizen.me/kits . You can explore and contribute to the source . This is free software available under GNU Affero General Public License (AGPL). Smart Citizen API : The platform provides a REST interface for all the functionalities available on the Website. That allows applications to be developed on easily on top having access to all the features to create complex and rich tools. The main instance its available at api.smartcitizen.me . You can explore and contribute to the source . One examples of this tools is the Sensors Analysis Framework or the iSCAPE Virtual Living Lab , both developed during the iSCAPE project ) This is free software available under GNU Affero General Public License (AGPL). Onboarding app : It aims to facilitate the process of sensor setup to ensure that users, irrespective of technical expertise, can install the sensors. It guides the user through the process of the setup using simple language and a friendly graphic language. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. It exchange data with the core platform using the Smart Citizen API. The main instance its available at start.smartcitizen.me . There are also customized instances for specific projects such us onboarding.iscape.smartcitizen.me or start.decode.smartcitizen.me . You can explore and contribute to the source . This is free software available under a MIT License.","title":"Software components"},{"location":"Data/Sensor%20Platform/#source-files","text":"Check the source code","title":"Source files"},{"location":"Data/Smart%20Citizen%20API/","text":"Smart Citizen API \u00b6 The cloud-based data engine supporting: data ingestion, aggregation and retrieving. It is entirely independent of any web front-end exposing all the functionalities over a clear REST API. That allows applications to be developed on easily on top having access to all the features to create complex and rich tools. The main instance its available at api.smartcitizen.me . You can explore and contribute to the source . One examples of this tools is the Sensors Analysis Framework or the iSCAPE Virtual Living Lab , both developed during the iSCAPE project ) This is free software available under GNU Affero General Public License (AGPL). TL;DR Check the developers ready API Documentation Data Ingestion Flow \u00b6 As already described in the Supported Assets sections, above, the Platforms supports multiple sensor types and even data coming from other platforms. On the following section, we describe all the features supported when it comes to sending data to the platform. Ingestion protocols \u00b6 Two protocols are supported for data to be sent to the platform: MQTT and HTTP MQTT is the one used by constrained devices as the Citizen Sensors and the Living Lab Stations. It allows the devices to post data to the platform after they are registered. It also allows them to receive configuration options (i.e. sensors reading interval) and report errors (i.e. sensors are malfunctioning). HTTP is aimed at applications publishing data to the platform (i.e. an existing sensors platform that also wants to make all the data available to the platform). This API gives access to all the platform functionalities as it is part of the core Smart Citizen API. Over this API we are not just limited to publish data but to register new devices or even users. oth protocols support transport encryption with TLS to ensure secure communication between the client and the server over the Internet. Authorisation and authentication \u00b6 Knowing who posts what is a serious problem when it comes to hundreds of sensor data being published per minute. Constrained hardware devices using the MQTT API use a unique device token given to the device every time is registered on the platform. The token authenticates the devices against the platform, and it can be expired at any time to prevent a device to keep publishing. Instead, the HTTP API supports authentication using an OAuth2 or a private token. Both mechanisms work at a user level allowing a single process to manage all the devices created by a user. Kits blueprints \u00b6 Each device sensors configuration needs to be previously registered on the platform to ensure each datapoint published is associated with the required metadata. This information is called a Kit blueprint. The minimal blueprint includes all the necessary data that a user might provide to create a Kit. It is composed of Components, and those can reuse existing Sensors and Measurements. Sensors are the hardware or software components that record the data. Measurements are descriptions of what the sensors are recording. Data Storage \u00b6 Once the steps above are completed data is stored in a database cluster performing asynchronous masterless replication to ensure data backup and availability. Each datapoint is stored with the following items: Component : A reference to the component type that generated the datapoint. Device : A reference to the device that generated the datapoint. Raw Data : The datapoint as received to the platform Processed Data : The datapoint after applying post processing, when implemented. Timestamp : The time the datapoint was generated. Once stored historical data available via the Smart Citizen API. All the other services, as the Smart Citizen Webpage, access the data from there. The API also exposes a method where data is processed to a CSV file and email to the user. That allows loading the data offline to any software capable of dealing with CSV files (i.e. Microsoft Excel, MATLAB, etc.)","title":"Smart Citizen API"},{"location":"Data/Smart%20Citizen%20API/#smart-citizen-api","text":"The cloud-based data engine supporting: data ingestion, aggregation and retrieving. It is entirely independent of any web front-end exposing all the functionalities over a clear REST API. That allows applications to be developed on easily on top having access to all the features to create complex and rich tools. The main instance its available at api.smartcitizen.me . You can explore and contribute to the source . One examples of this tools is the Sensors Analysis Framework or the iSCAPE Virtual Living Lab , both developed during the iSCAPE project ) This is free software available under GNU Affero General Public License (AGPL). TL;DR Check the developers ready API Documentation","title":"Smart Citizen API"},{"location":"Data/Smart%20Citizen%20API/#data-ingestion-flow","text":"As already described in the Supported Assets sections, above, the Platforms supports multiple sensor types and even data coming from other platforms. On the following section, we describe all the features supported when it comes to sending data to the platform.","title":"Data Ingestion Flow"},{"location":"Data/Smart%20Citizen%20API/#ingestion-protocols","text":"Two protocols are supported for data to be sent to the platform: MQTT and HTTP MQTT is the one used by constrained devices as the Citizen Sensors and the Living Lab Stations. It allows the devices to post data to the platform after they are registered. It also allows them to receive configuration options (i.e. sensors reading interval) and report errors (i.e. sensors are malfunctioning). HTTP is aimed at applications publishing data to the platform (i.e. an existing sensors platform that also wants to make all the data available to the platform). This API gives access to all the platform functionalities as it is part of the core Smart Citizen API. Over this API we are not just limited to publish data but to register new devices or even users. oth protocols support transport encryption with TLS to ensure secure communication between the client and the server over the Internet.","title":"Ingestion protocols"},{"location":"Data/Smart%20Citizen%20API/#authorisation-and-authentication","text":"Knowing who posts what is a serious problem when it comes to hundreds of sensor data being published per minute. Constrained hardware devices using the MQTT API use a unique device token given to the device every time is registered on the platform. The token authenticates the devices against the platform, and it can be expired at any time to prevent a device to keep publishing. Instead, the HTTP API supports authentication using an OAuth2 or a private token. Both mechanisms work at a user level allowing a single process to manage all the devices created by a user.","title":"Authorisation and authentication"},{"location":"Data/Smart%20Citizen%20API/#kits-blueprints","text":"Each device sensors configuration needs to be previously registered on the platform to ensure each datapoint published is associated with the required metadata. This information is called a Kit blueprint. The minimal blueprint includes all the necessary data that a user might provide to create a Kit. It is composed of Components, and those can reuse existing Sensors and Measurements. Sensors are the hardware or software components that record the data. Measurements are descriptions of what the sensors are recording.","title":"Kits blueprints"},{"location":"Data/Smart%20Citizen%20API/#data-storage","text":"Once the steps above are completed data is stored in a database cluster performing asynchronous masterless replication to ensure data backup and availability. Each datapoint is stored with the following items: Component : A reference to the component type that generated the datapoint. Device : A reference to the device that generated the datapoint. Raw Data : The datapoint as received to the platform Processed Data : The datapoint after applying post processing, when implemented. Timestamp : The time the datapoint was generated. Once stored historical data available via the Smart Citizen API. All the other services, as the Smart Citizen Webpage, access the data from there. The API also exposes a method where data is processed to a CSV file and email to the user. That allows loading the data offline to any software capable of dealing with CSV files (i.e. Microsoft Excel, MATLAB, etc.)","title":"Data Storage"},{"location":"Guides/","text":"A modular tool for citizen action \u00b6 The guides in this section are aimed at creating a set of tools and resources around the SCK. This allows communities to develop their own sensing frameworks and strategies for participatory sensing. Find here guides that will help with making the best use of the Smart Citizen Kit, from a step-by-step guide on how to set up your kit to more advanced features like data analysis or using the SCK's shell .","title":"Main"},{"location":"Guides/#a-modular-tool-for-citizen-action","text":"The guides in this section are aimed at creating a set of tools and resources around the SCK. This allows communities to develop their own sensing frameworks and strategies for participatory sensing. Find here guides that will help with making the best use of the Smart Citizen Kit, from a step-by-step guide on how to set up your kit to more advanced features like data analysis or using the SCK's shell .","title":"A modular tool for citizen action"},{"location":"Guides/calibration/Air%20sensors/","text":"","title":"Air sensors"},{"location":"Guides/calibration/SCD30%20CO2%20sensor/","text":"Sensirion SCD30 CO2 sensor \u00b6 WIP This guide is a WIP. This guide will show the calibration process and particularities for using the Sensirion SCD30 CO2 sensor with the Smart Citizen Kit. Manufacturer information \u00b6 Sensirion provides a lot of information in their applications note website for the SCD30 CO2. The datasheet can be found here . Setup \u00b6 For onboarding SCK2.1 with CO2 If you are onboarding a SCK2.1 with NDIR CO2 sensor (SCD30 or similar), make sure you select this blueprint: #35 SCK 2.1 CO2 in the advanced kit selection page . If you are using the SEEED Studio breakout , the sensor can be directly connected to the Auxiliary connector on the data board, using a 4-wire grove cable . Sensor can operate in two modes for finding it's reference value. For both of these modes have customizable reading intervals that affect power consumption and response time. Finally, a temperature correction can be applied for electronics temperature build-up. All the commands below are accessed by: SCD30 CO2: Options: interval [2-1000 (seconds)] autocal [on/off] calfactor [400-2000 (ppm)] caltemp [newTemp/off] pressure The procedure for setting up the sensor goes as follows (more information in Low power mode AN ): Reading interval \u00b6 The SCD30 can have different internal reading intervals, independent from the SCK's interval . A larger reading interval will reduce power consumption, but it will increase response time. By default, the reading interval is 2s. A good reading interval for reducing substantially power consumption is 15s. Below there is a table derived from the manufacturer's application notes that can guide in the reading interval setup process: Interval (s) Consumption (mA) Response time (t63 - s) 2 19 20 15 6.5 72 30 6.5 145 More information can be found in the low power mode application note . To control this, and set it up to 15s: control scd30 interval 15 To check the current interval: control scd30 interval Calibration \u00b6 The SCD30 can work in two main modes: ASC (automatic self-calibration) or FRC (forced re-calibration). They are both described in the Field calibration for SCD30 AN . Image source: Sensirion Additionally, there is a possibility to calibrate the temperature readings with an external sensor for correcting the SCD30 internal temperature corrections. ASC \u00b6 Sensor by default is set in ASC mode. In this mode, the sensor looks for a clean environment over a 1-3 weeks period of time, for at least 1h of clean air per day . Considerations: Do not unplug the sensors during the first week period of ASC Place it in a place where you know there is going to be a clean air composition during that period. Indoor environments is not always the best for this purpose Do not trust the initial values, as the self-calibration algorithm might have not found proper values yet There is no way for us to know wether the self-calibration process has satisfactory values. Our understanding is that the internal SCD30 algorithm converges after a period of time, but there is no indication whatsoever of the quality of the readings (see insights section for more information) To turn it on: control scd30 autocal on Or off: control scd30 autocal off FRC \u00b6 To activate FRC mode, we need to provide an external CO2 concentration in ppm. FRC calibration takes place inmediately, and it can be do multiple times at aribtrary intervals. Before applying it, run the sensor for at least 2 minutes in the desired environment. Unstable environments Take into account the response time of the sensor (with 2s it's t63=20s). If the environment in which you are taking readings it's too unstable, do not apply the FRC. First, make sure both reference and SCD30 sensors are stable: monitor scd30 co2 To stop the monitor, just press Enter . Secondly, feed the external reading into the sensor. The value needs to be between 400ppm and 2000ppm . For instance, for a value of 450ppm: SCK > control scd30 calfactor 450 SCD30 CO2: calfactor 450 Forced Recalibration Factor: 450 After applying this value, ASC will be disabled automatically and readings will be inmediately corrected to the new value. Resetting the sensor Take into account that if you ask for the calfactor after setting it up: SCK > control scd30 calfactor SCD30 CO2: calfactor Forced Recalibration Factor: 450 However, if you reset the sensor , it will return 400ppm . The FRC will remain active with the set value, but it will only visible through the autocal check: SCK > control scd30 calfactor SCD30 CO2: calfactor Forced Recalibration Factor: 400 SCK > control scd30 autocal SCD30 CO2: autocal Auto Self Calibration: off Temperature correction \u00b6 An external temperature sensor can also be used to compensate the self-heating of the SCD30 board. A temperature correction can be supplied with the caltemp command. First, read the temperature from the SCD30, to verify it's lower than the reference sensor. read scd30 temp If it is, then feed the external temperature value (for instance, 15 \u00baC): control scd30 caltemp 15 After this, the sensor will stabilise and converge to the new temperature correction reading after a while. To turn off the temperature compensation: control scd30 caltemp off Insights \u00b6 This section is WIP.","title":"CO2 sensor"},{"location":"Guides/calibration/SCD30%20CO2%20sensor/#sensirion-scd30-co2-sensor","text":"WIP This guide is a WIP. This guide will show the calibration process and particularities for using the Sensirion SCD30 CO2 sensor with the Smart Citizen Kit.","title":"Sensirion SCD30 CO2 sensor"},{"location":"Guides/calibration/SCD30%20CO2%20sensor/#manufacturer-information","text":"Sensirion provides a lot of information in their applications note website for the SCD30 CO2. The datasheet can be found here .","title":"Manufacturer information"},{"location":"Guides/calibration/SCD30%20CO2%20sensor/#setup","text":"For onboarding SCK2.1 with CO2 If you are onboarding a SCK2.1 with NDIR CO2 sensor (SCD30 or similar), make sure you select this blueprint: #35 SCK 2.1 CO2 in the advanced kit selection page . If you are using the SEEED Studio breakout , the sensor can be directly connected to the Auxiliary connector on the data board, using a 4-wire grove cable . Sensor can operate in two modes for finding it's reference value. For both of these modes have customizable reading intervals that affect power consumption and response time. Finally, a temperature correction can be applied for electronics temperature build-up. All the commands below are accessed by: SCD30 CO2: Options: interval [2-1000 (seconds)] autocal [on/off] calfactor [400-2000 (ppm)] caltemp [newTemp/off] pressure The procedure for setting up the sensor goes as follows (more information in Low power mode AN ):","title":"Setup"},{"location":"Guides/calibration/SCD30%20CO2%20sensor/#reading-interval","text":"The SCD30 can have different internal reading intervals, independent from the SCK's interval . A larger reading interval will reduce power consumption, but it will increase response time. By default, the reading interval is 2s. A good reading interval for reducing substantially power consumption is 15s. Below there is a table derived from the manufacturer's application notes that can guide in the reading interval setup process: Interval (s) Consumption (mA) Response time (t63 - s) 2 19 20 15 6.5 72 30 6.5 145 More information can be found in the low power mode application note . To control this, and set it up to 15s: control scd30 interval 15 To check the current interval: control scd30 interval","title":"Reading interval"},{"location":"Guides/calibration/SCD30%20CO2%20sensor/#calibration","text":"The SCD30 can work in two main modes: ASC (automatic self-calibration) or FRC (forced re-calibration). They are both described in the Field calibration for SCD30 AN . Image source: Sensirion Additionally, there is a possibility to calibrate the temperature readings with an external sensor for correcting the SCD30 internal temperature corrections.","title":"Calibration"},{"location":"Guides/calibration/SCD30%20CO2%20sensor/#asc","text":"Sensor by default is set in ASC mode. In this mode, the sensor looks for a clean environment over a 1-3 weeks period of time, for at least 1h of clean air per day . Considerations: Do not unplug the sensors during the first week period of ASC Place it in a place where you know there is going to be a clean air composition during that period. Indoor environments is not always the best for this purpose Do not trust the initial values, as the self-calibration algorithm might have not found proper values yet There is no way for us to know wether the self-calibration process has satisfactory values. Our understanding is that the internal SCD30 algorithm converges after a period of time, but there is no indication whatsoever of the quality of the readings (see insights section for more information) To turn it on: control scd30 autocal on Or off: control scd30 autocal off","title":"ASC"},{"location":"Guides/calibration/SCD30%20CO2%20sensor/#frc","text":"To activate FRC mode, we need to provide an external CO2 concentration in ppm. FRC calibration takes place inmediately, and it can be do multiple times at aribtrary intervals. Before applying it, run the sensor for at least 2 minutes in the desired environment. Unstable environments Take into account the response time of the sensor (with 2s it's t63=20s). If the environment in which you are taking readings it's too unstable, do not apply the FRC. First, make sure both reference and SCD30 sensors are stable: monitor scd30 co2 To stop the monitor, just press Enter . Secondly, feed the external reading into the sensor. The value needs to be between 400ppm and 2000ppm . For instance, for a value of 450ppm: SCK > control scd30 calfactor 450 SCD30 CO2: calfactor 450 Forced Recalibration Factor: 450 After applying this value, ASC will be disabled automatically and readings will be inmediately corrected to the new value. Resetting the sensor Take into account that if you ask for the calfactor after setting it up: SCK > control scd30 calfactor SCD30 CO2: calfactor Forced Recalibration Factor: 450 However, if you reset the sensor , it will return 400ppm . The FRC will remain active with the set value, but it will only visible through the autocal check: SCK > control scd30 calfactor SCD30 CO2: calfactor Forced Recalibration Factor: 400 SCK > control scd30 autocal SCD30 CO2: autocal Auto Self Calibration: off","title":"FRC"},{"location":"Guides/calibration/SCD30%20CO2%20sensor/#temperature-correction","text":"An external temperature sensor can also be used to compensate the self-heating of the SCD30 board. A temperature correction can be supplied with the caltemp command. First, read the temperature from the SCD30, to verify it's lower than the reference sensor. read scd30 temp If it is, then feed the external temperature value (for instance, 15 \u00baC): control scd30 caltemp 15 After this, the sensor will stabilise and converge to the new temperature correction reading after a while. To turn off the temperature compensation: control scd30 caltemp off","title":"Temperature correction"},{"location":"Guides/calibration/SCD30%20CO2%20sensor/#insights","text":"This section is WIP.","title":"Insights"},{"location":"Guides/calibration/Soil%20moisture%20sensors/","text":"Soil Moisture Sensor Calibration \u00b6 The soil moisture sensor can be used for schedule irrigations (i.e. determine when to water the plants); or for calculating soil water deficit to work out how much water to apply. Depending on the application, the sensor would need to be calibrated in with different procedures, but as a general guideline, we need to normalise its readings. Without this process, the raw sensor readings will be meaningless to the user and only some trends could be analysed. This section is a digest of some of these procedures, and more information is given in the notes below. More references Capacitance probe calibration The importance of soil moisture sensor calibration In case of irrigation scheduling , it is generally sufficient to simply match the raw readings from each sensor at both 0% (held in air) and 100% water levels (submerged in water). This is, of course, an approximation and will need some further analysis from the user to determine when to irrigate. When a more accurate measurement is required , the sensor needs to be calibrated with the actual soil where it's going to be deployed, since different types of soil will have different capacities. A valid approach is to prepare different samples of the soil with different levels of saturation, and adapt the sensor readings for it. Image Source: Edaphic Scientific Calibration \u00b6 If we are not aiming to get a full-fledged sensor reading, we will only need to measure the sensor in dry air and fully submerged in water. For that, we will use : A laptop with a serial interface. For instance, the Arduino IDE Our sensor A cup filled up with water and a napkin The sensor can be calibrated using the shell interface . The process is as follows: Connect your kit to a computer and open the terminal for the SCK. If you use the Arduino IDE, go to Tools > Serial Monitor and select 115200 baud at the bottom right corner If you use the IDE type sensor on the top and click Send Check if the output has something like Soil Moisture Raw (60 sec) after Enabled If it's Enabled , dry the sensor and type in: read soil moisture raw . Repeat this command 5-10 times until you get an stable output (repeat command with arrow up ) Put the sensor in a cup of water (until the line). Then read the value again read soil moisture raw several times. Once you have both values, type in: control moisture cal XXX YYY where XXX and YYY are the dry and wet values that you just measured Check that the reading is OK by: read soil moisture percent . You should receive an answer in rh% Now you should see the data online (if in network mode): Find out more Check the project source code files .","title":"Soil sensors"},{"location":"Guides/calibration/Soil%20moisture%20sensors/#soil-moisture-sensor-calibration","text":"The soil moisture sensor can be used for schedule irrigations (i.e. determine when to water the plants); or for calculating soil water deficit to work out how much water to apply. Depending on the application, the sensor would need to be calibrated in with different procedures, but as a general guideline, we need to normalise its readings. Without this process, the raw sensor readings will be meaningless to the user and only some trends could be analysed. This section is a digest of some of these procedures, and more information is given in the notes below. More references Capacitance probe calibration The importance of soil moisture sensor calibration In case of irrigation scheduling , it is generally sufficient to simply match the raw readings from each sensor at both 0% (held in air) and 100% water levels (submerged in water). This is, of course, an approximation and will need some further analysis from the user to determine when to irrigate. When a more accurate measurement is required , the sensor needs to be calibrated with the actual soil where it's going to be deployed, since different types of soil will have different capacities. A valid approach is to prepare different samples of the soil with different levels of saturation, and adapt the sensor readings for it. Image Source: Edaphic Scientific","title":"Soil Moisture Sensor Calibration"},{"location":"Guides/calibration/Soil%20moisture%20sensors/#calibration","text":"If we are not aiming to get a full-fledged sensor reading, we will only need to measure the sensor in dry air and fully submerged in water. For that, we will use : A laptop with a serial interface. For instance, the Arduino IDE Our sensor A cup filled up with water and a napkin The sensor can be calibrated using the shell interface . The process is as follows: Connect your kit to a computer and open the terminal for the SCK. If you use the Arduino IDE, go to Tools > Serial Monitor and select 115200 baud at the bottom right corner If you use the IDE type sensor on the top and click Send Check if the output has something like Soil Moisture Raw (60 sec) after Enabled If it's Enabled , dry the sensor and type in: read soil moisture raw . Repeat this command 5-10 times until you get an stable output (repeat command with arrow up ) Put the sensor in a cup of water (until the line). Then read the value again read soil moisture raw several times. Once you have both values, type in: control moisture cal XXX YYY where XXX and YYY are the dry and wet values that you just measured Check that the reading is OK by: read soil moisture percent . You should receive an answer in rh% Now you should see the data online (if in network mode): Find out more Check the project source code files .","title":"Calibration"},{"location":"Guides/calibration/Water%20sensors/","text":"Water Sensors Calibration \u00b6 Calibration on the Smart Citizen Kit \u00b6 The Smart Citizen firmware has built-in support for the calibration of the sensors. In order to calibrate the sensors you will need to use the SCK Shell . To enable the sensors you just need to plug you board to the Smart Citizen kit aux port and reboot the Smart Citizen Kit and the sensors will be handled by the board. Warning When calibrating don't use the normal read sensor command , this command applies temperature/salinity compensation, calibration should be done without any compensation. Instead you should use control sensorName com r and that will return the raw metrics that sensor can provide. On the documentation of each sensor calibration procedure we describe the format of this metrics. Danger After finishing the calibration process restart your SCK to start from a clean state. Atlas PH \u00b6 The pH value at current temperature can be found on the reference table on the calibration solution bottle. If the current temperature is not on it, use the closest value. Datasheet Datasheet (calibration theory on page 11, and commands on page 52) Example commands control ph com r control ph com cal,[mid,low,high],value control ph com cal,clear control ph com cal,? 3-point calibration \u00b6 First start a serial communication with the Smart Citizen Kit with screen or pio device monitor or even the serial monitor of the Arduino IDE. Order of the calibration : mid point low point high point Warning Always calibrate the mid point first because it calibration erase all the previous calibration done. Danger Always clean the probe with distilled water between each calibration Mid point calibration \u00b6 Put the sensor in the pH 7 calibration solution. Read the sensor multiple times until the reading is stable: control ph com r 6.48 control ph com r 6.45 ... Issue the midpoint calibration command: control atlas ph com cal,mid,[value of pH at current temperature] example at 30\u00b0C: control atlas ph com cal,mid,6.99 After this command if you take a pH reading the result should be 7.00 (or very close to it) Low Point Calibration \u00b6 Repeat the procedure with the Low point 4.00 solution (the red one). High Point Calibration \u00b6 The same step with High point 10.00 calibration solution (blue). (not tested) If your calibration solutions are not 4, 7 and 10, you can still use them and replace [value of pH at current temperature] by your values. The command control com cal,? can be used to check the calibration status as explained on datasheet page 52. The answers can be: ?CAL,0 \u2192 No calibration done ?CAL,1 \u2192 One point calibration done ?CAL,2 \u2192 Two point calibration done ?CAL,3 \u2192 Three point calibration done Atlas EC \u00b6 Datasheet - Calibration info on page 12. - Calibration commands on page 55. Example commands control conductivity com r control conductivity com K,[probeType] control conductivity com K,? control conductivity com cal,[dry,clear,84] control conductivity com cal,low,1413 control conductivity com cal,high,12,880 control conductivity com cal,? 2-point calibration \u00b6 Order of the calibration : set probe type dry point two-point calibration Set probe type \u00b6 Depending on which probe you have (check drawing for reference) you should set the probe type to K 0.1, 1.0 or 10 (new drivers have K1.0 as default): To set the correct probe type: control conductivity com K,1.0 and check which type is set: control conductivity com K,? ?K,1.0 The Electrical Conductivity sensor provides four different metrics: Electrical Conductivity \u2192 EC Total Dissolved Solids \u2192 TDS Salinity \u2192 S Specific Gravity \u2192 SG The data is presented in order and comma separated EC,TDS,S,SG , for instance 0.00,0,0.00,1.000 Dry calibration \u00b6 Follow the steps below with the dry sensor before introducing it to the calibration solutions. You need to do this step even if the readings in dry state are 0. Read the sensor multiple times until the reading is stable: control conductivity com r 0.00,0,0.00,1.000 control conductivity com r 0.00,0,0.00,1.000 ... Issue the dry calibration command: control conductivity com cal,dry Low point calibration \u00b6 You can check the recommended calibration solutions for each probe on the Probetypes drawing (for instance, for K1.0 probe, 12,880uS and 80,000uS are recomended) Read the sensor multiple times until the reading is stable: control conductivity com r 13470,7278,7.76,1.0 control conductivity com r 13230,7144,7.61,1.0 ... Issue the low point calibration command. The value to input is the one of the calibration solution , for example 128800 : control conductivity com cal,low,12880 After this command readings will not change High point calibration \u00b6 Repeat this steps with high point calibration solution and when the readings stabilize issue the command. Again, remember that the value to input here is the one from the calibration solution , for instance 80000 : control conductivity com cal,high,80000 After this steps the two point calibration is complete and the readings will change. Atlas DO \u00b6 Order of the calibration: dry point 0 mg/L point (optional) Datasheet Datasheet (calibration info on page 9, calibration commands on page 52) com dissolved r com dissolved cal com dissolved cal,0 com dissolved cal,clear com dissolved cal,? Pressure compensation If the sensor is going to be used at more than 10 meters deep into the water Pressure compensation should be set with: control dissolved com P,kPaValue More information on datasheet , page 57 OPTION A: Single point calibration \u00b6 Read the sensor multiple times until the reading is stable: control dissolved com r 13.95,50% control dissolved com r 13.76,49% ... Issue the calibration command, after this the readings will change. In this case, there is no need to add any value after cal . The sensor will take the current reading as the dry point . control dissolved com cal OPTION B: 2-point calibration \u00b6 Two point calibration is recommended if you require accurate readings below 1.0 mg/L. After completing the single point calibration procedure put the probe in the calibration solution. Read the sensor multiple times until the reading is stable: control dissolved com r 13.95,50% control dissolved com r 13.76,49% ... Issue the calibration command. In this case, you have to input the value of the calibration solution too, for example 0 : control dissolved com cal,0 Reset your SCK and you are ready. Ready to go? If you want to send the data to the platform, you will need to Advanced Kit Selection . At the moment the closest Kit Blueprint will be #22 BioPV Kit or #31 SCK 2.1 Sea Water in case you are using a SCK2.1 with GPS. You can request in the forum for a custom blueprint with the specific sensors you are using.","title":"Water sensors"},{"location":"Guides/calibration/Water%20sensors/#water-sensors-calibration","text":"","title":"Water Sensors Calibration"},{"location":"Guides/calibration/Water%20sensors/#calibration-on-the-smart-citizen-kit","text":"The Smart Citizen firmware has built-in support for the calibration of the sensors. In order to calibrate the sensors you will need to use the SCK Shell . To enable the sensors you just need to plug you board to the Smart Citizen kit aux port and reboot the Smart Citizen Kit and the sensors will be handled by the board. Warning When calibrating don't use the normal read sensor command , this command applies temperature/salinity compensation, calibration should be done without any compensation. Instead you should use control sensorName com r and that will return the raw metrics that sensor can provide. On the documentation of each sensor calibration procedure we describe the format of this metrics. Danger After finishing the calibration process restart your SCK to start from a clean state.","title":"Calibration on the Smart Citizen Kit"},{"location":"Guides/calibration/Water%20sensors/#atlas-ph","text":"The pH value at current temperature can be found on the reference table on the calibration solution bottle. If the current temperature is not on it, use the closest value. Datasheet Datasheet (calibration theory on page 11, and commands on page 52) Example commands control ph com r control ph com cal,[mid,low,high],value control ph com cal,clear control ph com cal,?","title":"Atlas PH"},{"location":"Guides/calibration/Water%20sensors/#3-point-calibration","text":"First start a serial communication with the Smart Citizen Kit with screen or pio device monitor or even the serial monitor of the Arduino IDE. Order of the calibration : mid point low point high point Warning Always calibrate the mid point first because it calibration erase all the previous calibration done. Danger Always clean the probe with distilled water between each calibration","title":"3-point calibration"},{"location":"Guides/calibration/Water%20sensors/#mid-point-calibration","text":"Put the sensor in the pH 7 calibration solution. Read the sensor multiple times until the reading is stable: control ph com r 6.48 control ph com r 6.45 ... Issue the midpoint calibration command: control atlas ph com cal,mid,[value of pH at current temperature] example at 30\u00b0C: control atlas ph com cal,mid,6.99 After this command if you take a pH reading the result should be 7.00 (or very close to it)","title":"Mid point calibration"},{"location":"Guides/calibration/Water%20sensors/#low-point-calibration","text":"Repeat the procedure with the Low point 4.00 solution (the red one).","title":"Low Point Calibration"},{"location":"Guides/calibration/Water%20sensors/#high-point-calibration","text":"The same step with High point 10.00 calibration solution (blue). (not tested) If your calibration solutions are not 4, 7 and 10, you can still use them and replace [value of pH at current temperature] by your values. The command control com cal,? can be used to check the calibration status as explained on datasheet page 52. The answers can be: ?CAL,0 \u2192 No calibration done ?CAL,1 \u2192 One point calibration done ?CAL,2 \u2192 Two point calibration done ?CAL,3 \u2192 Three point calibration done","title":"High Point Calibration"},{"location":"Guides/calibration/Water%20sensors/#atlas-ec","text":"Datasheet - Calibration info on page 12. - Calibration commands on page 55. Example commands control conductivity com r control conductivity com K,[probeType] control conductivity com K,? control conductivity com cal,[dry,clear,84] control conductivity com cal,low,1413 control conductivity com cal,high,12,880 control conductivity com cal,?","title":"Atlas EC"},{"location":"Guides/calibration/Water%20sensors/#2-point-calibration","text":"Order of the calibration : set probe type dry point two-point calibration","title":"2-point calibration"},{"location":"Guides/calibration/Water%20sensors/#set-probe-type","text":"Depending on which probe you have (check drawing for reference) you should set the probe type to K 0.1, 1.0 or 10 (new drivers have K1.0 as default): To set the correct probe type: control conductivity com K,1.0 and check which type is set: control conductivity com K,? ?K,1.0 The Electrical Conductivity sensor provides four different metrics: Electrical Conductivity \u2192 EC Total Dissolved Solids \u2192 TDS Salinity \u2192 S Specific Gravity \u2192 SG The data is presented in order and comma separated EC,TDS,S,SG , for instance 0.00,0,0.00,1.000","title":"Set probe type"},{"location":"Guides/calibration/Water%20sensors/#dry-calibration","text":"Follow the steps below with the dry sensor before introducing it to the calibration solutions. You need to do this step even if the readings in dry state are 0. Read the sensor multiple times until the reading is stable: control conductivity com r 0.00,0,0.00,1.000 control conductivity com r 0.00,0,0.00,1.000 ... Issue the dry calibration command: control conductivity com cal,dry","title":"Dry calibration"},{"location":"Guides/calibration/Water%20sensors/#low-point-calibration_1","text":"You can check the recommended calibration solutions for each probe on the Probetypes drawing (for instance, for K1.0 probe, 12,880uS and 80,000uS are recomended) Read the sensor multiple times until the reading is stable: control conductivity com r 13470,7278,7.76,1.0 control conductivity com r 13230,7144,7.61,1.0 ... Issue the low point calibration command. The value to input is the one of the calibration solution , for example 128800 : control conductivity com cal,low,12880 After this command readings will not change","title":"Low point calibration"},{"location":"Guides/calibration/Water%20sensors/#high-point-calibration_1","text":"Repeat this steps with high point calibration solution and when the readings stabilize issue the command. Again, remember that the value to input here is the one from the calibration solution , for instance 80000 : control conductivity com cal,high,80000 After this steps the two point calibration is complete and the readings will change.","title":"High point calibration"},{"location":"Guides/calibration/Water%20sensors/#atlas-do","text":"Order of the calibration: dry point 0 mg/L point (optional) Datasheet Datasheet (calibration info on page 9, calibration commands on page 52) com dissolved r com dissolved cal com dissolved cal,0 com dissolved cal,clear com dissolved cal,? Pressure compensation If the sensor is going to be used at more than 10 meters deep into the water Pressure compensation should be set with: control dissolved com P,kPaValue More information on datasheet , page 57","title":"Atlas DO"},{"location":"Guides/calibration/Water%20sensors/#option-a-single-point-calibration","text":"Read the sensor multiple times until the reading is stable: control dissolved com r 13.95,50% control dissolved com r 13.76,49% ... Issue the calibration command, after this the readings will change. In this case, there is no need to add any value after cal . The sensor will take the current reading as the dry point . control dissolved com cal","title":"OPTION A: Single point calibration"},{"location":"Guides/calibration/Water%20sensors/#option-b-2-point-calibration","text":"Two point calibration is recommended if you require accurate readings below 1.0 mg/L. After completing the single point calibration procedure put the probe in the calibration solution. Read the sensor multiple times until the reading is stable: control dissolved com r 13.95,50% control dissolved com r 13.76,49% ... Issue the calibration command. In this case, you have to input the value of the calibration solution too, for example 0 : control dissolved com cal,0 Reset your SCK and you are ready. Ready to go? If you want to send the data to the platform, you will need to Advanced Kit Selection . At the moment the closest Kit Blueprint will be #22 BioPV Kit or #31 SCK 2.1 Sea Water in case you are using a SCK2.1 with GPS. You can request in the forum for a custom blueprint with the specific sensors you are using.","title":"OPTION B: 2-point calibration"},{"location":"Guides/data/Analyse%20your%20data%20in%20batch/","text":"Sometimes we have a lot of devices to process, and the interfaces for analysis in smartcitizen.me or in the jupyter notebook might not be the most efficient way to do it. For this reason, we have developed a functionality to process the data in batches, defining the tasks to perform in a json descriptor file. The descriptor file can be placed in the src/tasks directory (or any, actually). An example of how to run it is shown in examples/batch_analysis.ipynb : # Load the object from src.models.batch import batch_analysis\", tasks_file = '../tasks/batch.json'\", batch_session = batch_analysis(tasks_file, verbose = True) # Run the analysis batch_session.run() Functionality \u00b6 These tasks are intended to automatise data analysis tasks as the following: Load, process and export processed data Generate models and apply them, extracting metrics and comparing if they extrapolate to different set of sensors in different datasets, without having to run extra code Make plots for different metrics in an automatic way, and export their renders Workflow \u00b6 Json task description \u00b6 The descriptor file loaded is a json containing keys for each task to be run. Several tasks can be included and will be run consecutively: { \"TASK_1\":{...}, \"TASK_2\":{...}, \"TASK_3\":{...} } Each of the tasks contains different fields, depending on what the process is. Define data \u00b6 In case no model needs to be calculated , the data can be specified directly in the task: { \"TASK_1\":{ \"data\":{ \"datasets\": { \"TEST_1\": [\"DEVICE_11\",\"DEVICE_12\"], \"TEST_2\": [\"DEVICE_21\", \"DEVICE_22\", \"DEVICE_23\"], ... }, \"data_options\": {\"avoid_processed\": true, \"frequency\": \"1Min\", \"clean_na\": true, \"use_cache\": true, \"clean_na_method\": \"drop\", \"min_date\": null, \"max_date\": null, \"export_data\": null, \"rename_export_data\": false} } } If a model is to be calculated, the data is defined within the model key as seen below. Data loading options \u00b6 frequency : frequency at which load the data (as defined in pandas here ) clean_na : clean or not NaN clean_na_method : drop or fill with back-forward filling use_cache : whether or not to use file chaching for the analysis. This adds a cached folder in the corresponding test directory, which allows faster download from the API . It is implemented so that the only data to be downloaded is the one that is not cached min_date , max_date : for limitting the amount of data to be loaded export_data : if the processed data (after pre-processing and modeling) has to be exported. It will be saved in the corresponding test folder, under processed . Options are: None : don't export anything All : all channels in the pandas dataframe Only Generic : Export only channels that are under the data/interim/sensorNamesExport.json Only Processed : Export only channels that are tagged as processed under the data/interim/sensorNamesExport.json rename_export_data : Rename the exported channels for better readability using the file data/interim/sensorNamesExport.json None? In json , we specify the python None as null . Want to save time? Enable use_cache and we will save some time by checking if the data we have downloaded previously from the API can be used. This also applies for pre-processing functions. Model \u00b6 Recommended to just get in touch This can be overwhelming at first. Just get in touch In the model sub-task, currently three possibilities are implemented: Linear methods: OLS or RLM regression Random Forest ( RF ) or Support Vector Regressor SVR XGBoost In the case of having a model task, the data defined above is ignored, and only the one under model: {\"data\":{}} is used. One model per task It is better to generate only one model per task, since the memory used by the models can be very large. An example is shown below: \"model\": { \"model_name\": \"Random_Forest_100\", \"model_type\": \"RF\", \"model_target\": \"ALPHASENSE\", \"data\": {\"train\": {\"TEST_1\": {\"devices\": [\"DEVICE_1\"], \"reference_device\":\"REF_DEVICE_1\"}}, \"test\": {\"TEST_1\": {\"devices\": [\"DEVICE_1\", \"DEVICE_2\"], \"reference_device\":\"REF_DEVICE_2\"}, \"TEST_2\": {\"devices\": [\"DEVICE_3\"], \"reference_device\": \"REF_DEVICE_3\"}, \"TEST_3\": {\"devices\": [\"DEVICE_4\"], \"reference_device\": \"REF_DEVICE_4\"}, \"TEST_2\": {\"devices\": [\"DEVICE_5\"], \"reference_device\": \"REF_DEVICE_5\"}}, \"features\": {\"REF\": \"NO2_REF\", \"A\": \"GB_2W\", \"B\": \"GB_2A\", \"C\": \"HUM\" } \"data_options\": {\"export_data\": \"All\", \"rename_export_data\": false, \"target_raster\": 1Min\", \"clean_na\": true, \"clean_na_method\": \"fill\", \"min_date\": null, \"max_date\": null, \"use_cache\": true} }, \"hyperparameters\": {\"ratio_train\": 0.75, \"n_estimators\": 100, \"shuffle_split\": true }, \"model_options\": {\"session_active_model\": false, \"export_model\": false, \"export_model_file\": false, \"extract_metrics\": true, \"save_plots\": false, \"show_plots\": false } }, model_name : model name to be saved model_type : 'RF', 'SVR', 'LSTM' or 'OLS' model_target : if the model is to be stored under a specific category of models under the models/ folder data : dict containing the data to use for training, and features description. Under train , we define which of the tests and devices is to be used for the model definition, with the format {\"TEST\": \"devices\": [\"DEVICE\"], \"reference_device\": \"REF_DEVICE_1\"} . Under test , we define a series of test in which we'll evaluate the model extracted from the train dataset: devices : list of devices to use reference_device : device that contains the reference data Info Multiple training datasets are possible as well, by combining them. Additionally: + features : dict of devices tagged as REF , A , B , C ... to define the features of the model, being REF the reference channel in the reference_device - hyperparameters : dict containing different hyperparameters, depending on the type of model: + For all: * ratio_train : generic, train-test split ratio + OLS: * formula_expresion : stats models formula type, accepting numpy expressions This formula has to reference the features described under the data section. Example: REF ~ A * B + np.log(C/2) + Random Forest: * n_estimators : only for RF . number of forests to use * shuffle_split : only for RF . whether or not use shuffle split + LSTM: * n_lags : number of lags to account in the LSTM input * epochs : number of epochs (100 or more recommended) * batch_size : batch size (72 recommended) * verbose : verbose output during training * loss : loss function ('mse' or others) * optimizer : optimizer to use ( adam or others) * layers : specific layer structure. Example below: ``` \"layers\": [{\"type\": \"lstm\", \"neurons\": 100, \"return_seq\": true }, { \"type\": \"dropout\", \"rate\": 0.05 }, { \"type\": \"lstm\", \"neurons\": 100, \"return_seq\": true }, { \"type\": \"lstm\", \"neurons\": 50, \"return_seq\": false }, { \"type\": \"dropout\", \"rate\": 0.05 }, { \"type\": \"dense\", \"neurons\": 1, \"activation\": \"linear\" } ]}, ``` model_options : different options for the model calculated session_active_model : keep the model active after the task is completed export_model : export the model (parameters, hyperparameters, weights) to the model/model_type folder after the task is completed export_model_file : export the model file (not recommended for RF ) fo the same folder as above export_metrics : export metrics for the model or not save_plots : save model plots or not show_plots : show model plots or not Plots \u00b6 The plot sub-task accepts two different libraries: matplotlib and plotly . The first one generates static images, that we can export for nice quality graphs, while plotly is more meant for exploratory analysis. Many plots? No problem In the case of the models, we only wanted one model per task, but it's not the case in the plots. \"plot\": { \"2\": {\"plot_type\": \"timeseries\", \"plotting_library\": \"matplotlib\", \"data\": {\"test\": \"TEST_1\", \"traces\": {\"1\": {\"device\": \"5262\", \"channel\" : \"EXT_PM_10\", \"subplot\": 1}, \"2\": {\"device\": \"5262\", \"channel\" : \"EXT_PM_25\", \"subplot\": 2}}}, \"options\": {\"show_plot\": false, \"separate_device_plots\": false, \"target_raster\": \"10Min\", \"max_date\": null, \"min_date\": null, \"export_path\": \"/Users/mac/Desktop\", \"file_name\": \"plot_pm\"}, \"formatting\": {\"xlabel\": \"Date (-)\", \"ylabel\": {\"1\": \"Temp degC\", \"2\": \"Hum (%rh)\"}, \"yrange\": {\"1\": [0, 40], \"2\": [0, 100]}, \"title\": \"PM\", \"sharex\":true, \"grid\": true, \"height\": 10, \"width\": 12} }, General description \u00b6 This description is suitable for timeseries plots. Check below for other types: plot_type : the plot type to be used. Currently we support timeseries , violin , scatter_matrix , correlation_plot , heatmap , barplot , coherence_plot plotting_library : matplotlib or plotly data : the data to represent. This data has to be loaded previously. This is only to define the plot: test : each plot can only represent data from a single test traces : numbered entries to specify the device , channel and, if applicable, the subplot (only for timeseries) Same plot for many devices? Set \" device : 'all'\" and \"separate_device_plots\": true , and we will make separate plots for each device. options : show_plot : whether or not to show the plot. Not recommended for large amounts separate_device_plots : true in case we want a single plot for each device in traces: devices . false in case we want to merge all the devices in a single plot (for comparison purposes). Applicable for timeseries target_raster : the frequency of the data to plot. Reduces processing time min_date , max_date : if not null , they crop the data with those dates export_path : where to put the plot. If null , we won't export anything file_name : how to name the plot. We will append the trace name in case separate_device_plots is set to true formatting : xlabel : Name to tag the x axis of the plot ylabel : Name to tag the y axis(es) of the plot. It can be more than one value in a json style yrange : Range fro the y axis(es). Same as above title : plot title grid : to show the grid or not height , width : plot height and width Plots specifics \u00b6 Heatmap \"1\" : {\"plot_type\": \"heatmap\", \"plotting_library\": \"matplotlib\", \"data\": {\"test\": \"TEST_1\", \"traces\": {\"1\": {\"device\": \"all\", \"channel\" : \"NOISE_A\", \"subplot\": 1}}}, \"options\": {\"show_plot\": false, \"separate_device_plots\": true, \"target_raster\": \"10Min\", \"min_date\": null, \"max_date\": \"2019-01-03\", \"relative\": false, \"export_path\": \"/Users/macoscar/Desktop\", \"file_name\": \"heatmap_noise\"}, \"formatting\": {\"title\": \"Magnificent plot\", \"grid\": true, \"height\": 10, \"width\": 15, \"frequency_hours\": 6} } Note that in this case it only makes sense to put one trace. If we define \"device\": \"all\" , then \"separate_device_plots\": true plotting_library : recommended library is matplotlib (although we actually use seaborn) formatting : frequency_hours : to choose between 1, 2, ..., 6, 12, 24. Resamples the data to make it fit in bins of that size to create the heatmap Correlation plot \"1\" : {\"plot_type\": \"correlation_plot\", \"plotting_library\": \"matplotlib\", \"data\": {\"test\": \"TEST_1\", \"traces\": {\"1\": {\"device\": \"5261\", \"channel\" : \"NOISE_A\", \"subplot\": 1}, \"2\": {\"device\": \"5262\", \"channel\": \"TEMP\", \"subplot\": 1}}}, \"options\": {\"show_plot\": True, \"separate_device_plots\": false, \"export_path\": \"/Users/macoscar/Desktop\", \"file_name\": \"plot_corr\", \"target_raster\": '10Min', \"min_date\": None, \"max_date\": None}, \"formatting\": {\"jpkind\": 'scatter', \"title\": \"Magnificent plot\", \"xrange\": [0, 100], \"yrange\": [0, 40], \"grid\": True, \"height\": 10, \"width\": 15} } Note that in this case it only makes sense to put two traces, in the same subplot. formatting : jpkind : type as defined in sns.jointplot documentation , to choose from { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d Scatter plot matrix The big brother of the correlation plot : \"1\" : {\"plot_type\": \"scatter_matrix\", \"plotting_library\": \"matplotlib\", \"data\": {\"test\": \"TEST_1\", \"traces\": {\"1\": {\"device\": \"5262\", \"channel\" : \"GB_2W\", \"subplot\": 1}, \"2\": {\"device\": \"5262\", \"channel\": \"TEMP\", \"subplot\": 1}, \"3\": {\"device\": \"5262\", \"channel\": \"HUM\", \"subplot\": 1}}}, \"options\": {\"show_plot\": True, \"separate_device_plots\": False, \"export_path\": \"/Users/macoscar/Desktop\", \"file_name\": \"plot_scatter\", \"target_raster\": '10Min', \"min_date\": None, \"max_date\": None}, \"formatting\": {\"title\": \"Magnificent plot\", \"grid\": True, \"height\": 4, \"width\": 4} } Coherence plot This plot it's used to plot the coherence between x and y. Coherence is the normalized cross spectral density. More info here : \"1\" : {\"plot_type\": \"coherence_plot\", \"plotting_library\": \"matplotlib\", \"data\": {\"test\": \"TEST_1\", \"traces\": {\"1\": {\"device\": \"5262\", \"channel\" : \"GB_2W\", \"subplot\": 1}, \"2\": {\"device\": \"5262\", \"channel\": \"TEMP\", \"subplot\": 1}}}, \"options\": {\"show_plot\": True, \"separate_device_plots\": False, \"export_path\": \"/Users/macoscar/Desktop\", \"file_name\": \"plot_coherence\", \"target_raster\": '10Min', \"min_date\": None, \"max_date\": None}, \"formatting\": {\"title\": \"Magnificent plot\", \"grid\": True, \"height\": 10, \"width\": 15} } Violin plot This plot shows the signal distribution. \"1\" : {\"plot_type\": \"violin\", \"plotting_library\": \"matplotlib\", \"data\": {\"test\": \"TEST_1\", \"traces\": {\"1\": {\"device\": \"5262\", \"channel\" : \"DALLAS_TEMP\", \"subplot\": 1}, \"2\": {\"device\": \"5262\", \"channel\" : \"HUM\", \"subplot\": 1}, \"3\": {\"device\": \"5262\", \"channel\" : \"TEMP\", \"subplot\": 1}, \"4\": {\"device\": \"5262\", \"channel\" : \"GB_2W\", \"subplot\": 1}, \"5\": {\"device\": \"5262\", \"channel\" : \"GB_2A\", \"subplot\": 1}, \"6\": {\"device\": \"5262\", \"channel\" : \"GB_3W\", \"subplot\": 1}}}, \"options\": {\"show_plot\": True, \"separate_device_plots\": False, \"export_path\": \"/Users/macoscar/Desktop\", \"file_name\": \"plot_violin\", \"target_raster\": '10Min', \"min_date\": None, \"max_date\": '2019-01-03', \"relative\": False, \"ylabel\": {1: \"External temperature\", 2: \"Humidity (%RH)\", 3: \"Temperature (degC)\", 4: \"Wir\", 5: \"Wor\", 6: \"Wur\"}, \"yrange\": {1: [0, 90], 2: [300, 2000], 3: [0, 60], 4: [0, 60], 5: [0,60], 6: [0,60]}, }, \"formatting\": {\"title\": \"Magnificent plot\", \"grid\": True, \"height\": 10, \"width\": 15} }","title":"Analyse your data in batch"},{"location":"Guides/data/Analyse%20your%20data%20in%20batch/#functionality","text":"These tasks are intended to automatise data analysis tasks as the following: Load, process and export processed data Generate models and apply them, extracting metrics and comparing if they extrapolate to different set of sensors in different datasets, without having to run extra code Make plots for different metrics in an automatic way, and export their renders","title":"Functionality"},{"location":"Guides/data/Analyse%20your%20data%20in%20batch/#workflow","text":"","title":"Workflow"},{"location":"Guides/data/Analyse%20your%20data%20in%20batch/#json-task-description","text":"The descriptor file loaded is a json containing keys for each task to be run. Several tasks can be included and will be run consecutively: { \"TASK_1\":{...}, \"TASK_2\":{...}, \"TASK_3\":{...} } Each of the tasks contains different fields, depending on what the process is.","title":"Json task description"},{"location":"Guides/data/Analyse%20your%20data%20in%20batch/#define-data","text":"In case no model needs to be calculated , the data can be specified directly in the task: { \"TASK_1\":{ \"data\":{ \"datasets\": { \"TEST_1\": [\"DEVICE_11\",\"DEVICE_12\"], \"TEST_2\": [\"DEVICE_21\", \"DEVICE_22\", \"DEVICE_23\"], ... }, \"data_options\": {\"avoid_processed\": true, \"frequency\": \"1Min\", \"clean_na\": true, \"use_cache\": true, \"clean_na_method\": \"drop\", \"min_date\": null, \"max_date\": null, \"export_data\": null, \"rename_export_data\": false} } } If a model is to be calculated, the data is defined within the model key as seen below.","title":"Define data"},{"location":"Guides/data/Analyse%20your%20data%20in%20batch/#data-loading-options","text":"frequency : frequency at which load the data (as defined in pandas here ) clean_na : clean or not NaN clean_na_method : drop or fill with back-forward filling use_cache : whether or not to use file chaching for the analysis. This adds a cached folder in the corresponding test directory, which allows faster download from the API . It is implemented so that the only data to be downloaded is the one that is not cached min_date , max_date : for limitting the amount of data to be loaded export_data : if the processed data (after pre-processing and modeling) has to be exported. It will be saved in the corresponding test folder, under processed . Options are: None : don't export anything All : all channels in the pandas dataframe Only Generic : Export only channels that are under the data/interim/sensorNamesExport.json Only Processed : Export only channels that are tagged as processed under the data/interim/sensorNamesExport.json rename_export_data : Rename the exported channels for better readability using the file data/interim/sensorNamesExport.json None? In json , we specify the python None as null . Want to save time? Enable use_cache and we will save some time by checking if the data we have downloaded previously from the API can be used. This also applies for pre-processing functions.","title":"Data loading options"},{"location":"Guides/data/Analyse%20your%20data%20in%20batch/#model","text":"Recommended to just get in touch This can be overwhelming at first. Just get in touch In the model sub-task, currently three possibilities are implemented: Linear methods: OLS or RLM regression Random Forest ( RF ) or Support Vector Regressor SVR XGBoost In the case of having a model task, the data defined above is ignored, and only the one under model: {\"data\":{}} is used. One model per task It is better to generate only one model per task, since the memory used by the models can be very large. An example is shown below: \"model\": { \"model_name\": \"Random_Forest_100\", \"model_type\": \"RF\", \"model_target\": \"ALPHASENSE\", \"data\": {\"train\": {\"TEST_1\": {\"devices\": [\"DEVICE_1\"], \"reference_device\":\"REF_DEVICE_1\"}}, \"test\": {\"TEST_1\": {\"devices\": [\"DEVICE_1\", \"DEVICE_2\"], \"reference_device\":\"REF_DEVICE_2\"}, \"TEST_2\": {\"devices\": [\"DEVICE_3\"], \"reference_device\": \"REF_DEVICE_3\"}, \"TEST_3\": {\"devices\": [\"DEVICE_4\"], \"reference_device\": \"REF_DEVICE_4\"}, \"TEST_2\": {\"devices\": [\"DEVICE_5\"], \"reference_device\": \"REF_DEVICE_5\"}}, \"features\": {\"REF\": \"NO2_REF\", \"A\": \"GB_2W\", \"B\": \"GB_2A\", \"C\": \"HUM\" } \"data_options\": {\"export_data\": \"All\", \"rename_export_data\": false, \"target_raster\": 1Min\", \"clean_na\": true, \"clean_na_method\": \"fill\", \"min_date\": null, \"max_date\": null, \"use_cache\": true} }, \"hyperparameters\": {\"ratio_train\": 0.75, \"n_estimators\": 100, \"shuffle_split\": true }, \"model_options\": {\"session_active_model\": false, \"export_model\": false, \"export_model_file\": false, \"extract_metrics\": true, \"save_plots\": false, \"show_plots\": false } }, model_name : model name to be saved model_type : 'RF', 'SVR', 'LSTM' or 'OLS' model_target : if the model is to be stored under a specific category of models under the models/ folder data : dict containing the data to use for training, and features description. Under train , we define which of the tests and devices is to be used for the model definition, with the format {\"TEST\": \"devices\": [\"DEVICE\"], \"reference_device\": \"REF_DEVICE_1\"} . Under test , we define a series of test in which we'll evaluate the model extracted from the train dataset: devices : list of devices to use reference_device : device that contains the reference data Info Multiple training datasets are possible as well, by combining them. Additionally: + features : dict of devices tagged as REF , A , B , C ... to define the features of the model, being REF the reference channel in the reference_device - hyperparameters : dict containing different hyperparameters, depending on the type of model: + For all: * ratio_train : generic, train-test split ratio + OLS: * formula_expresion : stats models formula type, accepting numpy expressions This formula has to reference the features described under the data section. Example: REF ~ A * B + np.log(C/2) + Random Forest: * n_estimators : only for RF . number of forests to use * shuffle_split : only for RF . whether or not use shuffle split + LSTM: * n_lags : number of lags to account in the LSTM input * epochs : number of epochs (100 or more recommended) * batch_size : batch size (72 recommended) * verbose : verbose output during training * loss : loss function ('mse' or others) * optimizer : optimizer to use ( adam or others) * layers : specific layer structure. Example below: ``` \"layers\": [{\"type\": \"lstm\", \"neurons\": 100, \"return_seq\": true }, { \"type\": \"dropout\", \"rate\": 0.05 }, { \"type\": \"lstm\", \"neurons\": 100, \"return_seq\": true }, { \"type\": \"lstm\", \"neurons\": 50, \"return_seq\": false }, { \"type\": \"dropout\", \"rate\": 0.05 }, { \"type\": \"dense\", \"neurons\": 1, \"activation\": \"linear\" } ]}, ``` model_options : different options for the model calculated session_active_model : keep the model active after the task is completed export_model : export the model (parameters, hyperparameters, weights) to the model/model_type folder after the task is completed export_model_file : export the model file (not recommended for RF ) fo the same folder as above export_metrics : export metrics for the model or not save_plots : save model plots or not show_plots : show model plots or not","title":"Model"},{"location":"Guides/data/Analyse%20your%20data%20in%20batch/#plots","text":"The plot sub-task accepts two different libraries: matplotlib and plotly . The first one generates static images, that we can export for nice quality graphs, while plotly is more meant for exploratory analysis. Many plots? No problem In the case of the models, we only wanted one model per task, but it's not the case in the plots. \"plot\": { \"2\": {\"plot_type\": \"timeseries\", \"plotting_library\": \"matplotlib\", \"data\": {\"test\": \"TEST_1\", \"traces\": {\"1\": {\"device\": \"5262\", \"channel\" : \"EXT_PM_10\", \"subplot\": 1}, \"2\": {\"device\": \"5262\", \"channel\" : \"EXT_PM_25\", \"subplot\": 2}}}, \"options\": {\"show_plot\": false, \"separate_device_plots\": false, \"target_raster\": \"10Min\", \"max_date\": null, \"min_date\": null, \"export_path\": \"/Users/mac/Desktop\", \"file_name\": \"plot_pm\"}, \"formatting\": {\"xlabel\": \"Date (-)\", \"ylabel\": {\"1\": \"Temp degC\", \"2\": \"Hum (%rh)\"}, \"yrange\": {\"1\": [0, 40], \"2\": [0, 100]}, \"title\": \"PM\", \"sharex\":true, \"grid\": true, \"height\": 10, \"width\": 12} },","title":"Plots"},{"location":"Guides/data/Analyse%20your%20data%20in%20batch/#general-description","text":"This description is suitable for timeseries plots. Check below for other types: plot_type : the plot type to be used. Currently we support timeseries , violin , scatter_matrix , correlation_plot , heatmap , barplot , coherence_plot plotting_library : matplotlib or plotly data : the data to represent. This data has to be loaded previously. This is only to define the plot: test : each plot can only represent data from a single test traces : numbered entries to specify the device , channel and, if applicable, the subplot (only for timeseries) Same plot for many devices? Set \" device : 'all'\" and \"separate_device_plots\": true , and we will make separate plots for each device. options : show_plot : whether or not to show the plot. Not recommended for large amounts separate_device_plots : true in case we want a single plot for each device in traces: devices . false in case we want to merge all the devices in a single plot (for comparison purposes). Applicable for timeseries target_raster : the frequency of the data to plot. Reduces processing time min_date , max_date : if not null , they crop the data with those dates export_path : where to put the plot. If null , we won't export anything file_name : how to name the plot. We will append the trace name in case separate_device_plots is set to true formatting : xlabel : Name to tag the x axis of the plot ylabel : Name to tag the y axis(es) of the plot. It can be more than one value in a json style yrange : Range fro the y axis(es). Same as above title : plot title grid : to show the grid or not height , width : plot height and width","title":"General description"},{"location":"Guides/data/Analyse%20your%20data%20in%20batch/#plots-specifics","text":"Heatmap \"1\" : {\"plot_type\": \"heatmap\", \"plotting_library\": \"matplotlib\", \"data\": {\"test\": \"TEST_1\", \"traces\": {\"1\": {\"device\": \"all\", \"channel\" : \"NOISE_A\", \"subplot\": 1}}}, \"options\": {\"show_plot\": false, \"separate_device_plots\": true, \"target_raster\": \"10Min\", \"min_date\": null, \"max_date\": \"2019-01-03\", \"relative\": false, \"export_path\": \"/Users/macoscar/Desktop\", \"file_name\": \"heatmap_noise\"}, \"formatting\": {\"title\": \"Magnificent plot\", \"grid\": true, \"height\": 10, \"width\": 15, \"frequency_hours\": 6} } Note that in this case it only makes sense to put one trace. If we define \"device\": \"all\" , then \"separate_device_plots\": true plotting_library : recommended library is matplotlib (although we actually use seaborn) formatting : frequency_hours : to choose between 1, 2, ..., 6, 12, 24. Resamples the data to make it fit in bins of that size to create the heatmap Correlation plot \"1\" : {\"plot_type\": \"correlation_plot\", \"plotting_library\": \"matplotlib\", \"data\": {\"test\": \"TEST_1\", \"traces\": {\"1\": {\"device\": \"5261\", \"channel\" : \"NOISE_A\", \"subplot\": 1}, \"2\": {\"device\": \"5262\", \"channel\": \"TEMP\", \"subplot\": 1}}}, \"options\": {\"show_plot\": True, \"separate_device_plots\": false, \"export_path\": \"/Users/macoscar/Desktop\", \"file_name\": \"plot_corr\", \"target_raster\": '10Min', \"min_date\": None, \"max_date\": None}, \"formatting\": {\"jpkind\": 'scatter', \"title\": \"Magnificent plot\", \"xrange\": [0, 100], \"yrange\": [0, 40], \"grid\": True, \"height\": 10, \"width\": 15} } Note that in this case it only makes sense to put two traces, in the same subplot. formatting : jpkind : type as defined in sns.jointplot documentation , to choose from { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d Scatter plot matrix The big brother of the correlation plot : \"1\" : {\"plot_type\": \"scatter_matrix\", \"plotting_library\": \"matplotlib\", \"data\": {\"test\": \"TEST_1\", \"traces\": {\"1\": {\"device\": \"5262\", \"channel\" : \"GB_2W\", \"subplot\": 1}, \"2\": {\"device\": \"5262\", \"channel\": \"TEMP\", \"subplot\": 1}, \"3\": {\"device\": \"5262\", \"channel\": \"HUM\", \"subplot\": 1}}}, \"options\": {\"show_plot\": True, \"separate_device_plots\": False, \"export_path\": \"/Users/macoscar/Desktop\", \"file_name\": \"plot_scatter\", \"target_raster\": '10Min', \"min_date\": None, \"max_date\": None}, \"formatting\": {\"title\": \"Magnificent plot\", \"grid\": True, \"height\": 4, \"width\": 4} } Coherence plot This plot it's used to plot the coherence between x and y. Coherence is the normalized cross spectral density. More info here : \"1\" : {\"plot_type\": \"coherence_plot\", \"plotting_library\": \"matplotlib\", \"data\": {\"test\": \"TEST_1\", \"traces\": {\"1\": {\"device\": \"5262\", \"channel\" : \"GB_2W\", \"subplot\": 1}, \"2\": {\"device\": \"5262\", \"channel\": \"TEMP\", \"subplot\": 1}}}, \"options\": {\"show_plot\": True, \"separate_device_plots\": False, \"export_path\": \"/Users/macoscar/Desktop\", \"file_name\": \"plot_coherence\", \"target_raster\": '10Min', \"min_date\": None, \"max_date\": None}, \"formatting\": {\"title\": \"Magnificent plot\", \"grid\": True, \"height\": 10, \"width\": 15} } Violin plot This plot shows the signal distribution. \"1\" : {\"plot_type\": \"violin\", \"plotting_library\": \"matplotlib\", \"data\": {\"test\": \"TEST_1\", \"traces\": {\"1\": {\"device\": \"5262\", \"channel\" : \"DALLAS_TEMP\", \"subplot\": 1}, \"2\": {\"device\": \"5262\", \"channel\" : \"HUM\", \"subplot\": 1}, \"3\": {\"device\": \"5262\", \"channel\" : \"TEMP\", \"subplot\": 1}, \"4\": {\"device\": \"5262\", \"channel\" : \"GB_2W\", \"subplot\": 1}, \"5\": {\"device\": \"5262\", \"channel\" : \"GB_2A\", \"subplot\": 1}, \"6\": {\"device\": \"5262\", \"channel\" : \"GB_3W\", \"subplot\": 1}}}, \"options\": {\"show_plot\": True, \"separate_device_plots\": False, \"export_path\": \"/Users/macoscar/Desktop\", \"file_name\": \"plot_violin\", \"target_raster\": '10Min', \"min_date\": None, \"max_date\": '2019-01-03', \"relative\": False, \"ylabel\": {1: \"External temperature\", 2: \"Humidity (%RH)\", 3: \"Temperature (degC)\", 4: \"Wir\", 5: \"Wor\", 6: \"Wur\"}, \"yrange\": {1: [0, 90], 2: [300, 2000], 3: [0, 60], 4: [0, 60], 5: [0,60], 6: [0,60]}, }, \"formatting\": {\"title\": \"Magnificent plot\", \"grid\": True, \"height\": 10, \"width\": 15} }","title":"Plots specifics"},{"location":"Guides/data/Creating%20Interfaces/","text":"Custom dashboards and notifications \u00b6 When working on deployments that involve multiple devices a community might face the need to create their own page where the sensors\u2019 data is updated on real time. Also, it is sometimes useful to trigger notifications on different services. This can help to look at data from different spots simultaneously and also to create a sense of community among the devices\u2019 owners. This feature can be easily built using Freeboards or Node-RED , both online free visual tool that supports the creation of dashboards. Additionally, [Node-RED] can be used to create notifications on common services such as Twitter or Telegram. Node RED \u00b6 Node-RED is an open-source visual tool that enabled the wiring of hardware devices, APIs and online services. The tool can be easily installed on any local computer or it can be used directly on the Smart Citizen infrastructure. Examples You can find the following examples in the toolkit repository: Trigger notifications Device dashboard Freeboard \u00b6 WIP This is a work in progress. You can find a demo here Talk to the world \u00b6 Due to their unobtrusive nature, sensor technologies like Smart Citizen may easily blend in the background of users\u2019 attention. To bring the sensed data back to the surface and support sensemaking and awareness processes, it is possible to use the SCKs\u2019 data to trigger actions on the physical environment. A Raspberry Pi is probably the best tool to do so, since it can also be a suitable tool to engage people with coding, creating new internet of things (IoT) and physical computing applications. Blink example \u00b6 This example presents a small Python script that can turn two lights based on the real-time temperature data from a remote sensor on the Smart Citizen platform. We will implement a simple logic: When temperature on the remote sensor reaches 25 degrees then turn the first light on. When temperature is below 25 degrees turn the first light off and then turn the other light on. We will use the Raspberry Pi GPIOs (General Purpose Input Outputs)_ to connect to LED\u2019s that represent the status of our sensor. Step-by-step We will need to wire the two LED\u2019s following the schematic below: Once we have the Raspberry Pi running and connected to the internet we will need to save the Python script below on the desktop: # Smart Citizen Examples for the Raspberry Pi # # http://smartcitizen.me # # Trigger 2 LEDs depending on the temperature # For more information on the LEDs connection check: https://learn.sparkfun.com/tutorials/raspberry-gpio # For more information on the SmartCitizen API check: http://developer.smartcitizen.me # import RPi.GPIO as GPIO import json, requests, time GPIO.setup(18, GPIO.OUT) GPIO.setup(23, GPIO.OUT) while True: r = requests.get(\u2018https://api.smartcitizen.me/v0/devices/3292\u2019) data = json.loads(r.text) for sensor in data[\u2018data\u2019][\u2018sensors\u2019]: if sensor[\u2018description\u2019] == \u2018Temperature\u2019: #CO, NO2... print sensor[\u2018value\u2019] if sensor[\u2018value\u2019] > 25: print \u2018LED ON\u2019 GPIO.output(18, GPIO.HIGH) GPIO.output(23, GPIO.LOW) else: print \u2018LED OFF\u2019 GPIO.output(18, GPIO.LOW) GPIO.output(23, GPIO.HIGH) time.sleep(15) #Update every 15 seconds Finally, open the Terminal app and run: pi@raspberrypi ~ $ cd Desktop pi@raspberrypi Desktop $ sudo python smartcitizen-led.py The sensor box \u00b6 The Sensor Box is display installation aimed at engaging citizens to discuss about data on the public space. The installation was built by the Making Sense Barcelona community champions to talk about noise problems affecting neighbours around the Pla\u00e7a del Sol area in Barcelona. However the installation was built from the ground up to be replicable ad easy to built in oder Fab Labs worldwide. This aims at creating a tool communities can built to engage citizens to discuss about issues by using the data provided by the Smart Citizen Kit. The device comprises a wooden box equipped with a Smart Citizen Kit to which was a 5 meter long LED strip has been attached. Participants can press a button on the box to trigger the noise sensor. The original installation was battery powered but it can also be plugged to simplify the design and cost. Step-by-step Visit the public displays repository and download the directory. The /built folder contains the files for building the installation: NoiseBox.blend the whole installation design in blender, CableClip.stl and Hinge.stl 3D printed parts for the cable clips and hinges used, Acrylic.dxf the acrylic cover lasercut file and noiseBoxSchematic.fzz the wiring diagram for the installation. The /code folder contains the Arduino files to drive the installation. The Arduino sketch reads sensor data from an SCK 1.5 over the I2C bus when a user presses the button display the result on a WS2811 addressable LED strip. This code was originally created to display reading from the noise sensor in dB but it can quickly be changed to support any other sensor. It runs on an Arduino UNO but any compatible board can be used. Check out the Making Sense D2.3 Smart Citizen Toolkit report and Making Sense D.24 Smart Citizen Toolkit report updates for more examples!","title":"Creating interfaces"},{"location":"Guides/data/Creating%20Interfaces/#custom-dashboards-and-notifications","text":"When working on deployments that involve multiple devices a community might face the need to create their own page where the sensors\u2019 data is updated on real time. Also, it is sometimes useful to trigger notifications on different services. This can help to look at data from different spots simultaneously and also to create a sense of community among the devices\u2019 owners. This feature can be easily built using Freeboards or Node-RED , both online free visual tool that supports the creation of dashboards. Additionally, [Node-RED] can be used to create notifications on common services such as Twitter or Telegram.","title":"Custom dashboards and notifications"},{"location":"Guides/data/Creating%20Interfaces/#node-red","text":"Node-RED is an open-source visual tool that enabled the wiring of hardware devices, APIs and online services. The tool can be easily installed on any local computer or it can be used directly on the Smart Citizen infrastructure. Examples You can find the following examples in the toolkit repository: Trigger notifications Device dashboard","title":"Node RED"},{"location":"Guides/data/Creating%20Interfaces/#freeboard","text":"WIP This is a work in progress. You can find a demo here","title":"Freeboard"},{"location":"Guides/data/Creating%20Interfaces/#talk-to-the-world","text":"Due to their unobtrusive nature, sensor technologies like Smart Citizen may easily blend in the background of users\u2019 attention. To bring the sensed data back to the surface and support sensemaking and awareness processes, it is possible to use the SCKs\u2019 data to trigger actions on the physical environment. A Raspberry Pi is probably the best tool to do so, since it can also be a suitable tool to engage people with coding, creating new internet of things (IoT) and physical computing applications.","title":"Talk to the world"},{"location":"Guides/data/Creating%20Interfaces/#blink-example","text":"This example presents a small Python script that can turn two lights based on the real-time temperature data from a remote sensor on the Smart Citizen platform. We will implement a simple logic: When temperature on the remote sensor reaches 25 degrees then turn the first light on. When temperature is below 25 degrees turn the first light off and then turn the other light on. We will use the Raspberry Pi GPIOs (General Purpose Input Outputs)_ to connect to LED\u2019s that represent the status of our sensor. Step-by-step We will need to wire the two LED\u2019s following the schematic below: Once we have the Raspberry Pi running and connected to the internet we will need to save the Python script below on the desktop: # Smart Citizen Examples for the Raspberry Pi # # http://smartcitizen.me # # Trigger 2 LEDs depending on the temperature # For more information on the LEDs connection check: https://learn.sparkfun.com/tutorials/raspberry-gpio # For more information on the SmartCitizen API check: http://developer.smartcitizen.me # import RPi.GPIO as GPIO import json, requests, time GPIO.setup(18, GPIO.OUT) GPIO.setup(23, GPIO.OUT) while True: r = requests.get(\u2018https://api.smartcitizen.me/v0/devices/3292\u2019) data = json.loads(r.text) for sensor in data[\u2018data\u2019][\u2018sensors\u2019]: if sensor[\u2018description\u2019] == \u2018Temperature\u2019: #CO, NO2... print sensor[\u2018value\u2019] if sensor[\u2018value\u2019] > 25: print \u2018LED ON\u2019 GPIO.output(18, GPIO.HIGH) GPIO.output(23, GPIO.LOW) else: print \u2018LED OFF\u2019 GPIO.output(18, GPIO.LOW) GPIO.output(23, GPIO.HIGH) time.sleep(15) #Update every 15 seconds Finally, open the Terminal app and run: pi@raspberrypi ~ $ cd Desktop pi@raspberrypi Desktop $ sudo python smartcitizen-led.py","title":"Blink example"},{"location":"Guides/data/Creating%20Interfaces/#the-sensor-box","text":"The Sensor Box is display installation aimed at engaging citizens to discuss about data on the public space. The installation was built by the Making Sense Barcelona community champions to talk about noise problems affecting neighbours around the Pla\u00e7a del Sol area in Barcelona. However the installation was built from the ground up to be replicable ad easy to built in oder Fab Labs worldwide. This aims at creating a tool communities can built to engage citizens to discuss about issues by using the data provided by the Smart Citizen Kit. The device comprises a wooden box equipped with a Smart Citizen Kit to which was a 5 meter long LED strip has been attached. Participants can press a button on the box to trigger the noise sensor. The original installation was battery powered but it can also be plugged to simplify the design and cost. Step-by-step Visit the public displays repository and download the directory. The /built folder contains the files for building the installation: NoiseBox.blend the whole installation design in blender, CableClip.stl and Hinge.stl 3D printed parts for the cable clips and hinges used, Acrylic.dxf the acrylic cover lasercut file and noiseBoxSchematic.fzz the wiring diagram for the installation. The /code folder contains the Arduino files to drive the installation. The Arduino sketch reads sensor data from an SCK 1.5 over the I2C bus when a user presses the button display the result on a WS2811 addressable LED strip. This code was originally created to display reading from the noise sensor in dB but it can quickly be changed to support any other sensor. It runs on an Arduino UNO but any compatible board can be used. Check out the Making Sense D2.3 Smart Citizen Toolkit report and Making Sense D.24 Smart Citizen Toolkit report updates for more examples!","title":"The sensor box"},{"location":"Guides/data/Creating%20Models%20for%20Sensors%20Calibration/","text":"Model your sensor data \u00b6 In this section, we will detail how to develop models for our sensors. We will try two different approaches for model calibration: Ordinary Least Squares (OLS) : based on the statsmodels package , the model is able to ingest an expression referring to the kit's available data and perform OLS regression over the defined training and test data Machine Learning (LSTM) : based on the keras package using tensorflow in the backend. This framework can be used to train larger collections of data, among others: Robust to noise Learn non-linear relationships Aware of temporal dependence Load some data first We will need to load the data first, for this, check the guides to organise the data and to load it Ordinary Least Squares example \u00b6 Let's delve first into an OLS example. Info You can follow this example using this notebook from src.models.model import model_wrapper # Input model description model_description_ols = {\"model_name\": \"OLS_UCD\", \"model_type\": \"OLS\", \"model_target\": \"ALPHASENSE\", \"data\": {\"train\": {\"2019-03_EXT_UCD_URBAN_BACKGROUND_API\": {\"devices\": [\"5262\"], \"reference_device\": \"CITY_COUNCIL\"}}, \"test\": {\"2019-03_EXT_UCD_URBAN_BACKGROUND_API\": {\"devices\": [\"5565\"], \"reference_device\": \"CITY_COUNCIL\"}}, \"features\": {\"REF\": \"NO2_CONV\", \"A\": \"GB_2W\", \"B\": \"GB_2A\", \"C\": \"HUM\"}, \"data_options\": {\"frequency\": '1Min', \"clean_na\": True, \"clean_na_method\": \"drop\", \"min_date\": None, \"frequency\": \"1Min\", \"max_date\": '2019-01-15'}, }, \"hyperparameters\": {\"ratio_train\": 0.75}, \"model_options\": {\"session_active_model\": True, \"show_plots\": True, \"export_model\": False, \"export_model_file\": False, \"extract_metrics\": True} } More info Check the guide on batch analysis for a definition of each parameter. We have to keep at least the key REF within the \"features\" , but the rest can be renamed at will. We can also input whichever formula_expression for the model regression in the following format: \"expression\" : 'REF ~ A + np.log(B)' Which converts to: REF = A + log(B) REF = A + log(B) We can also define the ratio between the train and test dataset and the minimum dates to use within the datasets (globally): min_date = '2018-08-31 00:00:00' max_date = '2018-09-06 00:00:00' # Important that this is a float, don't forget the . \"hyperparameters\": {\"ratio_train\": 0.75} If we run this cell, we will perform model calibration, with the following output: OLS Regression Results ============================================================================== Dep. Variable: REF R-squared: 0.676 Model: OLS Adj. R-squared: 0.673 Method: Least Squares F-statistic: 197.5 Date: Thu, 06 Sep 2018 Prob (F-statistic): 1.87e-135 Time: 12:25:17 Log-Likelihood: 1142.9 No. Observations: 575 AIC: -2272. Df Residuals: 568 BIC: -2241. Df Model: 6 Covariance Type: nonrobust ================================================================================== coef std err t P>|t| [0.025 0.975] ---------------------------------------------------------------------------------- Intercept -3.7042 0.406 -9.133 0.000 -4.501 -2.908 A 0.0011 0.000 2.953 0.003 0.000 0.002 np.log(B) -3.863e-05 7.03e-06 -5.496 0.000 -5.24e-05 -2.48e-05 ============================================================================== Omnibus: 7.316 Durbin-Watson: 0.026 Prob(Omnibus): 0.026 Jarque-Bera (JB): 10.245 Skew: -0.076 Prob(JB): 0.00596 Kurtosis: 3.636 Cond. No. 4.29e+05 ============================================================================== Warnings: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. [2] The condition number is large, 4.29e+05. This might indicate that there are strong multicollinearity or other numerical problems. This output brings a lot of information. First, we find what the dependent variable is, in our case always 'REF' . The type of model used and some general information is shown below that. More statistically important information is found in the rest of the output. Some key data: R-squared and adjusted R-squared : this is our classic correlation coefficient or R 2 . The adjusted one aims to correct the model overfitting by the inclusion of too many variables, and for that introduces a penalty on the number of variables included Below, we can find a summary of the model coefficients applied to all the variables and the P>|t| term, which indicates the significance of the term introduced in the model Model quality diagnostics are also indicated. Kurtosis and skewness are metrics for determining the distribution of the residuals. They indicate how the residuals of the model resemble a normal distribution. Below, we will review more on diagnosis plots. The Jarque Bera test indicates if the residuals are normally distributed (the null hypothesis is a joint hypothesis of the skewness being zero and the excess kurtosis being zero), and a value of zero indicates that the data is normally distributed. If the Jarque Bera test is valid (in the case above it isn't), the Durbin Watson is applicable in order to check for autocorrelation of the residuals (meaning that the residuals of our model are related among themselves and that we haven't captured some characteristics of our data with the tested model). Finally, there is a warning at the bottom indicating that the condition number is large. It suggests we might have multicollinearity problems in our model, which means that some of the independent variables might be correlated among themselves and that they are probably not necessary. Our function also depicts the results in a graphical way for us to see the model itself. It will show the training and test datasets (as Reference Train and Reference Test respectively), and the prediction results. The mean and absolute confidence intervals for 95% confidence are also shown: Now we can look at some other model quality plots. If we run the cell below, we will obtain an adaptation of the summary plots from R : from linear_regression_utils import modelRplots %matplotlib inline modelRplots(model, dataTrain, dataTest) Let's review the output step by step: Residual vs Fitted and Scale Location plot : these plots represents the model heteroscedasticity , which is a representation of the residuals versus the fitted values. This plot is helpful to check if the errors are distributed homogeneously and that we are not penalising high, low, or other values. There is also a red line which represents the average trend of this distribution which, we want it to be horizontal. For more information visit here and here . Clearly, in this model we are missing something: Normal QQ : the qq-plot is a representation of the kurtosis and skewness of the residuals distribution. If the data were well described by a normal distribution, the values should be about the same, i.e.: on the diagonal (red line). For example, in our case the model presents a deviation on both tails, indicating skewness. In general, a simple rubric to interpret a qq-plot is that if a given tail twists off counterclockwise from the reference line, there is more data in that tail of your distribution than in a theoretical normal, and if a tail twists off clockwise there is less data in that tail of your distribution than in a theoretical normal. In other words: if both tails twist counterclockwise we have heavy tails (leptokurtosis), if both tails twist clockwise, we have light tails (platykurtosis), if the right tail twists counterclockwise and the left tail twists clockwise, we have right skew if the left tail twists counterclockwise and the right tail twists clockwise, we have left skew Residuals vs Leverage : this plot is probably the most complex of them all. It shows how much leverage one single point has on the whole regression. It can be interpreted as how the average line that passes through all the data (that we are calculating with the OLS) can be modified by 'far' points in the distribution, for example, outliers. This leverage can be seen as how much a single point is able to pull down or up the average line. One way to think about whether or not the results are driven by a given data point is to calculate how far the predicted values for your data would move if your model were fit without the data point in question. This calculated total distance is called Cook's distance. We can have four cases (more information from source, here ) everything is fine (the best) high-leverage, but low-standardized residual point low-leverage, but high-standardized residual point high-leverage, high-standardized residual point (the worst) In this case, we see that our model has some points with higher leverage but low residuals (probably not too bad) and that the higher residuals are found with low leverage, which means that our model is safe to outliers. If we run this function without the filtering, some outliers will be present and the plot turns into: Finally, we can export our model and generate some metrics to evaluate the results. Machine learning example \u00b6 Machine learning algorithms promise a better representation of the sensor's data, being able to learn robust non-linear models and sequential dependencies. For that reason, we have implemented toolset based on keras with Tensorflow backend, in order to train sequential models 3 . model_description_rf = {\"model_name\": \"RF_UCD\", \"model_type\": \"RF\", \"model_target\": \"ALPHASENSE\", \"data\": {\"train\": {\"2019-03_EXT_UCD_URBAN_BACKGROUND_API\": {\"devices\": [\"5262\"], \"reference_device\": \"CITY_COUNCIL\"}}, \"test\": {\"2019-03_EXT_UCD_URBAN_BACKGROUND_API\": {\"devices\": [\"5565\"], \"reference_device\": \"CITY_COUNCIL\"}}, \"features\": {\"REF\": \"NO2_CONV\", \"A\": \"GB_2W\", \"B\": \"GB_2A\", \"C\": \"HUM\"}, \"data_options\": {\"target_raster\": '1Min', \"clean_na\": True, \"clean_na_method\": \"drop\", \"min_date\": None, \"frequency\": \"1Min\", \"max_date\": '2019-01-15'}, }, \"hyperparameters\": {\"ratio_train\": 0.75, \"min_samples_leaf\": 2, \"max_features\": None, \"n_estimators\": 100, \"shuffle_split\": True}, \"model_options\": {\"session_active_model\": True, \"show_plots\": True, \"export_model\": False, \"export_model_file\": False, \"extract_metrics\": True} } Output: Using TensorFlow backend. ... Beginning Model RF_UCD Model type RF Preparing dataframe model for test 2019-03_EXT_UCD_URBAN_BACKGROUND_API Data combined successfully Creating models session in recordings Dataframe model generated successfully Training Model RF_UCD... Training done Variable: HUM_5262 Importance: 0.4 Variable: GB_2W_5262 Importance: 0.31 Variable: GB_2A_5262 Importance: 0.3 Calculating Metrics... Metrics Summary: Metric Train Test avg_ref 16.648 15.861 avg_est 16.666 16.000 sig_ref 11.438 10.584 sig_est 9.493 9.404 bias 0.019 0.139 normalised_bias 0.002 0.013 sigma_norm 0.830 0.888 sign_sigma -1.000 -1.000 rsquared 0.799 0.879 RMSD 5.124 3.677 RMSD_norm_unb 0.453 0.351 No specifics for RF type Preparing devices from prediction Channel 5262_RF_UCD prediction finished This will also output some nice plots for visually checking our model performance: And some extras about variable importance: Model comparison \u00b6 Here is a visual comparison of both models: It is very difficult though, to know which one is performing better. Let's then evaluate and compare our models. In order to evaluate it's metrics, we will be using the following principles 1 2 : Info In all of the expressions below, the letter m indicates the model field, r indicates the reference field. Overbar is average and \\sigma \\sigma is the standard deviation. Linear correlation Coefficient A measure of the agreement between two signals: R = {{1 \\over N} \\sum_{i=0}^n (m_n-\\overline m)( r_n-\\overline r ) \\over \\sigma_m\\sigma_r} R = {{1 \\over N} \\sum_{i=0}^n (m_n-\\overline m)( r_n-\\overline r ) \\over \\sigma_m\\sigma_r} The correlation coefficient is bounded by the range -1 \\le R \\le 1 -1 \\le R \\le 1 . However, it is difficult to discern information about the differences in amplitude between two signals from R alone. Normalized standard deviation A measure of the differences in amplitude between two signals: $$ \\sigma * = {\\sigma_m \\over \\sigma_r} $$ unbiased Root-Mean-Square Difference A measure of how close the modelled points fall to teach other: RMSD' = \\Bigl( {1 \\over N} \\sum_{n=1}^N [(m_n - \\overline m)-(r_n - \\overline r)]^2 \\Bigr)^{0.5} RMSD' = \\Bigl( {1 \\over N} \\sum_{n=1}^N [(m_n - \\overline m)-(r_n - \\overline r)]^2 \\Bigr)^{0.5} Potential Bias Difference between the means of two fields: $$ B = \\overline m - \\overline r $$ Total RMSD A measure of the average magnitude of difference: $$ RMSD = \\Bigl( {1 \\over N} \\sum_{n=1}^N (m_n - r_n)^2 \\Bigr)^{0.5} $$ In other words, the unbiased RMSD (RMSD') is equal to the total RMSD if there is no bias between the model and the reference fields (i.e. B = 0). The relationship between both reads: RMSD^2 = B^2 + RMSD'^2 RMSD^2 = B^2 + RMSD'^2 In contrast, the unbiased RMSD may be conceptualized as an overall measure of the agreement between the aplitude ( \\sigma \\sigma ) and phase ( \\phi \\phi ) of two temporal patterns. For this reason, the correlation coefficient ( R R ), normalised standard deviation ( \\sigma* \\sigma* ), and unbiased RMSD are all referred to as patern statistics , related to one another by: RMSD'^2 = \\sigma_r^2 + \\sigma_m^2 - 2\\sigma_r\\sigma_mR RMSD'^2 = \\sigma_r^2 + \\sigma_m^2 - 2\\sigma_r\\sigma_mR Normalized and unbiased RMSD If we recast in standard deviation normalized units (indicated by the asterisk) it becomes: RMSD'^* = \\sqrt { 1 + \\sigma*^2 - 2\\sigma*R} RMSD'^* = \\sqrt { 1 + \\sigma*^2 - 2\\sigma*R} NB : the minimum of this function occurrs when \\sigma* = R \\sigma* = R . Normalized bias Gives information about the mean difference but normalized by the \\sigma* \\sigma* $$ B* = {\\overline m - \\overline r \\over \\sigma_r} $$ Target diagrams The target diagram is a plot that provides summary information about the pattern statistics as well as the bias thus yielding an overview of their respective contributions to the total RMSD. In a simple Cartesian coordinate system, the unbiased RMSD may serve as the X-axis and the bias may serve as the Y-axis. The distance between the origin and the model versus observation statistics (any point, s, within the X,Y Cartesian space) is then equal to the total RMSD. If all is normalized by the \\sigma_r \\sigma_r , the distance from the origin is again the standard deviation normalized total RMSD : 1 RMSD^{*2} = B^{*2}+RMSD^{*'2} RMSD^{*2} = B^{*2}+RMSD^{*'2} The resulting target diagram then provides information about: whether the \\sigma_m \\sigma_m is larger or smaller thann the \\sigma_r \\sigma_r whether there is a positive or negative bias Image Source: Jolliff et al. 1 Any point greater than RMSD*=1 is to be considered a poor performer since it doesn't offer improvement over the time series average. Interestingly, the target diagram has no information about the correlation coefficient R, but some can be inferred, knowing that all the points within the RMSD* <1 are positively correlated (R>0), although, in 1 it is shown that a circle marker with radius M_{R1} M_{R1} , means that all the points between that marker and the origin have a R coefficient larger than R1, where: M_{R1} = min(RMSD*') = \\sqrt {1+R1^2-2R1^2} M_{R1} = min(RMSD*') = \\sqrt {1+R1^2-2R1^2} Results \u00b6 Let's now compare both models with the target diagram: from src.visualization.visualization import targetDiagram %matplotlib inline models = dict() group = 0 for model in [ols_model, rf_model]: for dataset in ['train', 'validation']: if dataset in model.metrics.keys(): models[model.name + '_' + dataset] = model.metrics[dataset] models[model.name + '_' + dataset]['group'] = group targetDiagram(models, True, 'seaborn-talk') Output: Here, every point that falls inside the yellow circle, will have an R 2 over 0.7, and so will be the red and green for R 2 over 0.5 and 0.9 respectively. We see that only one of our models performs well in that sense, which is the training dataset of the OLS. However, this dataset performs pretty badly in the test dataset, being the LSTM options much better. This target diagram offers information about how the hyperparameters affect our networks. For instance, increasing the training epochs from 100 to 200 does not affect greatly on model performance, but the effect of filtering the data beforehand to reduce the noise shows a much better model performance in both, training and test dataframe. Export the models \u00b6 Let's now assume that we are happy with our models. We can now export them: ols_model.export('directory') rf_model.export('directory') Output: Saving metrics Saving hyperparameters Saving features Model included in summary And in our directory: \u279c models ls -l RF_UCD_features.sav RF_UCD_hyperparameters.sav RF_UCD_metrics.sav Save the model file If you want to save the model file into the disk, change the option \"export_model\": False, to True ! Be careful though, it can take quite a lot of space. If you just want to keep the model to test in the current session, it is best to just use \"session_active_model\": True, . References \u00b6 Engineering statistics handbook \u21a9 \u21a9 \u21a9 \u21a9 Summary diagrams for coupled hydrodynamic-ecosystem model skill assessment (Jolliff et al.) \u21a9 Machine learning mastery \u21a9","title":"Creating Models for Sensors Calibration"},{"location":"Guides/data/Creating%20Models%20for%20Sensors%20Calibration/#model-your-sensor-data","text":"In this section, we will detail how to develop models for our sensors. We will try two different approaches for model calibration: Ordinary Least Squares (OLS) : based on the statsmodels package , the model is able to ingest an expression referring to the kit's available data and perform OLS regression over the defined training and test data Machine Learning (LSTM) : based on the keras package using tensorflow in the backend. This framework can be used to train larger collections of data, among others: Robust to noise Learn non-linear relationships Aware of temporal dependence Load some data first We will need to load the data first, for this, check the guides to organise the data and to load it","title":"Model your sensor data"},{"location":"Guides/data/Creating%20Models%20for%20Sensors%20Calibration/#ordinary-least-squares-example","text":"Let's delve first into an OLS example. Info You can follow this example using this notebook from src.models.model import model_wrapper # Input model description model_description_ols = {\"model_name\": \"OLS_UCD\", \"model_type\": \"OLS\", \"model_target\": \"ALPHASENSE\", \"data\": {\"train\": {\"2019-03_EXT_UCD_URBAN_BACKGROUND_API\": {\"devices\": [\"5262\"], \"reference_device\": \"CITY_COUNCIL\"}}, \"test\": {\"2019-03_EXT_UCD_URBAN_BACKGROUND_API\": {\"devices\": [\"5565\"], \"reference_device\": \"CITY_COUNCIL\"}}, \"features\": {\"REF\": \"NO2_CONV\", \"A\": \"GB_2W\", \"B\": \"GB_2A\", \"C\": \"HUM\"}, \"data_options\": {\"frequency\": '1Min', \"clean_na\": True, \"clean_na_method\": \"drop\", \"min_date\": None, \"frequency\": \"1Min\", \"max_date\": '2019-01-15'}, }, \"hyperparameters\": {\"ratio_train\": 0.75}, \"model_options\": {\"session_active_model\": True, \"show_plots\": True, \"export_model\": False, \"export_model_file\": False, \"extract_metrics\": True} } More info Check the guide on batch analysis for a definition of each parameter. We have to keep at least the key REF within the \"features\" , but the rest can be renamed at will. We can also input whichever formula_expression for the model regression in the following format: \"expression\" : 'REF ~ A + np.log(B)' Which converts to: REF = A + log(B) REF = A + log(B) We can also define the ratio between the train and test dataset and the minimum dates to use within the datasets (globally): min_date = '2018-08-31 00:00:00' max_date = '2018-09-06 00:00:00' # Important that this is a float, don't forget the . \"hyperparameters\": {\"ratio_train\": 0.75} If we run this cell, we will perform model calibration, with the following output: OLS Regression Results ============================================================================== Dep. Variable: REF R-squared: 0.676 Model: OLS Adj. R-squared: 0.673 Method: Least Squares F-statistic: 197.5 Date: Thu, 06 Sep 2018 Prob (F-statistic): 1.87e-135 Time: 12:25:17 Log-Likelihood: 1142.9 No. Observations: 575 AIC: -2272. Df Residuals: 568 BIC: -2241. Df Model: 6 Covariance Type: nonrobust ================================================================================== coef std err t P>|t| [0.025 0.975] ---------------------------------------------------------------------------------- Intercept -3.7042 0.406 -9.133 0.000 -4.501 -2.908 A 0.0011 0.000 2.953 0.003 0.000 0.002 np.log(B) -3.863e-05 7.03e-06 -5.496 0.000 -5.24e-05 -2.48e-05 ============================================================================== Omnibus: 7.316 Durbin-Watson: 0.026 Prob(Omnibus): 0.026 Jarque-Bera (JB): 10.245 Skew: -0.076 Prob(JB): 0.00596 Kurtosis: 3.636 Cond. No. 4.29e+05 ============================================================================== Warnings: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. [2] The condition number is large, 4.29e+05. This might indicate that there are strong multicollinearity or other numerical problems. This output brings a lot of information. First, we find what the dependent variable is, in our case always 'REF' . The type of model used and some general information is shown below that. More statistically important information is found in the rest of the output. Some key data: R-squared and adjusted R-squared : this is our classic correlation coefficient or R 2 . The adjusted one aims to correct the model overfitting by the inclusion of too many variables, and for that introduces a penalty on the number of variables included Below, we can find a summary of the model coefficients applied to all the variables and the P>|t| term, which indicates the significance of the term introduced in the model Model quality diagnostics are also indicated. Kurtosis and skewness are metrics for determining the distribution of the residuals. They indicate how the residuals of the model resemble a normal distribution. Below, we will review more on diagnosis plots. The Jarque Bera test indicates if the residuals are normally distributed (the null hypothesis is a joint hypothesis of the skewness being zero and the excess kurtosis being zero), and a value of zero indicates that the data is normally distributed. If the Jarque Bera test is valid (in the case above it isn't), the Durbin Watson is applicable in order to check for autocorrelation of the residuals (meaning that the residuals of our model are related among themselves and that we haven't captured some characteristics of our data with the tested model). Finally, there is a warning at the bottom indicating that the condition number is large. It suggests we might have multicollinearity problems in our model, which means that some of the independent variables might be correlated among themselves and that they are probably not necessary. Our function also depicts the results in a graphical way for us to see the model itself. It will show the training and test datasets (as Reference Train and Reference Test respectively), and the prediction results. The mean and absolute confidence intervals for 95% confidence are also shown: Now we can look at some other model quality plots. If we run the cell below, we will obtain an adaptation of the summary plots from R : from linear_regression_utils import modelRplots %matplotlib inline modelRplots(model, dataTrain, dataTest) Let's review the output step by step: Residual vs Fitted and Scale Location plot : these plots represents the model heteroscedasticity , which is a representation of the residuals versus the fitted values. This plot is helpful to check if the errors are distributed homogeneously and that we are not penalising high, low, or other values. There is also a red line which represents the average trend of this distribution which, we want it to be horizontal. For more information visit here and here . Clearly, in this model we are missing something: Normal QQ : the qq-plot is a representation of the kurtosis and skewness of the residuals distribution. If the data were well described by a normal distribution, the values should be about the same, i.e.: on the diagonal (red line). For example, in our case the model presents a deviation on both tails, indicating skewness. In general, a simple rubric to interpret a qq-plot is that if a given tail twists off counterclockwise from the reference line, there is more data in that tail of your distribution than in a theoretical normal, and if a tail twists off clockwise there is less data in that tail of your distribution than in a theoretical normal. In other words: if both tails twist counterclockwise we have heavy tails (leptokurtosis), if both tails twist clockwise, we have light tails (platykurtosis), if the right tail twists counterclockwise and the left tail twists clockwise, we have right skew if the left tail twists counterclockwise and the right tail twists clockwise, we have left skew Residuals vs Leverage : this plot is probably the most complex of them all. It shows how much leverage one single point has on the whole regression. It can be interpreted as how the average line that passes through all the data (that we are calculating with the OLS) can be modified by 'far' points in the distribution, for example, outliers. This leverage can be seen as how much a single point is able to pull down or up the average line. One way to think about whether or not the results are driven by a given data point is to calculate how far the predicted values for your data would move if your model were fit without the data point in question. This calculated total distance is called Cook's distance. We can have four cases (more information from source, here ) everything is fine (the best) high-leverage, but low-standardized residual point low-leverage, but high-standardized residual point high-leverage, high-standardized residual point (the worst) In this case, we see that our model has some points with higher leverage but low residuals (probably not too bad) and that the higher residuals are found with low leverage, which means that our model is safe to outliers. If we run this function without the filtering, some outliers will be present and the plot turns into: Finally, we can export our model and generate some metrics to evaluate the results.","title":"Ordinary Least Squares example"},{"location":"Guides/data/Creating%20Models%20for%20Sensors%20Calibration/#machine-learning-example","text":"Machine learning algorithms promise a better representation of the sensor's data, being able to learn robust non-linear models and sequential dependencies. For that reason, we have implemented toolset based on keras with Tensorflow backend, in order to train sequential models 3 . model_description_rf = {\"model_name\": \"RF_UCD\", \"model_type\": \"RF\", \"model_target\": \"ALPHASENSE\", \"data\": {\"train\": {\"2019-03_EXT_UCD_URBAN_BACKGROUND_API\": {\"devices\": [\"5262\"], \"reference_device\": \"CITY_COUNCIL\"}}, \"test\": {\"2019-03_EXT_UCD_URBAN_BACKGROUND_API\": {\"devices\": [\"5565\"], \"reference_device\": \"CITY_COUNCIL\"}}, \"features\": {\"REF\": \"NO2_CONV\", \"A\": \"GB_2W\", \"B\": \"GB_2A\", \"C\": \"HUM\"}, \"data_options\": {\"target_raster\": '1Min', \"clean_na\": True, \"clean_na_method\": \"drop\", \"min_date\": None, \"frequency\": \"1Min\", \"max_date\": '2019-01-15'}, }, \"hyperparameters\": {\"ratio_train\": 0.75, \"min_samples_leaf\": 2, \"max_features\": None, \"n_estimators\": 100, \"shuffle_split\": True}, \"model_options\": {\"session_active_model\": True, \"show_plots\": True, \"export_model\": False, \"export_model_file\": False, \"extract_metrics\": True} } Output: Using TensorFlow backend. ... Beginning Model RF_UCD Model type RF Preparing dataframe model for test 2019-03_EXT_UCD_URBAN_BACKGROUND_API Data combined successfully Creating models session in recordings Dataframe model generated successfully Training Model RF_UCD... Training done Variable: HUM_5262 Importance: 0.4 Variable: GB_2W_5262 Importance: 0.31 Variable: GB_2A_5262 Importance: 0.3 Calculating Metrics... Metrics Summary: Metric Train Test avg_ref 16.648 15.861 avg_est 16.666 16.000 sig_ref 11.438 10.584 sig_est 9.493 9.404 bias 0.019 0.139 normalised_bias 0.002 0.013 sigma_norm 0.830 0.888 sign_sigma -1.000 -1.000 rsquared 0.799 0.879 RMSD 5.124 3.677 RMSD_norm_unb 0.453 0.351 No specifics for RF type Preparing devices from prediction Channel 5262_RF_UCD prediction finished This will also output some nice plots for visually checking our model performance: And some extras about variable importance:","title":"Machine learning example"},{"location":"Guides/data/Creating%20Models%20for%20Sensors%20Calibration/#model-comparison","text":"Here is a visual comparison of both models: It is very difficult though, to know which one is performing better. Let's then evaluate and compare our models. In order to evaluate it's metrics, we will be using the following principles 1 2 : Info In all of the expressions below, the letter m indicates the model field, r indicates the reference field. Overbar is average and \\sigma \\sigma is the standard deviation. Linear correlation Coefficient A measure of the agreement between two signals: R = {{1 \\over N} \\sum_{i=0}^n (m_n-\\overline m)( r_n-\\overline r ) \\over \\sigma_m\\sigma_r} R = {{1 \\over N} \\sum_{i=0}^n (m_n-\\overline m)( r_n-\\overline r ) \\over \\sigma_m\\sigma_r} The correlation coefficient is bounded by the range -1 \\le R \\le 1 -1 \\le R \\le 1 . However, it is difficult to discern information about the differences in amplitude between two signals from R alone. Normalized standard deviation A measure of the differences in amplitude between two signals: $$ \\sigma * = {\\sigma_m \\over \\sigma_r} $$ unbiased Root-Mean-Square Difference A measure of how close the modelled points fall to teach other: RMSD' = \\Bigl( {1 \\over N} \\sum_{n=1}^N [(m_n - \\overline m)-(r_n - \\overline r)]^2 \\Bigr)^{0.5} RMSD' = \\Bigl( {1 \\over N} \\sum_{n=1}^N [(m_n - \\overline m)-(r_n - \\overline r)]^2 \\Bigr)^{0.5} Potential Bias Difference between the means of two fields: $$ B = \\overline m - \\overline r $$ Total RMSD A measure of the average magnitude of difference: $$ RMSD = \\Bigl( {1 \\over N} \\sum_{n=1}^N (m_n - r_n)^2 \\Bigr)^{0.5} $$ In other words, the unbiased RMSD (RMSD') is equal to the total RMSD if there is no bias between the model and the reference fields (i.e. B = 0). The relationship between both reads: RMSD^2 = B^2 + RMSD'^2 RMSD^2 = B^2 + RMSD'^2 In contrast, the unbiased RMSD may be conceptualized as an overall measure of the agreement between the aplitude ( \\sigma \\sigma ) and phase ( \\phi \\phi ) of two temporal patterns. For this reason, the correlation coefficient ( R R ), normalised standard deviation ( \\sigma* \\sigma* ), and unbiased RMSD are all referred to as patern statistics , related to one another by: RMSD'^2 = \\sigma_r^2 + \\sigma_m^2 - 2\\sigma_r\\sigma_mR RMSD'^2 = \\sigma_r^2 + \\sigma_m^2 - 2\\sigma_r\\sigma_mR Normalized and unbiased RMSD If we recast in standard deviation normalized units (indicated by the asterisk) it becomes: RMSD'^* = \\sqrt { 1 + \\sigma*^2 - 2\\sigma*R} RMSD'^* = \\sqrt { 1 + \\sigma*^2 - 2\\sigma*R} NB : the minimum of this function occurrs when \\sigma* = R \\sigma* = R . Normalized bias Gives information about the mean difference but normalized by the \\sigma* \\sigma* $$ B* = {\\overline m - \\overline r \\over \\sigma_r} $$ Target diagrams The target diagram is a plot that provides summary information about the pattern statistics as well as the bias thus yielding an overview of their respective contributions to the total RMSD. In a simple Cartesian coordinate system, the unbiased RMSD may serve as the X-axis and the bias may serve as the Y-axis. The distance between the origin and the model versus observation statistics (any point, s, within the X,Y Cartesian space) is then equal to the total RMSD. If all is normalized by the \\sigma_r \\sigma_r , the distance from the origin is again the standard deviation normalized total RMSD : 1 RMSD^{*2} = B^{*2}+RMSD^{*'2} RMSD^{*2} = B^{*2}+RMSD^{*'2} The resulting target diagram then provides information about: whether the \\sigma_m \\sigma_m is larger or smaller thann the \\sigma_r \\sigma_r whether there is a positive or negative bias Image Source: Jolliff et al. 1 Any point greater than RMSD*=1 is to be considered a poor performer since it doesn't offer improvement over the time series average. Interestingly, the target diagram has no information about the correlation coefficient R, but some can be inferred, knowing that all the points within the RMSD* <1 are positively correlated (R>0), although, in 1 it is shown that a circle marker with radius M_{R1} M_{R1} , means that all the points between that marker and the origin have a R coefficient larger than R1, where: M_{R1} = min(RMSD*') = \\sqrt {1+R1^2-2R1^2} M_{R1} = min(RMSD*') = \\sqrt {1+R1^2-2R1^2}","title":"Model comparison"},{"location":"Guides/data/Creating%20Models%20for%20Sensors%20Calibration/#results","text":"Let's now compare both models with the target diagram: from src.visualization.visualization import targetDiagram %matplotlib inline models = dict() group = 0 for model in [ols_model, rf_model]: for dataset in ['train', 'validation']: if dataset in model.metrics.keys(): models[model.name + '_' + dataset] = model.metrics[dataset] models[model.name + '_' + dataset]['group'] = group targetDiagram(models, True, 'seaborn-talk') Output: Here, every point that falls inside the yellow circle, will have an R 2 over 0.7, and so will be the red and green for R 2 over 0.5 and 0.9 respectively. We see that only one of our models performs well in that sense, which is the training dataset of the OLS. However, this dataset performs pretty badly in the test dataset, being the LSTM options much better. This target diagram offers information about how the hyperparameters affect our networks. For instance, increasing the training epochs from 100 to 200 does not affect greatly on model performance, but the effect of filtering the data beforehand to reduce the noise shows a much better model performance in both, training and test dataframe.","title":"Results"},{"location":"Guides/data/Creating%20Models%20for%20Sensors%20Calibration/#export-the-models","text":"Let's now assume that we are happy with our models. We can now export them: ols_model.export('directory') rf_model.export('directory') Output: Saving metrics Saving hyperparameters Saving features Model included in summary And in our directory: \u279c models ls -l RF_UCD_features.sav RF_UCD_hyperparameters.sav RF_UCD_metrics.sav Save the model file If you want to save the model file into the disk, change the option \"export_model\": False, to True ! Be careful though, it can take quite a lot of space. If you just want to keep the model to test in the current session, it is best to just use \"session_active_model\": True, .","title":"Export the models"},{"location":"Guides/data/Creating%20Models%20for%20Sensors%20Calibration/#references","text":"Engineering statistics handbook \u21a9 \u21a9 \u21a9 \u21a9 Summary diagrams for coupled hydrodynamic-ecosystem model skill assessment (Jolliff et al.) \u21a9 Machine learning mastery \u21a9","title":"References"},{"location":"Guides/data/Custom%20data%20processing/","text":"Custom data processing \u00b6 WIP This is a WIP. More info coming very soon. Data is processed outside of the sensors in a periodic way by scdata . There are three ways to have a custom data processing: Contact us and request it Set up a development environment and following the example on data processing Follow the guide below for automatic processing Automatic data processing \u00b6 Data is processed in a recurrent manner whenever there is postprocessing in the device. You can check it by visiting https://api.smartcitizen.me/v0/devices/<device-id> where <device-id> is the number that follows in the url https://smartcitizen.me/kits/XXXXXX . How to do it? Visit these instructions to make sure your postprocessing is safely stored. The postprocessing is composed of several fields as defined in the guide . In order to have custom postprocessing workflows, you need to modify the blueprint_url and maybe , the hardware url. The blueprint_url should point to a valid json file following the structure shown in the examples folder in the scdata repository . Inside this blueprint, metrics can be added to be generated according to the device 's available sensors. The Defining custom functions \u00b6 If you want to define custom processing functions, make a Pull Request to the repository of scdata to integrate your functions. Otherwise, you can make a fork and install the package in editable mode . You can then add the functions in the device processing folder of your own. We are available at support@smartcitizen.me for more support.","title":"Custom data processing"},{"location":"Guides/data/Custom%20data%20processing/#custom-data-processing","text":"WIP This is a WIP. More info coming very soon. Data is processed outside of the sensors in a periodic way by scdata . There are three ways to have a custom data processing: Contact us and request it Set up a development environment and following the example on data processing Follow the guide below for automatic processing","title":"Custom data processing"},{"location":"Guides/data/Custom%20data%20processing/#automatic-data-processing","text":"Data is processed in a recurrent manner whenever there is postprocessing in the device. You can check it by visiting https://api.smartcitizen.me/v0/devices/<device-id> where <device-id> is the number that follows in the url https://smartcitizen.me/kits/XXXXXX . How to do it? Visit these instructions to make sure your postprocessing is safely stored. The postprocessing is composed of several fields as defined in the guide . In order to have custom postprocessing workflows, you need to modify the blueprint_url and maybe , the hardware url. The blueprint_url should point to a valid json file following the structure shown in the examples folder in the scdata repository . Inside this blueprint, metrics can be added to be generated according to the device 's available sensors. The","title":"Automatic data processing"},{"location":"Guides/data/Custom%20data%20processing/#defining-custom-functions","text":"If you want to define custom processing functions, make a Pull Request to the repository of scdata to integrate your functions. Otherwise, you can make a fork and install the package in editable mode . You can then add the functions in the device processing folder of your own. We are available at support@smartcitizen.me for more support.","title":"Defining custom functions"},{"location":"Guides/data/Handling%20calibration%20data/","text":"Handling calibration data \u00b6 The calibration data for is managed by an unique hardware ID, and should be visible in the device itself (on a sticker, normally on the form of SCXSXX000X ). This ID serves to identify the hardware calibration data, alongside with the processing description we want for that device. All this information can be saved in the platform's device using the postprocessing field of the device. How to store data \u00b6 The easiest way is to go to the kit-edit view of your kit: https://smartcitizen.me/kits/XXXXX/edit In there, you can update the field hardware_id . This field defines an url for hardware calibration IDs to be loaded from, as well as some additional information. It virtually can load a valid json from any url, as long as it follows the instructions defined here . The default hardware definitions are in the scdata github repository and can be found per ID.json . You can just take the corresponding ID and click in the raw button to get the url needed. This field should look something like: https://raw.githubusercontent.com/fablabbcn/smartcitizen-data/master/hardware/SCAS21001.json . This json file needs to follow the instructions below to successfully represent a valid postprocessing: { \"blueprint_url\": \"https://raw.githubusercontent.com/fablabbcn/smartcitizen-data/master/blueprints/sck_21.json\", \"description\": \"Smart Citizen Kit 2.1 With PMS5003\", \"versions\": [], \"forwarding\": \"nilu\" } blueprint_url : this field defines the post-processing to be done in the form of a device-blueprint . It virtually can load a valid json from any url, as long as it follows the instructions defined here and here . If you want to use the base processing select it from the blueprints folder , only selecting the raw json as mentioned above. If you have doubts, please, contact us to make sure everything will run smoothly. Finally, other blueprints can be added as defined in this guide description : brief description of the hardware versions : list containing hardware versions (in case sensors where replaced, but kept in the same physical unit). \"versions\": [ { \"ids\": { \"AS_48_01\": \"162581715\", \"AS_48_23\": \"202365014\", \"AS_4A_01\": \"164200218\", \"AS_4A_23\": \"204440527\" }, \"from\": \"2020-11-30\", \"to\": null } ] forwarding : if this device needs to be forwarded to another data platform. Current supported platforms are specified in the connectors folder Alternative method \u00b6 Alternatively, in order to post this data, you can follow to other methods: either send us the kit ID and it's corresponding hardware ID, and we will do this for you or, if you are familiar with http requests you can post this data as such: curl 'https://api.smartcitizen.me/v0/devices/<DEVICE-ID>' -X PATCH -H 'Authorization: Bearer <BEARER-FROM-YOUR-USER-PROFILE>' -H 'Content-Type: application/json;charset=UTF-8' --data-binary '{\"postprocessing_attributes\": {\"blueprint_url\": \"https://raw.githubusercontent.com/fablabbcn/smartcitizen-data/master/blueprints/<BLUEPRINT_ID>.json\", \"hardware_url\": \"https://raw.githubusercontent.com/fablabbcn/smartcitizen-data/master/hardware/<HARDWARE_ID>.json\"}}' --compressed You can get your authorization token on your user profile page in the OAuth section. Make sure to change the following fields in the command above: <DEVICE-ID> <BEARER-FROM-YOUR-USER-PROFILE> <HARDWARE_ID> , for instance SCAS210002 <BLUEPRINT_ID> , for instance sc_21_station_module for Smart Citizen Stations Check it out Once this process is done, you should be able to check that the postprocessing is safely stored in the Platform by visiting: https://api.smartcitizen.me/v0/devices/<DEVICE-ID>/ . After this, we will take care of processing the data in a periodic way.","title":"Handling calibration data"},{"location":"Guides/data/Handling%20calibration%20data/#handling-calibration-data","text":"The calibration data for is managed by an unique hardware ID, and should be visible in the device itself (on a sticker, normally on the form of SCXSXX000X ). This ID serves to identify the hardware calibration data, alongside with the processing description we want for that device. All this information can be saved in the platform's device using the postprocessing field of the device.","title":"Handling calibration data"},{"location":"Guides/data/Handling%20calibration%20data/#how-to-store-data","text":"The easiest way is to go to the kit-edit view of your kit: https://smartcitizen.me/kits/XXXXX/edit In there, you can update the field hardware_id . This field defines an url for hardware calibration IDs to be loaded from, as well as some additional information. It virtually can load a valid json from any url, as long as it follows the instructions defined here . The default hardware definitions are in the scdata github repository and can be found per ID.json . You can just take the corresponding ID and click in the raw button to get the url needed. This field should look something like: https://raw.githubusercontent.com/fablabbcn/smartcitizen-data/master/hardware/SCAS21001.json . This json file needs to follow the instructions below to successfully represent a valid postprocessing: { \"blueprint_url\": \"https://raw.githubusercontent.com/fablabbcn/smartcitizen-data/master/blueprints/sck_21.json\", \"description\": \"Smart Citizen Kit 2.1 With PMS5003\", \"versions\": [], \"forwarding\": \"nilu\" } blueprint_url : this field defines the post-processing to be done in the form of a device-blueprint . It virtually can load a valid json from any url, as long as it follows the instructions defined here and here . If you want to use the base processing select it from the blueprints folder , only selecting the raw json as mentioned above. If you have doubts, please, contact us to make sure everything will run smoothly. Finally, other blueprints can be added as defined in this guide description : brief description of the hardware versions : list containing hardware versions (in case sensors where replaced, but kept in the same physical unit). \"versions\": [ { \"ids\": { \"AS_48_01\": \"162581715\", \"AS_48_23\": \"202365014\", \"AS_4A_01\": \"164200218\", \"AS_4A_23\": \"204440527\" }, \"from\": \"2020-11-30\", \"to\": null } ] forwarding : if this device needs to be forwarded to another data platform. Current supported platforms are specified in the connectors folder","title":"How to store data"},{"location":"Guides/data/Handling%20calibration%20data/#alternative-method","text":"Alternatively, in order to post this data, you can follow to other methods: either send us the kit ID and it's corresponding hardware ID, and we will do this for you or, if you are familiar with http requests you can post this data as such: curl 'https://api.smartcitizen.me/v0/devices/<DEVICE-ID>' -X PATCH -H 'Authorization: Bearer <BEARER-FROM-YOUR-USER-PROFILE>' -H 'Content-Type: application/json;charset=UTF-8' --data-binary '{\"postprocessing_attributes\": {\"blueprint_url\": \"https://raw.githubusercontent.com/fablabbcn/smartcitizen-data/master/blueprints/<BLUEPRINT_ID>.json\", \"hardware_url\": \"https://raw.githubusercontent.com/fablabbcn/smartcitizen-data/master/hardware/<HARDWARE_ID>.json\"}}' --compressed You can get your authorization token on your user profile page in the OAuth section. Make sure to change the following fields in the command above: <DEVICE-ID> <BEARER-FROM-YOUR-USER-PROFILE> <HARDWARE_ID> , for instance SCAS210002 <BLUEPRINT_ID> , for instance sc_21_station_module for Smart Citizen Stations Check it out Once this process is done, you should be able to check that the postprocessing is safely stored in the Platform by visiting: https://api.smartcitizen.me/v0/devices/<DEVICE-ID>/ . After this, we will take care of processing the data in a periodic way.","title":"Alternative method"},{"location":"Guides/data/Install%20the%20framework/","text":"How to install the framework \u00b6 The following data analysis framework is a set of tools built on Python 3.7 to help you analyse your data. It can be used with Jupyter Notebooks or Jupyter Lab , although it is not mandatory. Before getting started \u00b6 The framework runs in python 3.6 or more. Download and install python following this guide if you don't already have it. Installation \u00b6 Open your favourite shell on the directory you have your project. ( cmd.exe on windows) pip install scdata You can now check if it all works by: python >>> import scdata as sc >>> ... Development instructions (advanced) \u00b6 clone the repository in a directory you like: git clone https://github.com/fablabbcn/smartcitizen-data.git ... cd smartcitizen-data Want to stay up-to-date? The framework is being constantly updated and the only version that will always be up-to-date is in the master branch of the github repository . We do not recommend to simply download the repository but to clone it with git . If you want to learn more about git and why it can help you in your projects, check here To install it, you can simply run the command below. You can use a virtual environment if you like as well. python setup.py install","title":"Framework Installation"},{"location":"Guides/data/Install%20the%20framework/#how-to-install-the-framework","text":"The following data analysis framework is a set of tools built on Python 3.7 to help you analyse your data. It can be used with Jupyter Notebooks or Jupyter Lab , although it is not mandatory.","title":"How to install the framework"},{"location":"Guides/data/Install%20the%20framework/#before-getting-started","text":"The framework runs in python 3.6 or more. Download and install python following this guide if you don't already have it.","title":"Before getting started"},{"location":"Guides/data/Install%20the%20framework/#installation","text":"Open your favourite shell on the directory you have your project. ( cmd.exe on windows) pip install scdata You can now check if it all works by: python >>> import scdata as sc >>> ...","title":"Installation"},{"location":"Guides/data/Install%20the%20framework/#development-instructions-advanced","text":"clone the repository in a directory you like: git clone https://github.com/fablabbcn/smartcitizen-data.git ... cd smartcitizen-data Want to stay up-to-date? The framework is being constantly updated and the only version that will always be up-to-date is in the master branch of the github repository . We do not recommend to simply download the repository but to clone it with git . If you want to learn more about git and why it can help you in your projects, check here To install it, you can simply run the command below. You can use a virtual environment if you like as well. python setup.py install","title":"Development instructions (advanced)"},{"location":"Guides/data/Make%20reports%20of%20your%20data/","text":"Tools are provided to generate test or analysis reports, with a custom template. These are generated with the jupyter nbconvert using the preprocessor and tools in the notebooks and template folder. To generate a report, follow the steps: Tag the cells in your notebook. You can use the Jupyter Lab Celltags extension. Don't tag the cells you want to hide, and tag the ones you want to show with show_only_output . This can be changed and add more tags, but we keep it this way for simplicity Go to the notebooks folder: cd notebooks Type the command: jupyter nbconvert --config sc_nbconvert_config.py notebook.ipynb --sc_Preprocessor.expression=\"show_only_output\" --to html --TemplateExporter.template_file=./templates/full_sc --output-dir=../reports --output=OUTPUT_NAME Where: sc_nbconvert_config.py is the config notebook.ipynb is the notebook you want \"show_only_output\" is a boolean expression that is evaluated for each of the cells. If true, the cell is shown ./templates/full_sc is the default template we have created ../reports is the directory where we will put the html report OUTPUT_NAME is the name for the export This generates an html export containing only the mkdown or code cell outputs, without any code. Examples can be found in the source code repository . Don't like the template? You can modify these templates in the templates folder And here is the result!","title":"Make reports of your data"},{"location":"Guides/data/Organise%20your%20data/","text":"Organise your data \u00b6 Step by step Go through the installation guide first before jumping into this guide. When you first run scdata , it will create a scdata folder in your ~/.cache directory containing the following structure: export : we will export processed data or images here interim : we will place files used internally for the framework, such as sensor calibration data processed : the most important folder of our data directory. This will contain a hierarchy with the different tests after loading into our database. The tests in this folder will have an unified format to easily navigate them. It's the folder we will load our data from, once we have created a test . raw : raw sdcard data can be placed here. It will feed our pre-processing script below reports : reports will be generated here. Have a look at the guide tasks : tasks will be loaded from here (WIP) uploads : directory to put information when uploading data to zenodo Configure this An additional scdata folder with a config.yaml file is created in your ~/.config directory. Visit the readme in the github repository for more information about configuring this. Data structure \u00b6 Two main ways to access and organise the data: device: single device holding information from different sources. Learn how to use it in the examples test: intended for experimentation with the data and posterior reproducibility. See below . Test \u00b6 The concept is very simple. A test is a collection of devices (SCKs or not), that have a common purpose. They can be located in the same spot (co-location) or not, and the main idea is that we centralise the data in a common instance for easy analysis. Tests have dates, authors, can have comments (for us to remember what we did), a report attached and can be in different conditions (outdoor, indoor)... We will put all this metadata in a yaml file to help use look for the tests later on. Tests can also have different sources. They could be csv files, xls files or data from the Smart Citizen API. For the local files, we will first pre-process them with the scripts in the data/scripts folder and then place them in the data/raw folder, in csv format. We use this format because it's a common usable format and, although it is not the most efficient way of archiving the data, it can be easily explored by other common applications. Pre-process the sd card data \u00b6 Direct upload also available You can directly upload SD card data following the example here In order to make our files usable, we will need to have them in a format like YY-MM-DD.CSV . However, if the kit has been reset, we can find some files like: YY-MM-DD.01 , YY-MM-DD.02 and they should be something like YY-MM-DD_01.CSV , YY-MM-DD_02.CSV ... Pro-tip We can rename them manually, but if we have many of them, we can use this one-liner (works in oh-my-zsh): autoload -Uz zmv zmv '(*).(0*)' '$1_$2.CSV' We can now concatenate all the sd card data from a device with the concat_script.py in the scripts folder. We can access the script's help by typing in the terminal: python concat_script.py -h usage: concat_script.py [-h] [--output OUTPUT] [--index INDEX] [--keep] [--ignore IGNORE] [--directory DIRECTORY] optional arguments: -h, --help show this help message and exit --output OUTPUT, -o OUTPUT Output file name, including extension --index INDEX, -i INDEX Final name of time index --keep, -k Keep full CSV header --ignore IGNORE, -ig IGNORE Ignore files in concatenation --directory DIRECTORY, -d DIRECTORY Directory for csv files to concatenate Create a directory ( FILES ) and put the sd card data of one device in it. Then, run the script with: python concat_script.py -k -d FILES Using files in /Users/macoscar/Documents/04_Projects/02_FabLab/01_SmartCitizen/01_Repositories/DataAnalysis/smartcitizen-iscape-data/data/scripts/FILES Files to concat: 18-11-08.CSV 18-11-09.CSV 18-11-13.CSV 18-11-14.CSV 18-11-15.CSV 18-11-16.CSV 18-11-17.CSV 18-11-18.CSV Updating header Saving file to: Log_Concat.csv And if we now navigate to the FILES directory: ls 18-11-08.CSV 18-11-13.CSV 18-11-15.CSV 18-11-17.CSV Log_Concat.csv 18-11-09.CSV 18-11-14.CSV 18-11-16.CSV 18-11-18.CSV We can find our concatenated file! Create a test \u00b6 Once we have all our concatenated files, we can proceed to create our test. For this, you can launch jupyter lab and open the examples notebooks . In it, we can follow the instructions in the notebook by filling up the input data. A note about the timestamps To synchronise our tests, we will always need to specify the location. This means that all our tests will be in 'UTC'. There's a lot more to it Check the examples in the repository to : Plot data Process Calibrate sensors Upload it to zenodo","title":"Organise your data"},{"location":"Guides/data/Organise%20your%20data/#organise-your-data","text":"Step by step Go through the installation guide first before jumping into this guide. When you first run scdata , it will create a scdata folder in your ~/.cache directory containing the following structure: export : we will export processed data or images here interim : we will place files used internally for the framework, such as sensor calibration data processed : the most important folder of our data directory. This will contain a hierarchy with the different tests after loading into our database. The tests in this folder will have an unified format to easily navigate them. It's the folder we will load our data from, once we have created a test . raw : raw sdcard data can be placed here. It will feed our pre-processing script below reports : reports will be generated here. Have a look at the guide tasks : tasks will be loaded from here (WIP) uploads : directory to put information when uploading data to zenodo Configure this An additional scdata folder with a config.yaml file is created in your ~/.config directory. Visit the readme in the github repository for more information about configuring this.","title":"Organise your data"},{"location":"Guides/data/Organise%20your%20data/#data-structure","text":"Two main ways to access and organise the data: device: single device holding information from different sources. Learn how to use it in the examples test: intended for experimentation with the data and posterior reproducibility. See below .","title":"Data structure"},{"location":"Guides/data/Organise%20your%20data/#test","text":"The concept is very simple. A test is a collection of devices (SCKs or not), that have a common purpose. They can be located in the same spot (co-location) or not, and the main idea is that we centralise the data in a common instance for easy analysis. Tests have dates, authors, can have comments (for us to remember what we did), a report attached and can be in different conditions (outdoor, indoor)... We will put all this metadata in a yaml file to help use look for the tests later on. Tests can also have different sources. They could be csv files, xls files or data from the Smart Citizen API. For the local files, we will first pre-process them with the scripts in the data/scripts folder and then place them in the data/raw folder, in csv format. We use this format because it's a common usable format and, although it is not the most efficient way of archiving the data, it can be easily explored by other common applications.","title":"Test"},{"location":"Guides/data/Organise%20your%20data/#pre-process-the-sd-card-data","text":"Direct upload also available You can directly upload SD card data following the example here In order to make our files usable, we will need to have them in a format like YY-MM-DD.CSV . However, if the kit has been reset, we can find some files like: YY-MM-DD.01 , YY-MM-DD.02 and they should be something like YY-MM-DD_01.CSV , YY-MM-DD_02.CSV ... Pro-tip We can rename them manually, but if we have many of them, we can use this one-liner (works in oh-my-zsh): autoload -Uz zmv zmv '(*).(0*)' '$1_$2.CSV' We can now concatenate all the sd card data from a device with the concat_script.py in the scripts folder. We can access the script's help by typing in the terminal: python concat_script.py -h usage: concat_script.py [-h] [--output OUTPUT] [--index INDEX] [--keep] [--ignore IGNORE] [--directory DIRECTORY] optional arguments: -h, --help show this help message and exit --output OUTPUT, -o OUTPUT Output file name, including extension --index INDEX, -i INDEX Final name of time index --keep, -k Keep full CSV header --ignore IGNORE, -ig IGNORE Ignore files in concatenation --directory DIRECTORY, -d DIRECTORY Directory for csv files to concatenate Create a directory ( FILES ) and put the sd card data of one device in it. Then, run the script with: python concat_script.py -k -d FILES Using files in /Users/macoscar/Documents/04_Projects/02_FabLab/01_SmartCitizen/01_Repositories/DataAnalysis/smartcitizen-iscape-data/data/scripts/FILES Files to concat: 18-11-08.CSV 18-11-09.CSV 18-11-13.CSV 18-11-14.CSV 18-11-15.CSV 18-11-16.CSV 18-11-17.CSV 18-11-18.CSV Updating header Saving file to: Log_Concat.csv And if we now navigate to the FILES directory: ls 18-11-08.CSV 18-11-13.CSV 18-11-15.CSV 18-11-17.CSV Log_Concat.csv 18-11-09.CSV 18-11-14.CSV 18-11-16.CSV 18-11-18.CSV We can find our concatenated file!","title":"Pre-process the sd card data"},{"location":"Guides/data/Organise%20your%20data/#create-a-test","text":"Once we have all our concatenated files, we can proceed to create our test. For this, you can launch jupyter lab and open the examples notebooks . In it, we can follow the instructions in the notebook by filling up the input data. A note about the timestamps To synchronise our tests, we will always need to specify the location. This means that all our tests will be in 'UTC'. There's a lot more to it Check the examples in the repository to : Plot data Process Calibrate sensors Upload it to zenodo","title":"Create a test"},{"location":"Guides/data/Upload%20data%20to%20zenodo/","text":"Uploading results to Zenodo is also possible using the data analysis framework. Once you have your data organised in a test, you can upload it directly to Zenodo and share it with others. An example of this is provided in the example notebook . Set it up \u00b6 For this to work, we need to have a token in an environment variable called ZENODO_TOKEN . Once you have it, open up a terminal and add it to your environment like: export ZENODO_TOKEN=fake-zenodo-token In the same terminal, check it's there: echo $ZENODO_TOKEN fake-zenodo-token Then launch jupyter-lab or start using your python scripts. Alternatively, you can store a .env file in a place of your liking with your token: ZENODO_TOKEN='yourtokenhere' And then load it like: export $(grep -v '^#' .env | xargs -0) Prepare the data \u00b6 Next, you can define a upload.yaml file to describe the upload (see one example here : example_upload_1.json: title: 'Example Data 1' description: 'This field accepts <strong>HTML</strong>' upload_type: 'dataset' keywords: ['Low-Cost Sensors', 'Air Quality', 'Citizen Science'] creators: [{'name': 'Author 1', 'affiliation': 'Affiliation 1', 'orcid': '0000-0000-0000-0001'}, {'name': 'Author 2', 'affiliation': 'Affiliation 2', 'orcid': '0000-0000-0000-0002'}] tests: ['TEST_1', 'TEST_2'] access_right: 'open' options: include_processed_data: false include_footer_doi: true communities: [{ \"identifier\": \"community_in_zenodo\"}] grants: [{\"id\": \"GRANT_ID\"}] report: ['report.pdf'] example_upload_2.json: title: 'Example Data 2' description: 'This field accepts <strong>HTML</strong>' upload_type: 'dataset' keywords: ['Low-Cost Sensors', 'Air Quality', 'Citizen Science'] creators: [{'name': 'Author 1', 'affiliation': 'Affiliation 1', 'orcid': '0000-0000-0000-0001'}, {'name': 'Author 2', 'affiliation': 'Affiliation 2', 'orcid': '0000-0000-0000-0002'}] tests: ['TEST_3', 'TEST_4'] access_right: 'open' options: include_processed_data: false include_footer_doi: false communities: [{ \"identifier\": \"community_in_zenodo\"}] grants: [{\"id\": \"GRANT_ID\"}] report: ['report_2.pdf'] Info All the keys below are linked to the zenodo documentation Different uploads can be defined by each main key: example_upload_1.json and example_upload_2.json . Each of them contains the following information (all of them can be later modified or added in the web interface in zenodo.org ) Metadata for Zenodo title : Name for the dataset description : dataset description (mandatory). This field accepts HTML upload_type : 'dataset' (mandatory - always, for now) keywords : list of keywords, such as ['Low-Cost Sensors', 'Air Quality', 'Citizen Science'] creators : dictionary containing the authors. Can contain the name, the affiliation and an orcid access_right : 'open' (other options in the zenodo documentation ) communities : id for the zenodo data community grants : grant id Upload tests : ['TEST_1', 'TEST_2'] options : include_processed_data : true or false. Whether or not to include the processed data from the processed folder in the test directory include_footer_doi : true. If there is a report attached, add a nice footer to it with the DOI report : list of reports to attach. Must be also in the data/uploads folder To upload the datasets, we can use the zenodo sandbox and a dry_run, to check everything is running well. Then, make these defaults to False to actually upload it: # You can use the sandbox.zenodo.org for tests, as well as a dry_run. When you are happy with your upload, set these variables to False # Then go to uploads in the zenodo section and publish whenever you are ready data.upload_to_zenodo('example_zenodo_upload', sandbox = False, dry_run = True) Warning Note that a .json file will be created in the data/uploads folder containing the metadata necessary for the upload (as liked by zenodo API). You can securely delete this file once you are done. Note that, in case include_footer_doi=true , the actual pdf to upload will be report_doi.pdf Finally, to actually deploy the dataset , you need to visit the deposit section and aprove it manually. Info Get the iSCAPE datasets from Zenodo here: https://zenodo.org/record/3570700 https://zenodo.org/record/3570680 https://zenodo.org/record/3570688","title":"Uploading data to zenodo"},{"location":"Guides/data/Upload%20data%20to%20zenodo/#set-it-up","text":"For this to work, we need to have a token in an environment variable called ZENODO_TOKEN . Once you have it, open up a terminal and add it to your environment like: export ZENODO_TOKEN=fake-zenodo-token In the same terminal, check it's there: echo $ZENODO_TOKEN fake-zenodo-token Then launch jupyter-lab or start using your python scripts. Alternatively, you can store a .env file in a place of your liking with your token: ZENODO_TOKEN='yourtokenhere' And then load it like: export $(grep -v '^#' .env | xargs -0)","title":"Set it up"},{"location":"Guides/data/Upload%20data%20to%20zenodo/#prepare-the-data","text":"Next, you can define a upload.yaml file to describe the upload (see one example here : example_upload_1.json: title: 'Example Data 1' description: 'This field accepts <strong>HTML</strong>' upload_type: 'dataset' keywords: ['Low-Cost Sensors', 'Air Quality', 'Citizen Science'] creators: [{'name': 'Author 1', 'affiliation': 'Affiliation 1', 'orcid': '0000-0000-0000-0001'}, {'name': 'Author 2', 'affiliation': 'Affiliation 2', 'orcid': '0000-0000-0000-0002'}] tests: ['TEST_1', 'TEST_2'] access_right: 'open' options: include_processed_data: false include_footer_doi: true communities: [{ \"identifier\": \"community_in_zenodo\"}] grants: [{\"id\": \"GRANT_ID\"}] report: ['report.pdf'] example_upload_2.json: title: 'Example Data 2' description: 'This field accepts <strong>HTML</strong>' upload_type: 'dataset' keywords: ['Low-Cost Sensors', 'Air Quality', 'Citizen Science'] creators: [{'name': 'Author 1', 'affiliation': 'Affiliation 1', 'orcid': '0000-0000-0000-0001'}, {'name': 'Author 2', 'affiliation': 'Affiliation 2', 'orcid': '0000-0000-0000-0002'}] tests: ['TEST_3', 'TEST_4'] access_right: 'open' options: include_processed_data: false include_footer_doi: false communities: [{ \"identifier\": \"community_in_zenodo\"}] grants: [{\"id\": \"GRANT_ID\"}] report: ['report_2.pdf'] Info All the keys below are linked to the zenodo documentation Different uploads can be defined by each main key: example_upload_1.json and example_upload_2.json . Each of them contains the following information (all of them can be later modified or added in the web interface in zenodo.org ) Metadata for Zenodo title : Name for the dataset description : dataset description (mandatory). This field accepts HTML upload_type : 'dataset' (mandatory - always, for now) keywords : list of keywords, such as ['Low-Cost Sensors', 'Air Quality', 'Citizen Science'] creators : dictionary containing the authors. Can contain the name, the affiliation and an orcid access_right : 'open' (other options in the zenodo documentation ) communities : id for the zenodo data community grants : grant id Upload tests : ['TEST_1', 'TEST_2'] options : include_processed_data : true or false. Whether or not to include the processed data from the processed folder in the test directory include_footer_doi : true. If there is a report attached, add a nice footer to it with the DOI report : list of reports to attach. Must be also in the data/uploads folder To upload the datasets, we can use the zenodo sandbox and a dry_run, to check everything is running well. Then, make these defaults to False to actually upload it: # You can use the sandbox.zenodo.org for tests, as well as a dry_run. When you are happy with your upload, set these variables to False # Then go to uploads in the zenodo section and publish whenever you are ready data.upload_to_zenodo('example_zenodo_upload', sandbox = False, dry_run = True) Warning Note that a .json file will be created in the data/uploads folder containing the metadata necessary for the upload (as liked by zenodo API). You can securely delete this file once you are done. Note that, in case include_footer_doi=true , the actual pdf to upload will be report_doi.pdf Finally, to actually deploy the dataset , you need to visit the deposit section and aprove it manually. Info Get the iSCAPE datasets from Zenodo here: https://zenodo.org/record/3570700 https://zenodo.org/record/3570680 https://zenodo.org/record/3570688","title":"Prepare the data"},{"location":"Guides/deployments/Almabike%20sensors/","text":"Almabike Sensors User Manual \u00b6 Welcome to the Almabike Project User Manual. This page includes all necessary information to get started with the sensor kit. In addition, further information and graphic material is available in the Annexes of this manual. Hardware \u00b6 Pack \u00b6 The delivered sensor pack is comprised of these components: Smart Citizen Kit (SCK) GPS and antenna USB charger and cable Customized enclosure The SCK and GPS are assembled with a 3D-printed Clip: The enclosure is made out of a modified saddle bag. Find more details in enclosure : Licenses All the software used in this (product/prototype/design), unless otherwise stated, is released under GNU GPL v3.0. Likewise, the hardware design files for the Smart Citizen Kit are released under CERN OHL v1.2. Please refer to the corresponding license for details regarding permissions, limitations, and conditions of use. This paragraph only applies to this section and the enclosure customization, and not to the rest of components such as the GPS or antenna. Sensors \u00b6 The sensors are based on the Smart Citizen Kit, with the following components. Measurements Measurement Units Sensor Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light Lux Rohm BH1721FVC Barometric pressure Pa NXP MPL3115A26 Equivalent Carbon Dioxide ppm AMS CCS811 Volatile Organic Compounds ppb AMS CCS811 Particulate Matter PM 1 / 2.5 / 10 \u00b5g/m3 Planttower PMS 5003 GPS \u00b6 The selected NEO-M8U GPS Breakout from Sparkfun is a high quality GPS board. The NEO-M8U takes advantage of u-blox's Untethered Dead Reckoning (UDR) technology. The NEO-M8U module is a 72-channel u-blox M8 engine GNSS receiver, meaning it can receive signals from the GPS, GLONASS, Galileo, and BeiDou constellations with ~2.5 meter accuracy . The module supports concurrent reception of three GNSS systems. The combination of GNSS and integrated 3D sensor measurements on the NEO-M8U provide accurate, real-time positioning rates of up to 30Hz. Compared to other GPS modules, this breakout maximizes position accuracy in dense cities or covered areas. Even under poor signal conditions, continuous positioning is provided in urban environments and is also available during complete signal loss (e.g. short tunnels and parking garages). Lock time is further reduced with on-board rechargeable battery; there is a backup power enabling the GPS to get a hot lock within seconds. The SparkFun NEO-M8U GPS Breakout 1 is also equipped with an on-board rechargeable battery that provides power to the RTC on the NEO-M8U. This reduces the time-to-first fix from a cold start (~26s) to a hot start (~1.5s). The battery will maintain RTC and GNSS orbit data without being connected to power for plenty of time. The GPS uses a ceramic patch antenna 2 with the following features: The U.FL antenna connector does not need to be unplugged from the board, specially never when the board is being powered in order to avoid damaging the circuitry: GPS and Antenna images by Sparkfun (License CC BY 2.0 ) and edited by Smart Citizen. Enclosure \u00b6 The enclosure is made out of a modified generic Saddle Bag from Vaude - (Vaude Race Light L). Enclosure images by Vaude The enclosure was specifically chosen because: It is a widely available enclosure by a well stablished bike equipment manufacturer Size and materials Low weight and flexible outter fitting for low vibrations and transmissibility The sensors are internally suspended by a polypropilene folding and the air intakes are made out of PLA in a 3D printer. Measurement principle The sensors are enclosed in the saddle bag in order to avoid dirt and water spills. The measurement method in the enclosure ensures there is: 1. sufficient air flow parallel to the sensor's surface, 2. a limited gas speed across the sensors and minimum gas residence time to ensure sensitivity. The placement of the sensors was tested and compared with different options. Results are shown in the Test section . The images below show the measurement principle and a functional diagram for the sensor\u2019s enclosure. Please, ensure both intakes and exhaust are not covered and that air can flow freely between both. Power management \u00b6 WIP This will be improved with new Firmware Features. Current battery duration is 1 day with 2-3 short bicycle trips of 30' each. This will improve with upcoming firmware updates. The SCK comes with a 2000mAh LiPo battery to provide autonomy while measuring in the city. The battery is meant to be a complete power option for short-term measurements (approximatively 1-2 days). The battery duration is dependent on which sensors are enabled or disabled, and the amount of time the dynamic measurement interval is active. You will note that the kit turns itself off while operating on battery. Actually, this is what we call sleep-mode , an operation mode implemented to reduce consumption while on battery operation. Battery charging \u00b6 The SCK has a micro USB port and can be charged like any Smartphone or Tablet using a dedicated adapter or a computer USB port. A cable is provided and does not need to be disconnected from the device. The cable can be stored in the saddle\u2019s bag back compartment. User feedback \u00b6 The LED serves as an indication of the battery status. If the LED is flashing orange it indicates that the battery must be charged. The battery takes about 4 hours to fully charge. When the battery is fully charged, the LED will change from orange to green . Remember that in addition to these colors you will have the state color of the kit: configuration, network and sd. More details Find more details about power management under the data board section of the documentation Data Acquisition \u00b6 Data can be recorded offline or published online to the Smart Citizen Platform. The SCK owner needs to configure how the data is going to be stored in the Setup process, either in the SD card or via network connectivity (WiFi) to the platform. When the SCK is configured in sdcard mode , it will store the data at the requested interval* in the SD card. In the case of network connectivity, in normal conditions, the device will send data over to the Smart Citizen Platform via WiFi (WPA2 Personal or WEP). Additionally, when configured to send data over WiFi, if there is a SD card present, it will also store the data in it as a backup. Finally, in the special case of mobile sensors, where network connectivity is not always present, the data can be recorded offline on its internal dedicated flash memory of 8MB and later publish this over WiFi connectivity. Data is published using MQTT messages to the Smart Citizen Platform. NTP is used for syncing the built-in RTC. Recording interval \u00b6 In order to understand the reading and publication intervals, it is important to describe how the structure of the measurements is done: Overall reading interval : base period for the SCK to take a measurement Individual sensor reading interval : period for each sensor to take a measurement. It is defined as N times the Overall reading interval Publication interval : time for the SCK to publish to the Smart Citizen Platform, independent of the reading interval. Each of the sensors can be configured independently, with a reading interval N times the overall reading interval . For the Almabike project, all the sensors are read every 60s if the sensors are static. When a GPS movement is detected, the reading interval goes down to 5s. In the case of the Almabike project , the sensors store data internally in the Flash memory during the bicycle trips and publish it in batch when the configured WiFi network is visible. Data is also stored in the SD card for later use in CSV file format. Data \u00b6 Accessing the data \u00b6 Data from the sensors can be accessed in four ways: Using the SD card . Follow this guide to understand the data formats Downloading data from Smart Citizen Platform, following this guide Using the API calls, with information here Using Python to interact directly with the API. There is a python package available here and an example on how to do so here Data formats \u00b6 Data from the sensors is timestamped in ISO8601 format with the following metrics: Metric Units Description BATT % Device battery status CCS811_ECO2 ppm Equivalent CO2 CCS811_VOCS ppb total Volatile Organics Compounds GPS_ALT m GPS Altitude GPS_DIL n/a GPS Horizontal Dilution of Position GPS_FIX_QUALITY n/a GPS Fix Quality GPS_LAT \u00ba GPS Latitude GPS_LONG \u00ba GPS Longitude GPS_SAT_N n/a GPS Number Tracked Satellites GPS_SPEED m/s GPS Horizontal Speed HUM % RH Urban board humidity LIGHT lux Urban board ambient light NOISE_A dBA Noise measurement in A scale PM_1 ug/m3 PM 1 measurement from PMS5003 PM_25 ug/m3 PM 2.5 measurement from PMS5003 PM_10 ug/m3 PM 10 measurement from PMS5003 PRESS kPa Atmospheric pressure TEMP degC Urban board temperature Notes about data: Non valid data is shown in CSV as null There is no correction in the data The minimum refresh interval for the PM sensor is 1s (it won't change faster than that) Getting started \u00b6 The sensor comes mounted and almost ready to be used. The first step is to connect the battery. The kit will light in red (configuration mode) and we will be able to configure it by following the instructions at start.smartcitizen.me . After the configuration process, data will be available on the SmartCitizen platform. You can explore the data there or download it using the CSV Download option (guide here ) Make sure data is recorded For the Almabike project , it is important to follow the steps below in order to select the correct kit blueprint while registering the sensor: Click the \ud83d\udee0\ufe0f icon in the bottom right corner Choose the blueprint of the device you want to setup, in this case: #32 SCK 2.1 GPS Click save and continue the process as usually Due to privacy concerns, all geolocated data for the Almabike project will remain private unless the user choses to release it. When you set up your user profile, please, contact \" support@smartcitizen.me \" to request your if your user can be upgraded from citizen to researcher . This will allow to visit any of your devices and select the option \"Make private\" under the \"Open Data\" settings: Before going on a trip \u00b6 Before starting to pedal, make sure that this checklist is all fine: The kit is either in SD card or network mode The kit has enough battery (check the status of the LED ) The GPS is being powered. The GPS might take some time to retrieve a valid location. This can be assessed by checking that the GPS Blue LED is blinking . If you want to make sure the complete trip is recorded, make sure the GPS can receive a clear view of the sky The kit is well placed inside the enclosure and the cable does not obstruct the exhaust What is the GPS fix? The GPS fix is the term used for describing whether or not the GPS has successfully received a valid location Known issues \u00b6 Below, there is a list of known issues with the 0.9.8 version of the Firmware. These will be fixed soon. Currently, the SCK does not report errors permanently and only during 10s. This is shown as a fast led blinking ( ). Under certain conditions, the dynamic interval is not instantly recovered after a quick stop, and it might take 1' to restart Under certain sky visibility conditions, the GPS does not report a valid fix. It is normally fixed with a clear sky view. For this, follow the instructions in Before going on a trip Updating the firmware Once there is a firmware release with these updates, refer to this guide for instructions on how to update it in your kit Additional graphic material \u00b6 Test results \u00b6 The purpose of these tests is to assess the best solution for measuring particulate matter and environmental conditions with two different enclosures and hence exposure methods. The tests performed are: Indoor particulate tests Outdoor dynamic vs. static comparison Outdoor dynamic comparison Indoor particulate tests \u00b6 These tests were conducted indoor using a Marlin Smoke Machine in order to assess the difference between each enclosure. Free air comparison An initial comparison between both sensors in open air is done in order to assess the difference between each sensor measuring in open air with smoke injection up to 4000ug/m3. In the figure, two distinct phases need to be highlighted: In the figure, two distinct phases need to be highlighted: injection (when there is smoke being injected in the room), and dispersion, when the injected smoke is being dispersed with a fan. Both sensors correlate well in the injection phase and dispersion phases, but they do have an offset in the dispersion phase that is not identified, and that could be simply due to the sensor's position, although they are less than 10cm apart. This maximum offset is 700-1000ug/m3 in an evironment of very large particle concentration numbers 3000ug/m3. Temperature and humidity offsets in this case are found to be less than 0.5degC in temperature and negligible for relative humidity. Enclosure comparisons The purpose of this comparison is to determine which measurement principle of the following is the best: Directly exposing the sensors to the air flow by the bicycle's movement Expose them inside a \"chamber\" in which air flow is contained and briefly slowed down The following graph shows the comparison of both enclosures mounted on the bike, and a rider on the bike. The comparison shows that the direct sensor exposure (ORTLIEB in the graph) is not as sensitive to particulate in the air as the chamber exposure is (VAUDE in the graph). This offset is not justified by the offset seen in dispersion phase in the free air test as it is also reduced in the injection phase. On the other hand, the chamber exposure shows a longer tail in the dispersion phase, as the particles can remain in the chamber and not be fully evacuated, although reactivity to larger quantities remains as seen in the graph below. It also shows that the VAUDE enclosure evacuates better heat generated by the electronics, as the temperature offset between both enclosures is reduced. As seen in the following tests, the offset of each enclosure with respect to real temperature is between 1 to 3degC and it could be compensated by software a posteriori , but it can't be avoided as the sensors are confined in the enclosure. This factor is not critical for the exposure assessment and decision, as the material of the enclosure differ, and it's less traspirant in the ORTLIEB option. Chamber vs. Reference test The comparison of the best-so-far enclosure is shown below, with respect to the reference sensor in free air. This comparison shows how the enclosure effectively slows down the air flow charged with particles, and still correlates properly with the free air sensor in the injection phase, although not in the dispersion phase. This indicates that the accumulation and evacuation process of the particles within the chamber is not fully controlled in this enclosure. Nevertheless, the levels of particles in this setup are not comparable to any actual particulate levels found in actual urban environments. The offset in temperature and humidity is of approximatively 3degC at the end of the test, and follows a normal heat up curve with logarithmic trend, equally for humidity with 7%rh. Direct exposure vs. Reference test The direct exposure vs reference comparison shows an inferior sensitivity, already seen in the enclosure comparison, of the direct exposure option versus the actual concentration. The measurements also show less reactivity in some instances, smoothing out some peaks in particle concentrations. Temperature trace shows an offset of 3degC at the end of the test, similarly to that of the other enclosure, with an humidity difference of 4-5%rh. Outdoor tests \u00b6 These tests are aimed at comparing outdoor measurements with sensor trips. These measurements use the same sensor as the ones mounted on the bicycle. A script is used to post-process the data based on location and derive a comparison between both measurements. Comparison bike front vs. bike back This comparison shows the difference between the different metrics when measuring gas using the same enclosure in the front (black) and in the back (green): After a short stabilisation period, this test shows that PM2.5 measurements are equally correlated between both positions. In the case of the temperature sensor, a difference of up to 2\u00baC was seen (higher in the saddle\u2019s position), with better sensitivity in the case of the front-sensor, due to a lower confinement and larger surface area: Due to project guidelines, the saddle position of the sensor is considered sufficient for the purpose of monitoring air quality. However, it\u2019s worth mentioning that this sensor location requires attention for the sensors to never be covered by the rider\u2019s clothing. Furthermore, the front position shows a better response for the sensor temperature representativity and sensitivity as seen above, with a potential better GPS fix quality. This latter issue is compensated with the usage of an active patch antenna with higher gain. Further tests are currently being conducted in order to assess the performance of the sensors when compared to static ones. References \u00b6 GPS NEO-M8U Specification: https://cdn.sparkfun.com/assets/6/d/7/c/6/NEO-M8U_DataSheet__UBX-15015679_.pdf \u21a9 Ceramic Patch Antenna Specification: https://www.molex.com/pdm_docs/as/2066400001-AS.pdf \u21a9","title":"Almabike sensors"},{"location":"Guides/deployments/Almabike%20sensors/#almabike-sensors-user-manual","text":"Welcome to the Almabike Project User Manual. This page includes all necessary information to get started with the sensor kit. In addition, further information and graphic material is available in the Annexes of this manual.","title":"Almabike Sensors User Manual"},{"location":"Guides/deployments/Almabike%20sensors/#hardware","text":"","title":"Hardware"},{"location":"Guides/deployments/Almabike%20sensors/#pack","text":"The delivered sensor pack is comprised of these components: Smart Citizen Kit (SCK) GPS and antenna USB charger and cable Customized enclosure The SCK and GPS are assembled with a 3D-printed Clip: The enclosure is made out of a modified saddle bag. Find more details in enclosure : Licenses All the software used in this (product/prototype/design), unless otherwise stated, is released under GNU GPL v3.0. Likewise, the hardware design files for the Smart Citizen Kit are released under CERN OHL v1.2. Please refer to the corresponding license for details regarding permissions, limitations, and conditions of use. This paragraph only applies to this section and the enclosure customization, and not to the rest of components such as the GPS or antenna.","title":"Pack"},{"location":"Guides/deployments/Almabike%20sensors/#sensors","text":"The sensors are based on the Smart Citizen Kit, with the following components. Measurements Measurement Units Sensor Air temperature \u00baC Sensirion SHT-31 Relative Humidity % REL Sensirion SHT-31 Noise level dBA Invensense ICS-434342 Ambient light Lux Rohm BH1721FVC Barometric pressure Pa NXP MPL3115A26 Equivalent Carbon Dioxide ppm AMS CCS811 Volatile Organic Compounds ppb AMS CCS811 Particulate Matter PM 1 / 2.5 / 10 \u00b5g/m3 Planttower PMS 5003","title":"Sensors"},{"location":"Guides/deployments/Almabike%20sensors/#gps","text":"The selected NEO-M8U GPS Breakout from Sparkfun is a high quality GPS board. The NEO-M8U takes advantage of u-blox's Untethered Dead Reckoning (UDR) technology. The NEO-M8U module is a 72-channel u-blox M8 engine GNSS receiver, meaning it can receive signals from the GPS, GLONASS, Galileo, and BeiDou constellations with ~2.5 meter accuracy . The module supports concurrent reception of three GNSS systems. The combination of GNSS and integrated 3D sensor measurements on the NEO-M8U provide accurate, real-time positioning rates of up to 30Hz. Compared to other GPS modules, this breakout maximizes position accuracy in dense cities or covered areas. Even under poor signal conditions, continuous positioning is provided in urban environments and is also available during complete signal loss (e.g. short tunnels and parking garages). Lock time is further reduced with on-board rechargeable battery; there is a backup power enabling the GPS to get a hot lock within seconds. The SparkFun NEO-M8U GPS Breakout 1 is also equipped with an on-board rechargeable battery that provides power to the RTC on the NEO-M8U. This reduces the time-to-first fix from a cold start (~26s) to a hot start (~1.5s). The battery will maintain RTC and GNSS orbit data without being connected to power for plenty of time. The GPS uses a ceramic patch antenna 2 with the following features: The U.FL antenna connector does not need to be unplugged from the board, specially never when the board is being powered in order to avoid damaging the circuitry: GPS and Antenna images by Sparkfun (License CC BY 2.0 ) and edited by Smart Citizen.","title":"GPS"},{"location":"Guides/deployments/Almabike%20sensors/#enclosure","text":"The enclosure is made out of a modified generic Saddle Bag from Vaude - (Vaude Race Light L). Enclosure images by Vaude The enclosure was specifically chosen because: It is a widely available enclosure by a well stablished bike equipment manufacturer Size and materials Low weight and flexible outter fitting for low vibrations and transmissibility The sensors are internally suspended by a polypropilene folding and the air intakes are made out of PLA in a 3D printer. Measurement principle The sensors are enclosed in the saddle bag in order to avoid dirt and water spills. The measurement method in the enclosure ensures there is: 1. sufficient air flow parallel to the sensor's surface, 2. a limited gas speed across the sensors and minimum gas residence time to ensure sensitivity. The placement of the sensors was tested and compared with different options. Results are shown in the Test section . The images below show the measurement principle and a functional diagram for the sensor\u2019s enclosure. Please, ensure both intakes and exhaust are not covered and that air can flow freely between both.","title":"Enclosure"},{"location":"Guides/deployments/Almabike%20sensors/#power-management","text":"WIP This will be improved with new Firmware Features. Current battery duration is 1 day with 2-3 short bicycle trips of 30' each. This will improve with upcoming firmware updates. The SCK comes with a 2000mAh LiPo battery to provide autonomy while measuring in the city. The battery is meant to be a complete power option for short-term measurements (approximatively 1-2 days). The battery duration is dependent on which sensors are enabled or disabled, and the amount of time the dynamic measurement interval is active. You will note that the kit turns itself off while operating on battery. Actually, this is what we call sleep-mode , an operation mode implemented to reduce consumption while on battery operation.","title":"Power management"},{"location":"Guides/deployments/Almabike%20sensors/#battery-charging","text":"The SCK has a micro USB port and can be charged like any Smartphone or Tablet using a dedicated adapter or a computer USB port. A cable is provided and does not need to be disconnected from the device. The cable can be stored in the saddle\u2019s bag back compartment.","title":"Battery charging"},{"location":"Guides/deployments/Almabike%20sensors/#user-feedback","text":"The LED serves as an indication of the battery status. If the LED is flashing orange it indicates that the battery must be charged. The battery takes about 4 hours to fully charge. When the battery is fully charged, the LED will change from orange to green . Remember that in addition to these colors you will have the state color of the kit: configuration, network and sd. More details Find more details about power management under the data board section of the documentation","title":"User feedback"},{"location":"Guides/deployments/Almabike%20sensors/#data-acquisition","text":"Data can be recorded offline or published online to the Smart Citizen Platform. The SCK owner needs to configure how the data is going to be stored in the Setup process, either in the SD card or via network connectivity (WiFi) to the platform. When the SCK is configured in sdcard mode , it will store the data at the requested interval* in the SD card. In the case of network connectivity, in normal conditions, the device will send data over to the Smart Citizen Platform via WiFi (WPA2 Personal or WEP). Additionally, when configured to send data over WiFi, if there is a SD card present, it will also store the data in it as a backup. Finally, in the special case of mobile sensors, where network connectivity is not always present, the data can be recorded offline on its internal dedicated flash memory of 8MB and later publish this over WiFi connectivity. Data is published using MQTT messages to the Smart Citizen Platform. NTP is used for syncing the built-in RTC.","title":"Data Acquisition"},{"location":"Guides/deployments/Almabike%20sensors/#recording-interval","text":"In order to understand the reading and publication intervals, it is important to describe how the structure of the measurements is done: Overall reading interval : base period for the SCK to take a measurement Individual sensor reading interval : period for each sensor to take a measurement. It is defined as N times the Overall reading interval Publication interval : time for the SCK to publish to the Smart Citizen Platform, independent of the reading interval. Each of the sensors can be configured independently, with a reading interval N times the overall reading interval . For the Almabike project, all the sensors are read every 60s if the sensors are static. When a GPS movement is detected, the reading interval goes down to 5s. In the case of the Almabike project , the sensors store data internally in the Flash memory during the bicycle trips and publish it in batch when the configured WiFi network is visible. Data is also stored in the SD card for later use in CSV file format.","title":"Recording interval"},{"location":"Guides/deployments/Almabike%20sensors/#data","text":"","title":"Data"},{"location":"Guides/deployments/Almabike%20sensors/#accessing-the-data","text":"Data from the sensors can be accessed in four ways: Using the SD card . Follow this guide to understand the data formats Downloading data from Smart Citizen Platform, following this guide Using the API calls, with information here Using Python to interact directly with the API. There is a python package available here and an example on how to do so here","title":"Accessing the data"},{"location":"Guides/deployments/Almabike%20sensors/#data-formats","text":"Data from the sensors is timestamped in ISO8601 format with the following metrics: Metric Units Description BATT % Device battery status CCS811_ECO2 ppm Equivalent CO2 CCS811_VOCS ppb total Volatile Organics Compounds GPS_ALT m GPS Altitude GPS_DIL n/a GPS Horizontal Dilution of Position GPS_FIX_QUALITY n/a GPS Fix Quality GPS_LAT \u00ba GPS Latitude GPS_LONG \u00ba GPS Longitude GPS_SAT_N n/a GPS Number Tracked Satellites GPS_SPEED m/s GPS Horizontal Speed HUM % RH Urban board humidity LIGHT lux Urban board ambient light NOISE_A dBA Noise measurement in A scale PM_1 ug/m3 PM 1 measurement from PMS5003 PM_25 ug/m3 PM 2.5 measurement from PMS5003 PM_10 ug/m3 PM 10 measurement from PMS5003 PRESS kPa Atmospheric pressure TEMP degC Urban board temperature Notes about data: Non valid data is shown in CSV as null There is no correction in the data The minimum refresh interval for the PM sensor is 1s (it won't change faster than that)","title":"Data formats"},{"location":"Guides/deployments/Almabike%20sensors/#getting-started","text":"The sensor comes mounted and almost ready to be used. The first step is to connect the battery. The kit will light in red (configuration mode) and we will be able to configure it by following the instructions at start.smartcitizen.me . After the configuration process, data will be available on the SmartCitizen platform. You can explore the data there or download it using the CSV Download option (guide here ) Make sure data is recorded For the Almabike project , it is important to follow the steps below in order to select the correct kit blueprint while registering the sensor: Click the \ud83d\udee0\ufe0f icon in the bottom right corner Choose the blueprint of the device you want to setup, in this case: #32 SCK 2.1 GPS Click save and continue the process as usually Due to privacy concerns, all geolocated data for the Almabike project will remain private unless the user choses to release it. When you set up your user profile, please, contact \" support@smartcitizen.me \" to request your if your user can be upgraded from citizen to researcher . This will allow to visit any of your devices and select the option \"Make private\" under the \"Open Data\" settings:","title":"Getting started"},{"location":"Guides/deployments/Almabike%20sensors/#before-going-on-a-trip","text":"Before starting to pedal, make sure that this checklist is all fine: The kit is either in SD card or network mode The kit has enough battery (check the status of the LED ) The GPS is being powered. The GPS might take some time to retrieve a valid location. This can be assessed by checking that the GPS Blue LED is blinking . If you want to make sure the complete trip is recorded, make sure the GPS can receive a clear view of the sky The kit is well placed inside the enclosure and the cable does not obstruct the exhaust What is the GPS fix? The GPS fix is the term used for describing whether or not the GPS has successfully received a valid location","title":"Before going on a trip"},{"location":"Guides/deployments/Almabike%20sensors/#known-issues","text":"Below, there is a list of known issues with the 0.9.8 version of the Firmware. These will be fixed soon. Currently, the SCK does not report errors permanently and only during 10s. This is shown as a fast led blinking ( ). Under certain conditions, the dynamic interval is not instantly recovered after a quick stop, and it might take 1' to restart Under certain sky visibility conditions, the GPS does not report a valid fix. It is normally fixed with a clear sky view. For this, follow the instructions in Before going on a trip Updating the firmware Once there is a firmware release with these updates, refer to this guide for instructions on how to update it in your kit","title":"Known issues"},{"location":"Guides/deployments/Almabike%20sensors/#additional-graphic-material","text":"","title":"Additional graphic material"},{"location":"Guides/deployments/Almabike%20sensors/#test-results","text":"The purpose of these tests is to assess the best solution for measuring particulate matter and environmental conditions with two different enclosures and hence exposure methods. The tests performed are: Indoor particulate tests Outdoor dynamic vs. static comparison Outdoor dynamic comparison","title":"Test results"},{"location":"Guides/deployments/Almabike%20sensors/#indoor-particulate-tests","text":"These tests were conducted indoor using a Marlin Smoke Machine in order to assess the difference between each enclosure. Free air comparison An initial comparison between both sensors in open air is done in order to assess the difference between each sensor measuring in open air with smoke injection up to 4000ug/m3. In the figure, two distinct phases need to be highlighted: In the figure, two distinct phases need to be highlighted: injection (when there is smoke being injected in the room), and dispersion, when the injected smoke is being dispersed with a fan. Both sensors correlate well in the injection phase and dispersion phases, but they do have an offset in the dispersion phase that is not identified, and that could be simply due to the sensor's position, although they are less than 10cm apart. This maximum offset is 700-1000ug/m3 in an evironment of very large particle concentration numbers 3000ug/m3. Temperature and humidity offsets in this case are found to be less than 0.5degC in temperature and negligible for relative humidity. Enclosure comparisons The purpose of this comparison is to determine which measurement principle of the following is the best: Directly exposing the sensors to the air flow by the bicycle's movement Expose them inside a \"chamber\" in which air flow is contained and briefly slowed down The following graph shows the comparison of both enclosures mounted on the bike, and a rider on the bike. The comparison shows that the direct sensor exposure (ORTLIEB in the graph) is not as sensitive to particulate in the air as the chamber exposure is (VAUDE in the graph). This offset is not justified by the offset seen in dispersion phase in the free air test as it is also reduced in the injection phase. On the other hand, the chamber exposure shows a longer tail in the dispersion phase, as the particles can remain in the chamber and not be fully evacuated, although reactivity to larger quantities remains as seen in the graph below. It also shows that the VAUDE enclosure evacuates better heat generated by the electronics, as the temperature offset between both enclosures is reduced. As seen in the following tests, the offset of each enclosure with respect to real temperature is between 1 to 3degC and it could be compensated by software a posteriori , but it can't be avoided as the sensors are confined in the enclosure. This factor is not critical for the exposure assessment and decision, as the material of the enclosure differ, and it's less traspirant in the ORTLIEB option. Chamber vs. Reference test The comparison of the best-so-far enclosure is shown below, with respect to the reference sensor in free air. This comparison shows how the enclosure effectively slows down the air flow charged with particles, and still correlates properly with the free air sensor in the injection phase, although not in the dispersion phase. This indicates that the accumulation and evacuation process of the particles within the chamber is not fully controlled in this enclosure. Nevertheless, the levels of particles in this setup are not comparable to any actual particulate levels found in actual urban environments. The offset in temperature and humidity is of approximatively 3degC at the end of the test, and follows a normal heat up curve with logarithmic trend, equally for humidity with 7%rh. Direct exposure vs. Reference test The direct exposure vs reference comparison shows an inferior sensitivity, already seen in the enclosure comparison, of the direct exposure option versus the actual concentration. The measurements also show less reactivity in some instances, smoothing out some peaks in particle concentrations. Temperature trace shows an offset of 3degC at the end of the test, similarly to that of the other enclosure, with an humidity difference of 4-5%rh.","title":"Indoor particulate tests"},{"location":"Guides/deployments/Almabike%20sensors/#outdoor-tests","text":"These tests are aimed at comparing outdoor measurements with sensor trips. These measurements use the same sensor as the ones mounted on the bicycle. A script is used to post-process the data based on location and derive a comparison between both measurements. Comparison bike front vs. bike back This comparison shows the difference between the different metrics when measuring gas using the same enclosure in the front (black) and in the back (green): After a short stabilisation period, this test shows that PM2.5 measurements are equally correlated between both positions. In the case of the temperature sensor, a difference of up to 2\u00baC was seen (higher in the saddle\u2019s position), with better sensitivity in the case of the front-sensor, due to a lower confinement and larger surface area: Due to project guidelines, the saddle position of the sensor is considered sufficient for the purpose of monitoring air quality. However, it\u2019s worth mentioning that this sensor location requires attention for the sensors to never be covered by the rider\u2019s clothing. Furthermore, the front position shows a better response for the sensor temperature representativity and sensitivity as seen above, with a potential better GPS fix quality. This latter issue is compensated with the usage of an active patch antenna with higher gain. Further tests are currently being conducted in order to assess the performance of the sensors when compared to static ones.","title":"Outdoor tests"},{"location":"Guides/deployments/Almabike%20sensors/#references","text":"GPS NEO-M8U Specification: https://cdn.sparkfun.com/assets/6/d/7/c/6/NEO-M8U_DataSheet__UBX-15015679_.pdf \u21a9 Ceramic Patch Antenna Specification: https://www.molex.com/pdm_docs/as/2066400001-AS.pdf \u21a9","title":"References"},{"location":"Guides/deployments/Deploying%20SCK/","text":"Deploying the Smart Citizen Kit \u00b6 The Smart Citizen Kit can be used in both, indoor or outdoor setups. This page gives guidelines on how to install in either situation. Indoor installation \u00b6 In indoor conditions, the Kit can be installed using this 3D printed clip . How to install the kit \u00b6 Make sure you read the information about each type of sensor before installation: eCO2 and tVOCs sensor Noise PM sensor General tips \u00b6 Keep the sensors powered if they are going to be mounted in a fixed point Avoid areas with moist accumulation when possible Avoid temperature and humidity transients, specially for the eCO2/tVOC sensor Avoid covering the sensors, specially the PM sensor Avoid covering the microphone and particles to go in the microphone port Avoid direct flow towards the sensors. If exposed under flow conditions, have the flow go parallel to the sensors' surface Outdoor installation \u00b6 For outdoor installation, an enclosure is recommended in order to avoid moisture to damage the sensors and electronics. The Enclosures Repository contains various types (3D printed, milled, DIY) from us and contributions from users that customise their own! Feel free to download the models and tweak them, and if happy, share them back via pull request to the repository. The general tips from above also apply, as well as: Avoid exhausts from air conditioning units, kitchens and others Protect the sensors from moisture either using filtering foam or nail polish to cover the sensor pads (see here ) Avoid temperature transients, specially due to sun radiation Powering the sensor \u00b6 The SCK can be powered through: LiPo 3.7V Battery: default 2000mAh - large 6000mAh Mains power, through an USB adaptor (not recommended) or a custom power supply in this enclosure Solar panel : we use the Solar Panel 6W 6V from Voltaic Systems with the MPTT DF Robot DFR0559 and an additional LiPo Battery, all in this enclosure Using the power supply If you are using the Smart Citizen Power Supply, have a look at this guide for safety instructions. Connectivity \u00b6 The sensors can log data in sd card or remote post data to the Smart Citizen Platform. In the case of remote logging and outdoor deployments, a connectivity unit can be used with a SIM Card data plan. These units are enclosed in a waterproof box and can be powered from 230VAC 3m cable (or more), deploying a network to which several SCKs can be connected in an outdoor deployment. You can check the BOM and installation/building here and you can email us at info@smartcitizen for more information. Got one? Check this installation guide to get started","title":"Smart Citizen Kit"},{"location":"Guides/deployments/Deploying%20SCK/#deploying-the-smart-citizen-kit","text":"The Smart Citizen Kit can be used in both, indoor or outdoor setups. This page gives guidelines on how to install in either situation.","title":"Deploying the Smart Citizen Kit"},{"location":"Guides/deployments/Deploying%20SCK/#indoor-installation","text":"In indoor conditions, the Kit can be installed using this 3D printed clip .","title":"Indoor installation"},{"location":"Guides/deployments/Deploying%20SCK/#how-to-install-the-kit","text":"Make sure you read the information about each type of sensor before installation: eCO2 and tVOCs sensor Noise PM sensor","title":"How to install the kit"},{"location":"Guides/deployments/Deploying%20SCK/#general-tips","text":"Keep the sensors powered if they are going to be mounted in a fixed point Avoid areas with moist accumulation when possible Avoid temperature and humidity transients, specially for the eCO2/tVOC sensor Avoid covering the sensors, specially the PM sensor Avoid covering the microphone and particles to go in the microphone port Avoid direct flow towards the sensors. If exposed under flow conditions, have the flow go parallel to the sensors' surface","title":"General tips"},{"location":"Guides/deployments/Deploying%20SCK/#outdoor-installation","text":"For outdoor installation, an enclosure is recommended in order to avoid moisture to damage the sensors and electronics. The Enclosures Repository contains various types (3D printed, milled, DIY) from us and contributions from users that customise their own! Feel free to download the models and tweak them, and if happy, share them back via pull request to the repository. The general tips from above also apply, as well as: Avoid exhausts from air conditioning units, kitchens and others Protect the sensors from moisture either using filtering foam or nail polish to cover the sensor pads (see here ) Avoid temperature transients, specially due to sun radiation","title":"Outdoor installation"},{"location":"Guides/deployments/Deploying%20SCK/#powering-the-sensor","text":"The SCK can be powered through: LiPo 3.7V Battery: default 2000mAh - large 6000mAh Mains power, through an USB adaptor (not recommended) or a custom power supply in this enclosure Solar panel : we use the Solar Panel 6W 6V from Voltaic Systems with the MPTT DF Robot DFR0559 and an additional LiPo Battery, all in this enclosure Using the power supply If you are using the Smart Citizen Power Supply, have a look at this guide for safety instructions.","title":"Powering the sensor"},{"location":"Guides/deployments/Deploying%20SCK/#connectivity","text":"The sensors can log data in sd card or remote post data to the Smart Citizen Platform. In the case of remote logging and outdoor deployments, a connectivity unit can be used with a SIM Card data plan. These units are enclosed in a waterproof box and can be powered from 230VAC 3m cable (or more), deploying a network to which several SCKs can be connected in an outdoor deployment. You can check the BOM and installation/building here and you can email us at info@smartcitizen for more information. Got one? Check this installation guide to get started","title":"Connectivity"},{"location":"Guides/deployments/Deploying%20Smart%20Citizen%20Station/","text":"Deploying the Smart Citizen Station \u00b6 This guide will summarise how to install the Smart Citizen Station and set it all up for successful readings. Hardware \u00b6 The unit should come assembled and ready to use. It consists of various parts: Enclosure and mounting system Sensors module Power supply Physical measurements \u00b6 The Station measurements are shown in the image below: Dimensions with cover (length, height, depth) (approx.): 340mm x 160mm x 230 mm Dimensions without cover (length, height, depth) (approx): 260mm x 120mm x 180mm Enclosure and mounting system \u00b6 The enclosure holds the sensors in place and protects them against weather. A rain and sun radiation cover for protection made out of white sandwich panel or dibond . This element carries out the structural support of the station and protects the unit against rain, wind or heat. The sensors module which contains the electronics and sensors, is attached to the cover and can be removed without having to uninstall the rain cover. Finally, The power supply , is a separated from the module, so that intervention in the sensors' area can be performed safely with a tangible desconection of the mains power. Flexible attachment This mounting is thought to work on a lampost, fence or wall. We recommend a somewhat flexible join (i.e. zip-ties) in case of windy locations Power supply details Refer to the Power supply section and the guide on it's installation for more details. Sensors module \u00b6 The sensors module is the area where all the action takes place. This is the bottom view: An this is the inside one (will change with further development): The Station is powered through it's USB input. It can be reset by either: disconnecting the power to the mains introducing a thin screw driver or pen through the RESET button hole indicated above Power USB We do not recommend to use any other cable than the supplied one in outdoor conditions. Power supply \u00b6 The Smart Citizen Station uses the Smart Citizen Power Supply for power. The input of the station is the connector shown in the image below. Inside the station, power is distributed accross the different units. Data and power goes through the input, in order to connect to the Data Board and be able to use the Shell . All voltage levels inside the station are below 5V. Using the power supply For more information about how to handle the Smart Citizen Power Supply, have a look at this guide for safety instructions. Installation \u00b6 Follow the steps below for making sure everything is working fine before setting it up in an outdoor spot. First, power the unit with the USB provided. The unit can be powered with a normal USB charger first for configuration, or with a laptop as well. If you have a laptop at hand it's going to be handy for step 3. The indicator LED should turn on. It will first be GREEN, WHITE (may take a while) and then RED or BLUE, depending on the configuration of the Station. You can see more information on the LED status here If you have a laptop available, it is recommended to check with the Shell and request the sensors: sensor After this, a list of all the enabled sensors should appear. You can configure the recording interval as well, in case you need less or more data. If all is working fine, you can now proceed to installation of the unit in an outdoor spot. This is a list of all the possible sensors in the Station (seen from the hardware side), the actual sensor list will depend on your version: Temperature Humidity Battery Light Noise dBA Barometric pressure VOC Gas CCS811 eCO2 Gas CCS811 PM board Dallas Temperature ADS1x15 ADC 0x48 Ch0 ADS1x15 ADC 0x48 Ch1 ADS1x15 ADC 0x48 Ch2 ADS1x15 ADC 0x48 Ch3 ADS1x15 ADC 0x49 Ch0 ADS1x15 ADC 0x49 Ch1 ADS1x15 ADC 0x49 Ch2 ADS1x15 ADC 0x49 Ch3 ADS1x15 ADC 0x4A Ch0 ADS1x15 ADC 0x4A Ch1 ADS1x15 ADC 0x4A Ch2 ADS1x15 ADC 0x4A Ch3 ADS1x15 ADC 0x4B Ch0 ADS1x15 ADC 0x4B Ch1 ADS1x15 ADC 0x4B Ch2 ADS1x15 ADC 0x4B Ch3 Ext PM_A 1.0 Ext PM_A 2.5 Ext PM_A 10.0 Ext PM_B 1.0 Ext PM_B 2.5 Ext PM_B 10.0 Check the meaning of the sensor channels This a complete list of sensors. Have a look at it to get a full description and location of each of them. This is an example of the sensor list in a normal 4-electrochemical sensors Station (with some additional comments for clarity): ``` ----------------------- Sensors in Urban Board ----------------------- Temperature Humidity Battery Light Noise dBA Barometric pressure VOC Gas CCS811 eCO2 Gas CCS811 ----------------------- Sensors in Auxliary Bus ----------------------- # External temperature sensor PM board Dallas Temperature # Electrochemical sensors voltages ADS1x15 ADC 0x48 Ch0 ADS1x15 ADC 0x48 Ch1 ADS1x15 ADC 0x48 Ch2 ADS1x15 ADC 0x48 Ch3 ADS1x15 ADC 0x4A Ch0 ADS1x15 ADC 0x4A Ch1 ADS1x15 ADC 0x4A Ch2 ADS1x15 ADC 0x4A Ch3 # Particulate matter sensors Ext PM_A 1.0 Ext PM_A 2.5 Ext PM_A 10.0 Ext PM_B 1.0 Ext PM_B 2.5 Ext PM_B 10.0 ``` Sensor readings Sensor readings for the Electrochemical sensors are sent in raw and later on processed. Each electrochemical sensor has two outputs read by one of the ADCs so, for 4 electrochemical sensors, we need at least 8 channels. Physical installation \u00b6 The enclosure can be installed using the mounting holes seen below. There is sufficient space to pass zip ties. If you want to use drills, we recommend at least 6mm screws (or 8mm) and to dissasemble the plastic cover from the sandwich pannel for safer installation. Below are some general guidelines for the installation of the device: Avoid areas with moist accumulation when possible Avoid temperature and humidity transients Avoid covering the sensors in front of the sensors, specially the PM sensor Avoid covering the microphone and particles to go in the microphone port Avoid direct flow towards the sensors. If exposed under flow conditions, have the flow go parallel to the sensors' surface Despite the umbrella cover, sun radiation and transients are better to be avoided A good height for installing the sensors is somewhere between 2-3m, but it all depends on the case study and available support structures. Configuration \u00b6 The process to register the Smart Citizen Station and send data to the platform is the same as the one from the Smart Citizen Kit ( start.smartcitizen.me ): Only, make sure to select the appropiate Kit ( #33 Smart Citizen Station 2.1 rev3 ) in the Advanced Selection field: Advanced tip If you are familiar with Shell commands, or you use Arduino IDE to interact with the Station, you can use this Shell Guide , and connect to the device. Then write down the configuration that you get when typing config : SCK > config Mode: network Publish interval: 180 Reading interval: 60 Wifi credentials: WIFI-SSID - WIFIPASS Token: 123456 Mac address: XX:XX:XX:XX:XX Also, if you are using the phone, you can turn the unit to SETUP mode again, using the ON-OFF button (the indication LED should shine in RED) and from there connect to the Station and get it's information: Handling calibration data \u00b6 Some components of the Station have individual calibrations such as the Alphasense Electrochemical Sensors. For this reason, it's necessary to store the physical ID (hardware ID) of the Station alonside to the virtual device in the Smart Citizen Platform. The harwdware ID should normally be in a sticker to the enclosure both inside and outside and looks like this: SCAS2100XX This number is important to relate to the actual calibration values of the sensors, stored in the data repository . In order to postprocess the data and calculate pollutants, make sure that the Hardware ID is safely stored in the platform's device, by posting this data to postprocessing_info field of the device. You can follow these instructions to store the postprocessing_info of your device. All the data is sent in raw to the Smart Citizen Platform and it's then processed outside of the sensors themselves. Both raw, and processed data are kept on the platform and can be accessed at any time. Data can be published to other APIs or to Zenodo as well, in case of research projects that seek contribution to Open Science Datasets. More on the processing of the data Check this guide to learn more about how to postprocess the data of the sensors your own way. Troubleshooting \u00b6 The first step in case anything goes wrong, is to reset the unit by pressing the RESET button. If this doesn't work, make sure that your problem is not already listed in the FAQs , and if not, contact us for more support.","title":"Smart Citizen Station V3"},{"location":"Guides/deployments/Deploying%20Smart%20Citizen%20Station/#deploying-the-smart-citizen-station","text":"This guide will summarise how to install the Smart Citizen Station and set it all up for successful readings.","title":"Deploying the Smart Citizen Station"},{"location":"Guides/deployments/Deploying%20Smart%20Citizen%20Station/#hardware","text":"The unit should come assembled and ready to use. It consists of various parts: Enclosure and mounting system Sensors module Power supply","title":"Hardware"},{"location":"Guides/deployments/Deploying%20Smart%20Citizen%20Station/#physical-measurements","text":"The Station measurements are shown in the image below: Dimensions with cover (length, height, depth) (approx.): 340mm x 160mm x 230 mm Dimensions without cover (length, height, depth) (approx): 260mm x 120mm x 180mm","title":"Physical measurements"},{"location":"Guides/deployments/Deploying%20Smart%20Citizen%20Station/#enclosure-and-mounting-system","text":"The enclosure holds the sensors in place and protects them against weather. A rain and sun radiation cover for protection made out of white sandwich panel or dibond . This element carries out the structural support of the station and protects the unit against rain, wind or heat. The sensors module which contains the electronics and sensors, is attached to the cover and can be removed without having to uninstall the rain cover. Finally, The power supply , is a separated from the module, so that intervention in the sensors' area can be performed safely with a tangible desconection of the mains power. Flexible attachment This mounting is thought to work on a lampost, fence or wall. We recommend a somewhat flexible join (i.e. zip-ties) in case of windy locations Power supply details Refer to the Power supply section and the guide on it's installation for more details.","title":"Enclosure and mounting system"},{"location":"Guides/deployments/Deploying%20Smart%20Citizen%20Station/#sensors-module","text":"The sensors module is the area where all the action takes place. This is the bottom view: An this is the inside one (will change with further development): The Station is powered through it's USB input. It can be reset by either: disconnecting the power to the mains introducing a thin screw driver or pen through the RESET button hole indicated above Power USB We do not recommend to use any other cable than the supplied one in outdoor conditions.","title":"Sensors module"},{"location":"Guides/deployments/Deploying%20Smart%20Citizen%20Station/#power-supply","text":"The Smart Citizen Station uses the Smart Citizen Power Supply for power. The input of the station is the connector shown in the image below. Inside the station, power is distributed accross the different units. Data and power goes through the input, in order to connect to the Data Board and be able to use the Shell . All voltage levels inside the station are below 5V. Using the power supply For more information about how to handle the Smart Citizen Power Supply, have a look at this guide for safety instructions.","title":"Power supply"},{"location":"Guides/deployments/Deploying%20Smart%20Citizen%20Station/#installation","text":"Follow the steps below for making sure everything is working fine before setting it up in an outdoor spot. First, power the unit with the USB provided. The unit can be powered with a normal USB charger first for configuration, or with a laptop as well. If you have a laptop at hand it's going to be handy for step 3. The indicator LED should turn on. It will first be GREEN, WHITE (may take a while) and then RED or BLUE, depending on the configuration of the Station. You can see more information on the LED status here If you have a laptop available, it is recommended to check with the Shell and request the sensors: sensor After this, a list of all the enabled sensors should appear. You can configure the recording interval as well, in case you need less or more data. If all is working fine, you can now proceed to installation of the unit in an outdoor spot. This is a list of all the possible sensors in the Station (seen from the hardware side), the actual sensor list will depend on your version: Temperature Humidity Battery Light Noise dBA Barometric pressure VOC Gas CCS811 eCO2 Gas CCS811 PM board Dallas Temperature ADS1x15 ADC 0x48 Ch0 ADS1x15 ADC 0x48 Ch1 ADS1x15 ADC 0x48 Ch2 ADS1x15 ADC 0x48 Ch3 ADS1x15 ADC 0x49 Ch0 ADS1x15 ADC 0x49 Ch1 ADS1x15 ADC 0x49 Ch2 ADS1x15 ADC 0x49 Ch3 ADS1x15 ADC 0x4A Ch0 ADS1x15 ADC 0x4A Ch1 ADS1x15 ADC 0x4A Ch2 ADS1x15 ADC 0x4A Ch3 ADS1x15 ADC 0x4B Ch0 ADS1x15 ADC 0x4B Ch1 ADS1x15 ADC 0x4B Ch2 ADS1x15 ADC 0x4B Ch3 Ext PM_A 1.0 Ext PM_A 2.5 Ext PM_A 10.0 Ext PM_B 1.0 Ext PM_B 2.5 Ext PM_B 10.0 Check the meaning of the sensor channels This a complete list of sensors. Have a look at it to get a full description and location of each of them. This is an example of the sensor list in a normal 4-electrochemical sensors Station (with some additional comments for clarity): ``` ----------------------- Sensors in Urban Board ----------------------- Temperature Humidity Battery Light Noise dBA Barometric pressure VOC Gas CCS811 eCO2 Gas CCS811 ----------------------- Sensors in Auxliary Bus ----------------------- # External temperature sensor PM board Dallas Temperature # Electrochemical sensors voltages ADS1x15 ADC 0x48 Ch0 ADS1x15 ADC 0x48 Ch1 ADS1x15 ADC 0x48 Ch2 ADS1x15 ADC 0x48 Ch3 ADS1x15 ADC 0x4A Ch0 ADS1x15 ADC 0x4A Ch1 ADS1x15 ADC 0x4A Ch2 ADS1x15 ADC 0x4A Ch3 # Particulate matter sensors Ext PM_A 1.0 Ext PM_A 2.5 Ext PM_A 10.0 Ext PM_B 1.0 Ext PM_B 2.5 Ext PM_B 10.0 ``` Sensor readings Sensor readings for the Electrochemical sensors are sent in raw and later on processed. Each electrochemical sensor has two outputs read by one of the ADCs so, for 4 electrochemical sensors, we need at least 8 channels.","title":"Installation"},{"location":"Guides/deployments/Deploying%20Smart%20Citizen%20Station/#physical-installation","text":"The enclosure can be installed using the mounting holes seen below. There is sufficient space to pass zip ties. If you want to use drills, we recommend at least 6mm screws (or 8mm) and to dissasemble the plastic cover from the sandwich pannel for safer installation. Below are some general guidelines for the installation of the device: Avoid areas with moist accumulation when possible Avoid temperature and humidity transients Avoid covering the sensors in front of the sensors, specially the PM sensor Avoid covering the microphone and particles to go in the microphone port Avoid direct flow towards the sensors. If exposed under flow conditions, have the flow go parallel to the sensors' surface Despite the umbrella cover, sun radiation and transients are better to be avoided A good height for installing the sensors is somewhere between 2-3m, but it all depends on the case study and available support structures.","title":"Physical installation"},{"location":"Guides/deployments/Deploying%20Smart%20Citizen%20Station/#configuration","text":"The process to register the Smart Citizen Station and send data to the platform is the same as the one from the Smart Citizen Kit ( start.smartcitizen.me ): Only, make sure to select the appropiate Kit ( #33 Smart Citizen Station 2.1 rev3 ) in the Advanced Selection field: Advanced tip If you are familiar with Shell commands, or you use Arduino IDE to interact with the Station, you can use this Shell Guide , and connect to the device. Then write down the configuration that you get when typing config : SCK > config Mode: network Publish interval: 180 Reading interval: 60 Wifi credentials: WIFI-SSID - WIFIPASS Token: 123456 Mac address: XX:XX:XX:XX:XX Also, if you are using the phone, you can turn the unit to SETUP mode again, using the ON-OFF button (the indication LED should shine in RED) and from there connect to the Station and get it's information:","title":"Configuration"},{"location":"Guides/deployments/Deploying%20Smart%20Citizen%20Station/#handling-calibration-data","text":"Some components of the Station have individual calibrations such as the Alphasense Electrochemical Sensors. For this reason, it's necessary to store the physical ID (hardware ID) of the Station alonside to the virtual device in the Smart Citizen Platform. The harwdware ID should normally be in a sticker to the enclosure both inside and outside and looks like this: SCAS2100XX This number is important to relate to the actual calibration values of the sensors, stored in the data repository . In order to postprocess the data and calculate pollutants, make sure that the Hardware ID is safely stored in the platform's device, by posting this data to postprocessing_info field of the device. You can follow these instructions to store the postprocessing_info of your device. All the data is sent in raw to the Smart Citizen Platform and it's then processed outside of the sensors themselves. Both raw, and processed data are kept on the platform and can be accessed at any time. Data can be published to other APIs or to Zenodo as well, in case of research projects that seek contribution to Open Science Datasets. More on the processing of the data Check this guide to learn more about how to postprocess the data of the sensors your own way.","title":"Handling calibration data"},{"location":"Guides/deployments/Deploying%20Smart%20Citizen%20Station/#troubleshooting","text":"The first step in case anything goes wrong, is to reset the unit by pressing the RESET button. If this doesn't work, make sure that your problem is not already listed in the FAQs , and if not, contact us for more support.","title":"Troubleshooting"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/","text":"Components \u00b6 The Station is a modular system based on different sensor board that connected to a central datalogger. Smart Citizen Stations Components Setup Sensors \u00b6 Measurement Units Sensor Component Air Temperature \u00baC Sensirion SHT-31 Urban Sensor Board Relative Humidity % REL Sensirion SHT-31 Urban Sensor Board Noise Level dBA Invensense ICS-434342 Urban Sensor Board Ambient Light Lux Rohm BH1721FVC Urban Sensor Board Barometric pressure and AMSL Pa and Meters NXP MPL3115A26 Urban Sensor Board Carbon Monoxide ppm Alphasense CO-B4 Gas Sensor Pro Board Nitrogen Dioxide ppb Alphasense NO2-B43F Gas Sensor Pro Board Ozone ppb Alphasense OX-B431 Gas Sensor Pro Board Gases Board Temperature \u00baC Sensirion SHT-31 Gas Sensor Pro Board Gases Board Rel. Humidity % REL Sensirion SHT-31 Gas Sensor Pro Board PM 1 \u00b5g/m3 Plantower PMS5003 Dual System PM Sensors Board PM 2.5 \u00b5g/m3 Plantower PMS5003 Dual System PM Sensors Board PM 10 \u00b5g/m3 Plantower PMS5003 Dual System PM Sensors Board The Pack \u00b6 iSCAPE Living Lab Station Urban Board 2.0 Data Board 2.0 PM Board 2.0 + 2 PM sensors Gas Pro Board 2.0 with 3 EC sensors 6Ah Battery Accessories MicroSD card 512MB USB Charger MicroSD to SD card adapter USB Power Supply 2m 3 Wire 220V cable Mounting brackets and screws Mounting tools (1x Wrench + 2 Allen Keys) Instructions \u00b6 Before setup \u00b6 Before configuring the Station setup make sure the LED is red. If not, press the button multiple times until the LED turns red. On boarding \u00b6 To start the installation simply visit the setup website stations.iscape.smartcitizen.me . Warning We will need you to send us the following information once you are done with the setup: the device ID , which appears in the URL of your device https://smartcitizen.me/kits/ XXXX and the physical station ID that corresponds to that device ID , which can be found in a sticker underneath. Get data from the SD card \u00b6 You will need to access the Kit in order to get the SD card. For this, first unscrew the two white layers at the top of the station with the keys provided in the Pack: Then turn off your Kit by pressing the button for 5 seconds and remove the micro SD card. You can plug the card on your computer using a Micro SD card reader. Warning Handle the SD card with care! It might drop inside the station You will find inside a YYYY-MM-DD.CSV with all the data. You can follow the Manual CSV data upload guide to manually upload the data to the platform. Power it back on! Once you are done uploading the data and you want to keep on logging, put the SD card back in with the Kit OFF and press the button. It will come back to life! Outdoor installation \u00b6 Use the perforated steel tape and the M6 provided to mount the Station on any street light or pole. The Pack also includes the required wrench: Also, a temperature probe needs to be extracted from the bottom of the station: And it should look like this: Umbrella cover installation \u00b6 Due to some issues with the waterproofness of the Living Lab Station, we have developed a solution to protect it from the rain. This solution is shown in the pictures below, and it's meant to solve these problems for the current version of the LLS. The newer version of the LLS has a simpler setup, already including such cover to protect it from the rain or sun radiation. Beware of collisions As you can see, the cover is a rugged piece and it's only meant for the current version of the station. Please, be careful and do not fit it in places where people could bump into it. This is what you get in the package (except the wrench): Step by step If you have the 3D printed cover on the Smart Citizen Kit, it's time to remove it. There is no need to remove the two top white layers (in the pictures we did it without them) Insert the threads in the already mounted t-slots. The distance between them is ~50mm Insert the 4x flat spacer in the threads Place the cover on the station Place the serrated spacers, with the serrated side on the outer part (they help to hold the station in place) Place the perforated steel stripe in one of the sides. Don't tight it too much, so that you have room to place it in the pole Put the station in it's final location, and tighten it with the perforated steel stripes. Play with both sides, so that the stripes are tight on the pole You are done! Power supply \u00b6 The Station can be directly powered at 220-240V AC (Max. consumption with the AC supply is 5W). It can also be powered via USB, with a normal phone charger (5V and 750mA max). However, there is a bit to do in order to change it. Let's see how! Batteries The Living Lab Station has a higher consumption, mostly due to the fans on the two PM sensors. That means the internal battery last just for 20h, and it is only aimed at providing backup power. For example, we can connect the station on the street light electric line, so the Station gets charged during the night when the lights are on. Solar Panel Unfortunately, we are having some problems with the PV Solar Panel system to power the Station independently. The system is currently under tests, and it will be available in the next few months. Changing power supplies \u00b6 Before we start, some tools that will be helpful during the process: Danger Unplug the station before starting this process from any type of external supply Step by step Remove the two covers using the allen keys as explained on the setup instructions. Remove the layer which contains the kit. The kit is attached to the layers below, as seen in the image Unplug the different connectors in the kit: I2C, battery and USB You can use nose pliers for the USB and the battery Time to get to the power layer, this time, two blue layers will come off Unscrew the cover for the power area Make sure there is no energy left in the power supply by checking that there is no LED on in it. Then, remove the cables from the power supply and the white brackets Extract the cable from the base's cable gland Cover the cable gland again and remove the square cable gland on the other side Exchange the rubber in the cable gland with the one provided with a hole Put the cable in and fix the gland in place. Leave sufficient overhead in the cable to be able to connect it to the kit Put the power cover back on Put the kit's layer back on and pass the cables through Connect everything in this order: first, the I2C connector, second, the battery, third, the USB Put the kit's layer on again. Verify that the o-ring fit's in properly. Close everything and put both layers back on on Now, you can use the USB power supply or the battery pack! Dimensions \u00b6 Troubleshooting \u00b6 The station does not respond \u00b6 If the station does not respond or does not work properly you can do two things: Reboot your Station You can fully reboot your Station by pressing the reset button located under the sensors board as seen on the picture. That will not delete any configuration, it will simply restart your device. Press the RESET button for a second. The light will go off and on and the device will start again. You can also perform a reboot by disconnecting the battery and the USB cable so that the station is restarted. In this way we will not lose any data and configuration except the time in case of being in SD mode . Factory reset your Station You can fully reset the Station to the default settings so you can register again your device. Press the main button for 15 seconds . After 5 seconds the light will go off and will go on again after 15 seconds. Then you can release the button and your device will be fully resetted as a brand new Station. The LED does not turn on and the station does not work \u00b6 First of all, push the station button. Maybe it's simply off. If this does not work, surely the station has been left without battery. You will have to charge it using the USB charger. Any other mobile charger will also work. We will know that it is charging when the LED emits orange pulses and once the battery is charged it will emit green The station does not store the data on the SD card. \u00b6 Some SD cards may have problems over time. We can try formatting it but in case it does not work any micro SD card we buy at any mobile or computer store it will work. The size is not important and any micro SD or micro SDHC 512MB card up to 32GB will work.","title":"iSCAPE Station V1"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#components","text":"The Station is a modular system based on different sensor board that connected to a central datalogger. Smart Citizen Stations Components Setup","title":"Components"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#sensors","text":"Measurement Units Sensor Component Air Temperature \u00baC Sensirion SHT-31 Urban Sensor Board Relative Humidity % REL Sensirion SHT-31 Urban Sensor Board Noise Level dBA Invensense ICS-434342 Urban Sensor Board Ambient Light Lux Rohm BH1721FVC Urban Sensor Board Barometric pressure and AMSL Pa and Meters NXP MPL3115A26 Urban Sensor Board Carbon Monoxide ppm Alphasense CO-B4 Gas Sensor Pro Board Nitrogen Dioxide ppb Alphasense NO2-B43F Gas Sensor Pro Board Ozone ppb Alphasense OX-B431 Gas Sensor Pro Board Gases Board Temperature \u00baC Sensirion SHT-31 Gas Sensor Pro Board Gases Board Rel. Humidity % REL Sensirion SHT-31 Gas Sensor Pro Board PM 1 \u00b5g/m3 Plantower PMS5003 Dual System PM Sensors Board PM 2.5 \u00b5g/m3 Plantower PMS5003 Dual System PM Sensors Board PM 10 \u00b5g/m3 Plantower PMS5003 Dual System PM Sensors Board","title":"Sensors"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#the-pack","text":"iSCAPE Living Lab Station Urban Board 2.0 Data Board 2.0 PM Board 2.0 + 2 PM sensors Gas Pro Board 2.0 with 3 EC sensors 6Ah Battery Accessories MicroSD card 512MB USB Charger MicroSD to SD card adapter USB Power Supply 2m 3 Wire 220V cable Mounting brackets and screws Mounting tools (1x Wrench + 2 Allen Keys)","title":"The Pack"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#instructions","text":"","title":"Instructions"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#before-setup","text":"Before configuring the Station setup make sure the LED is red. If not, press the button multiple times until the LED turns red.","title":"Before setup"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#on-boarding","text":"To start the installation simply visit the setup website stations.iscape.smartcitizen.me . Warning We will need you to send us the following information once you are done with the setup: the device ID , which appears in the URL of your device https://smartcitizen.me/kits/ XXXX and the physical station ID that corresponds to that device ID , which can be found in a sticker underneath.","title":"On boarding"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#get-data-from-the-sd-card","text":"You will need to access the Kit in order to get the SD card. For this, first unscrew the two white layers at the top of the station with the keys provided in the Pack: Then turn off your Kit by pressing the button for 5 seconds and remove the micro SD card. You can plug the card on your computer using a Micro SD card reader. Warning Handle the SD card with care! It might drop inside the station You will find inside a YYYY-MM-DD.CSV with all the data. You can follow the Manual CSV data upload guide to manually upload the data to the platform. Power it back on! Once you are done uploading the data and you want to keep on logging, put the SD card back in with the Kit OFF and press the button. It will come back to life!","title":"Get data from the SD card"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#outdoor-installation","text":"Use the perforated steel tape and the M6 provided to mount the Station on any street light or pole. The Pack also includes the required wrench: Also, a temperature probe needs to be extracted from the bottom of the station: And it should look like this:","title":"Outdoor installation"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#umbrella-cover-installation","text":"Due to some issues with the waterproofness of the Living Lab Station, we have developed a solution to protect it from the rain. This solution is shown in the pictures below, and it's meant to solve these problems for the current version of the LLS. The newer version of the LLS has a simpler setup, already including such cover to protect it from the rain or sun radiation. Beware of collisions As you can see, the cover is a rugged piece and it's only meant for the current version of the station. Please, be careful and do not fit it in places where people could bump into it. This is what you get in the package (except the wrench): Step by step If you have the 3D printed cover on the Smart Citizen Kit, it's time to remove it. There is no need to remove the two top white layers (in the pictures we did it without them) Insert the threads in the already mounted t-slots. The distance between them is ~50mm Insert the 4x flat spacer in the threads Place the cover on the station Place the serrated spacers, with the serrated side on the outer part (they help to hold the station in place) Place the perforated steel stripe in one of the sides. Don't tight it too much, so that you have room to place it in the pole Put the station in it's final location, and tighten it with the perforated steel stripes. Play with both sides, so that the stripes are tight on the pole You are done!","title":"Umbrella cover installation"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#power-supply","text":"The Station can be directly powered at 220-240V AC (Max. consumption with the AC supply is 5W). It can also be powered via USB, with a normal phone charger (5V and 750mA max). However, there is a bit to do in order to change it. Let's see how! Batteries The Living Lab Station has a higher consumption, mostly due to the fans on the two PM sensors. That means the internal battery last just for 20h, and it is only aimed at providing backup power. For example, we can connect the station on the street light electric line, so the Station gets charged during the night when the lights are on. Solar Panel Unfortunately, we are having some problems with the PV Solar Panel system to power the Station independently. The system is currently under tests, and it will be available in the next few months.","title":"Power supply"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#changing-power-supplies","text":"Before we start, some tools that will be helpful during the process: Danger Unplug the station before starting this process from any type of external supply Step by step Remove the two covers using the allen keys as explained on the setup instructions. Remove the layer which contains the kit. The kit is attached to the layers below, as seen in the image Unplug the different connectors in the kit: I2C, battery and USB You can use nose pliers for the USB and the battery Time to get to the power layer, this time, two blue layers will come off Unscrew the cover for the power area Make sure there is no energy left in the power supply by checking that there is no LED on in it. Then, remove the cables from the power supply and the white brackets Extract the cable from the base's cable gland Cover the cable gland again and remove the square cable gland on the other side Exchange the rubber in the cable gland with the one provided with a hole Put the cable in and fix the gland in place. Leave sufficient overhead in the cable to be able to connect it to the kit Put the power cover back on Put the kit's layer back on and pass the cables through Connect everything in this order: first, the I2C connector, second, the battery, third, the USB Put the kit's layer on again. Verify that the o-ring fit's in properly. Close everything and put both layers back on on Now, you can use the USB power supply or the battery pack!","title":"Changing power supplies"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#dimensions","text":"","title":"Dimensions"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#the-station-does-not-respond","text":"If the station does not respond or does not work properly you can do two things: Reboot your Station You can fully reboot your Station by pressing the reset button located under the sensors board as seen on the picture. That will not delete any configuration, it will simply restart your device. Press the RESET button for a second. The light will go off and on and the device will start again. You can also perform a reboot by disconnecting the battery and the USB cable so that the station is restarted. In this way we will not lose any data and configuration except the time in case of being in SD mode . Factory reset your Station You can fully reset the Station to the default settings so you can register again your device. Press the main button for 15 seconds . After 5 seconds the light will go off and will go on again after 15 seconds. Then you can release the button and your device will be fully resetted as a brand new Station.","title":"The station does not respond"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#the-led-does-not-turn-on-and-the-station-does-not-work","text":"First of all, push the station button. Maybe it's simply off. If this does not work, surely the station has been left without battery. You will have to charge it using the USB charger. Any other mobile charger will also work. We will know that it is charging when the LED emits orange pulses and once the battery is charged it will emit green","title":"The LED does not turn on and the station does not work"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V1/#the-station-does-not-store-the-data-on-the-sd-card","text":"Some SD cards may have problems over time. We can try formatting it but in case it does not work any micro SD card we buy at any mobile or computer store it will work. The size is not important and any micro SD or micro SDHC 512MB card up to 32GB will work.","title":"The station does not store the data on the SD card."},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V2/","text":"Components \u00b6 Sensors \u00b6 The sensors of the iSCAPE Living Lab Station V2.0 are the same as the ones in the iSCAPE Station V1.0 . The Pack \u00b6 Smart Citizen Station Urban Board 2.1 Data Board 2.1 PM Board 2.0 + 2 PM sensors Gas Pro Board 2.0 with 3 EC sensors 6Ah Battery Accessories MicroSD card 512MB USB Charger MicroSD to SD card adapter Smart Citizen Power Supply (Traco P.S. 230AC in - DC5V out) 2m 3-Wire 220V cable Mounting brackets Mounting tools (1 x Allen Key) Enclosure Mounting bracket Thermoconformed Umbrella Instructions \u00b6 To start the installation simply visit the setup website stations.iscape.smartcitizen.me . Warning We keep track internally of all sensor deployments and it is very important not to swap the internal components between Station to avoid mismatchs on the calibration data. Outdoor installation \u00b6 WIP This section is WIP Power \u00b6 The iSCAPE Station has a battery life of 12 hours as is intended as a backup solution only. That's why a power supply needs to be installed as decribed below. When we no longer want to publish or save more data for a few days we can turn off the kit. To do this, press the button for 5 seconds. If the colors of the LED appear orange indicates that the battery must be charged. The battery takes about 4 hours to fully charge. When the battery is fully charged, change the orange to green . Remember that in addition to the colors you will have the state color of the kit: configuration, network and sd. Power supply \u00b6 The Station can be directly powered at 220V AC (max consumption 5W). Working on batteries The Smart Citizen Station has a higher consumption than the kit, mostly due to the fans on the two PM sensors. That means the internal battery last just for 20h, and it is only aimed at providing backup power.","title":"iSCAPE Station V2"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V2/#components","text":"","title":"Components"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V2/#sensors","text":"The sensors of the iSCAPE Living Lab Station V2.0 are the same as the ones in the iSCAPE Station V1.0 .","title":"Sensors"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V2/#the-pack","text":"Smart Citizen Station Urban Board 2.1 Data Board 2.1 PM Board 2.0 + 2 PM sensors Gas Pro Board 2.0 with 3 EC sensors 6Ah Battery Accessories MicroSD card 512MB USB Charger MicroSD to SD card adapter Smart Citizen Power Supply (Traco P.S. 230AC in - DC5V out) 2m 3-Wire 220V cable Mounting brackets Mounting tools (1 x Allen Key) Enclosure Mounting bracket Thermoconformed Umbrella","title":"The Pack"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V2/#instructions","text":"To start the installation simply visit the setup website stations.iscape.smartcitizen.me . Warning We keep track internally of all sensor deployments and it is very important not to swap the internal components between Station to avoid mismatchs on the calibration data.","title":"Instructions"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V2/#outdoor-installation","text":"WIP This section is WIP","title":"Outdoor installation"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V2/#power","text":"The iSCAPE Station has a battery life of 12 hours as is intended as a backup solution only. That's why a power supply needs to be installed as decribed below. When we no longer want to publish or save more data for a few days we can turn off the kit. To do this, press the button for 5 seconds. If the colors of the LED appear orange indicates that the battery must be charged. The battery takes about 4 hours to fully charge. When the battery is fully charged, change the orange to green . Remember that in addition to the colors you will have the state color of the kit: configuration, network and sd.","title":"Power"},{"location":"Guides/deployments/Deploying%20iSCAPE%20Station%20V2/#power-supply","text":"The Station can be directly powered at 220V AC (max consumption 5W). Working on batteries The Smart Citizen Station has a higher consumption than the kit, mostly due to the fans on the two PM sensors. That means the internal battery last just for 20h, and it is only aimed at providing backup power.","title":"Power supply"},{"location":"Guides/deployments/Installing%20Connectivity%20Units/","text":"Installing the Connectivity Units \u00b6 The pack \u00b6 An IP65 box containing a 4G WiFi Access point with two external dipole antennas. Additionally: Mounting fittings SIM card adaptor Ethernet cable User manual How much data is needed At the maximum data rates (Smart Citizen Station with all sensors - 35 metrics) we estimate 300bytes per payload (approx. without accounting for protocol overhead). It would be then safe to say that, per month and device, at maximum we need around 15MB. This means that with a data plan for 200MB/month you could have around 13 devices! Step by step Open the box with the safety key provided. You should see this inside Before powering the unit, place the SD card in the slot. You can use the adaptor if needed Take the stickers out for the antennas holes and pass them through, leaving the washers as seen below: Power on the unit, and then press the power button in the back. The SSID and the Password for the deployed network should be visible on the AP. Enjoy! Reconfigure the AP Follow the instructions in the quick installation guide provided to reconfigure the SSID and Password.","title":"Smart Citizen Connectivity Units"},{"location":"Guides/deployments/Installing%20Connectivity%20Units/#installing-the-connectivity-units","text":"","title":"Installing the Connectivity Units"},{"location":"Guides/deployments/Installing%20Connectivity%20Units/#the-pack","text":"An IP65 box containing a 4G WiFi Access point with two external dipole antennas. Additionally: Mounting fittings SIM card adaptor Ethernet cable User manual How much data is needed At the maximum data rates (Smart Citizen Station with all sensors - 35 metrics) we estimate 300bytes per payload (approx. without accounting for protocol overhead). It would be then safe to say that, per month and device, at maximum we need around 15MB. This means that with a data plan for 200MB/month you could have around 13 devices! Step by step Open the box with the safety key provided. You should see this inside Before powering the unit, place the SD card in the slot. You can use the adaptor if needed Take the stickers out for the antennas holes and pass them through, leaving the washers as seen below: Power on the unit, and then press the power button in the back. The SSID and the Password for the deployed network should be visible on the AP. Enjoy! Reconfigure the AP Follow the instructions in the quick installation guide provided to reconfigure the SSID and Password.","title":"The pack"},{"location":"Guides/deployments/Installing%20solar%20panel/","text":"This guide walks through the process for installing a Solar Panel with the Smart Citizen Kit. This guide is a work-in-progress Components \u00b6 Our default solar panel proposal is a Voltaic Systems 6W 6V Solar Panel . The solar panel is totally water proof, and we recommend using extension cable and open leads cabling for connecting it to our MPTT proposal, the MPTT DF Robot DFR0559 . We also recommend using the solar panel bracket for attachment to walls or lampposts. Item Source Information 6W 6V Solar Panel Voltaic Systems Link Xxtension cable Voltaic Systems Link Open leads cabling Voltaic Systems Link Mounting bracket Voltaic Systems Link MPTT DF Robot DFR0559 Link Battery DF Robot DFR0559 Link Installation \u00b6 Physical installation \u00b6 Use the bracket to install the panel according to the panel orientation below. The SCK can be up to 3m away from the solar panel. This example image shows how the panel should look once in place: Image credit: Voltaic Systems Panel orientation \u00b6 It is important to orient the solar panel properly to get the maximum amount of sunlight in the proper angle. Reference This is a nice calculator for your location. Solar panels should always face true south in the Northern Hemisphere and North in the Southern Hemisphere . The orientation of the solar panel with respect to the horizontal plane should be at a degree equal to your latitude plus 15 degrees in winter, or minus 15 degrees in summer (roughly). A bit more advanced tweaking, could achieve better efficiency for fixed solar panels. Since the winter season has the least sun, you want to make the most of it. In this case, the tilt should be designed so that the panel points directly at the sun at noon. To calculate, multiply your latitude by 0.9, and add 30 degrees. The 6W 6V solar panel that we suggest using, is calculated for having enough amount of insolation during winter in Spain's latitude, considering the amount of hours/day there is sun in winter. A larger solar panel can be used for higher latitudes (or further south), with less hours/day of insolation.","title":"Solar Panel"},{"location":"Guides/deployments/Installing%20solar%20panel/#components","text":"Our default solar panel proposal is a Voltaic Systems 6W 6V Solar Panel . The solar panel is totally water proof, and we recommend using extension cable and open leads cabling for connecting it to our MPTT proposal, the MPTT DF Robot DFR0559 . We also recommend using the solar panel bracket for attachment to walls or lampposts. Item Source Information 6W 6V Solar Panel Voltaic Systems Link Xxtension cable Voltaic Systems Link Open leads cabling Voltaic Systems Link Mounting bracket Voltaic Systems Link MPTT DF Robot DFR0559 Link Battery DF Robot DFR0559 Link","title":"Components"},{"location":"Guides/deployments/Installing%20solar%20panel/#installation","text":"","title":"Installation"},{"location":"Guides/deployments/Installing%20solar%20panel/#physical-installation","text":"Use the bracket to install the panel according to the panel orientation below. The SCK can be up to 3m away from the solar panel. This example image shows how the panel should look once in place: Image credit: Voltaic Systems","title":"Physical installation"},{"location":"Guides/deployments/Installing%20solar%20panel/#panel-orientation","text":"It is important to orient the solar panel properly to get the maximum amount of sunlight in the proper angle. Reference This is a nice calculator for your location. Solar panels should always face true south in the Northern Hemisphere and North in the Southern Hemisphere . The orientation of the solar panel with respect to the horizontal plane should be at a degree equal to your latitude plus 15 degrees in winter, or minus 15 degrees in summer (roughly). A bit more advanced tweaking, could achieve better efficiency for fixed solar panels. Since the winter season has the least sun, you want to make the most of it. In this case, the tilt should be designed so that the panel points directly at the sun at noon. To calculate, multiply your latitude by 0.9, and add 30 degrees. The 6W 6V solar panel that we suggest using, is calculated for having enough amount of insolation during winter in Spain's latitude, considering the amount of hours/day there is sun in winter. A larger solar panel can be used for higher latitudes (or further south), with less hours/day of insolation.","title":"Panel orientation"},{"location":"Guides/deployments/OLED%20display/","text":"OLED Display \u00b6 Supported screens are 128x128 and use the SH1107 controller, we have tested the code with displays labeled as v2.0 and v2.1. If the screen is connected to the AUX grove connector on the SCK it will be autodetected on boot: Info bar \u00b6 From left to right on the info bar we will find: Mode: The Operation mode in which our kit is now ( SETUP , WIFI , SD or SHELL ). No icon, just text on this one. Wi-Fi: This icon will appear when the kit is connected to the internet. SD card: Present when an SD card is inserted and writable. Time synced: Shown when the SCK internal clock has been synced. External power: Shown when the USB cable that provides power to the kit is connected. Battery states: Charging, full (75%-100%), half (25%-75%), empty (<25%). The battery level is also shown as a percentage. When the battery is disconnected, no icon or percentage are shown. Setup screen \u00b6 When the SCK is in setup mode, it will display the name of the Wi-Fi Access point network and some simple instructions. Readings display \u00b6 Enabled sensors will be shown by default in a three-second loop (except the battery, that's already on the info bar). Using the command shell , you can manually add/remove sensors from the display loop with the command sensor sensorName -oled that will toggle the state of the selected sensor. SCK > sensor temperature -oled Temperature will not show on oled display And check which sensors are displayed with the command sensor . SCK > sensor ... Temperature (60 sec) Humidity (60 sec) - oled Light (60 sec) - oled Noise dBA (60 sec) - oled ... Error bar \u00b6 Errors related to SD card, time sync, Wi-Fi, missing configuration or general network errors are shown in a pop-up at the bottom of the screen. Monitor plot \u00b6 You can plot one sensor in real time directly to the OLED screen, to use this feature you need to issue the command monitor -oled sensorName via the command shell . During the execution, the kit will stop all other tasks and try to send readings as fast as it can. Update speed depends on which sensor you are plotting. SCK > monitor -oled light Debug log view \u00b6 Debug output to OLED screen is supported, it has to be enabled via the command shell . You can toggle debug output with the command debug -oled . Everything that is normally printed on the shell will also be redirected to the OLED screen with a very small font!! SCK > debug -oled Oled display debug: true Known issues \u00b6 All this development has been done with a short (~5 cm) grove cable, when testing longer cables we have seen instabilities that prevent the display refresh or even hang the SCK kit. More tests with bus speed and related issues are needed. Using this display simultaneously with other external sensors on the auxiliary I2C bus may cause instabilities.","title":"OLED display"},{"location":"Guides/deployments/OLED%20display/#oled-display","text":"Supported screens are 128x128 and use the SH1107 controller, we have tested the code with displays labeled as v2.0 and v2.1. If the screen is connected to the AUX grove connector on the SCK it will be autodetected on boot:","title":"OLED Display"},{"location":"Guides/deployments/OLED%20display/#info-bar","text":"From left to right on the info bar we will find: Mode: The Operation mode in which our kit is now ( SETUP , WIFI , SD or SHELL ). No icon, just text on this one. Wi-Fi: This icon will appear when the kit is connected to the internet. SD card: Present when an SD card is inserted and writable. Time synced: Shown when the SCK internal clock has been synced. External power: Shown when the USB cable that provides power to the kit is connected. Battery states: Charging, full (75%-100%), half (25%-75%), empty (<25%). The battery level is also shown as a percentage. When the battery is disconnected, no icon or percentage are shown.","title":"Info bar"},{"location":"Guides/deployments/OLED%20display/#setup-screen","text":"When the SCK is in setup mode, it will display the name of the Wi-Fi Access point network and some simple instructions.","title":"Setup screen"},{"location":"Guides/deployments/OLED%20display/#readings-display","text":"Enabled sensors will be shown by default in a three-second loop (except the battery, that's already on the info bar). Using the command shell , you can manually add/remove sensors from the display loop with the command sensor sensorName -oled that will toggle the state of the selected sensor. SCK > sensor temperature -oled Temperature will not show on oled display And check which sensors are displayed with the command sensor . SCK > sensor ... Temperature (60 sec) Humidity (60 sec) - oled Light (60 sec) - oled Noise dBA (60 sec) - oled ...","title":"Readings display"},{"location":"Guides/deployments/OLED%20display/#error-bar","text":"Errors related to SD card, time sync, Wi-Fi, missing configuration or general network errors are shown in a pop-up at the bottom of the screen.","title":"Error bar"},{"location":"Guides/deployments/OLED%20display/#monitor-plot","text":"You can plot one sensor in real time directly to the OLED screen, to use this feature you need to issue the command monitor -oled sensorName via the command shell . During the execution, the kit will stop all other tasks and try to send readings as fast as it can. Update speed depends on which sensor you are plotting. SCK > monitor -oled light","title":"Monitor plot"},{"location":"Guides/deployments/OLED%20display/#debug-log-view","text":"Debug output to OLED screen is supported, it has to be enabled via the command shell . You can toggle debug output with the command debug -oled . Everything that is normally printed on the shell will also be redirected to the OLED screen with a very small font!! SCK > debug -oled Oled display debug: true","title":"Debug log view"},{"location":"Guides/deployments/OLED%20display/#known-issues","text":"All this development has been done with a short (~5 cm) grove cable, when testing longer cables we have seen instabilities that prevent the display refresh or even hang the SCK kit. More tests with bus speed and related issues are needed. Using this display simultaneously with other external sensors on the auxiliary I2C bus may cause instabilities.","title":"Known issues"},{"location":"Guides/deployments/Using%20the%20power%20supply/","text":"Using the custom power supply \u00b6 The power supply is very simple to operate. If you have purchased one, normally, everything should be connected and ready to go. In some cases, the AC cable (left screw connector) is not connected, and it can be simply connected through the cable gland into the terminals. No ground is required. When connecting the plug to the wall socket, the red LED should turn on indicating 5V output. The input is protected with a 1A Fuse and the pack should be enclosed in a waterproof enclosure as detailed here . The indication LED shows the Power Supply is active. It is also a warning in case you have unplugged it but there is still some charge in it (it might take some seconds to fade out): More information regarding the power input is shown below and available in the datasheet : Input range: 100V-240VAC 50-60Hz, max 0.25A input, 1A Fused, or 277VAC 0.125A, also 50-60Hz Output range: 5V DC, max 2.0A","title":"Smart Citizen Power Supply"},{"location":"Guides/deployments/Using%20the%20power%20supply/#using-the-custom-power-supply","text":"The power supply is very simple to operate. If you have purchased one, normally, everything should be connected and ready to go. In some cases, the AC cable (left screw connector) is not connected, and it can be simply connected through the cable gland into the terminals. No ground is required. When connecting the plug to the wall socket, the red LED should turn on indicating 5V output. The input is protected with a 1A Fuse and the pack should be enclosed in a waterproof enclosure as detailed here . The indication LED shows the Power Supply is active. It is also a warning in case you have unplugged it but there is still some charge in it (it might take some seconds to fade out): More information regarding the power input is shown below and available in the datasheet : Input range: 100V-240VAC 50-60Hz, max 0.25A input, 1A Fused, or 277VAC 0.125A, also 50-60Hz Output range: 5V DC, max 2.0A","title":"Using the custom power supply"},{"location":"Guides/deployments/Water%20sensors/","text":"Water sensors \u00b6 Only if you bought them separately This guide describes the setup procedure of the Atlas Scientific probes in case you bought them separately. If you have a Water Station , you don't need to do this. Setup \u00b6 Manually switching circuits to I2C mode \u00b6 If the drivers are new normally they come configured in UART mode so we need to change them to I2C mode. Remove circuit from Tentacle shield. Put the circuit into a breadboard. For PH , DO , ORP and EC : Short the PGND pin to the TX pin using a jumper wire. For RTD (temperature): Short the PRB pin to the TX pin using a jumper wire. Power the device (connecting GND and VCC ) Wait for LED to change from green to blue (UART\u2192I2C) or from blue to green (I2C\u2192>UART). Remove the jumper wire from the PGND (or PRB respectively) pin to the TX pin (Do this before removing power! ). Remove power ( VCC ). Apply power ( VCC ). The device is now in the new mode (repeat all steps to switch back to previous mode). Official documentation Atlas Doc Connection to Smartcitizen Kit \u00b6 After connecting the Tentacle 3 to the SCK power your kit and if youre connected to the shell the autodetecition message should look similar to this (depending on the connected drivers and probes): Urban board detected Enable Atlas Temperature Enable Atlas PH Enable Atlas Conductivity Enable Atlas Specific gravity ... Sensor calibration Make sure to follow our sensor calibration guide for the water sensors . Raspberry setup \u00b6 Install raspbian Enable I2C with raspi-config, reboot, upgrade. Install packages and reboot. sudo apt-get install python-smbus i2c-tools Connect the shield with the pi off. Test I2C sudo i2cdetect -y 1 Code example https://github.com/AtlasScientific/Raspberry-Pi-sample-code/blob/master/i2c.py","title":"Water sensors"},{"location":"Guides/deployments/Water%20sensors/#water-sensors","text":"Only if you bought them separately This guide describes the setup procedure of the Atlas Scientific probes in case you bought them separately. If you have a Water Station , you don't need to do this.","title":"Water sensors"},{"location":"Guides/deployments/Water%20sensors/#setup","text":"","title":"Setup"},{"location":"Guides/deployments/Water%20sensors/#manually-switching-circuits-to-i2c-mode","text":"If the drivers are new normally they come configured in UART mode so we need to change them to I2C mode. Remove circuit from Tentacle shield. Put the circuit into a breadboard. For PH , DO , ORP and EC : Short the PGND pin to the TX pin using a jumper wire. For RTD (temperature): Short the PRB pin to the TX pin using a jumper wire. Power the device (connecting GND and VCC ) Wait for LED to change from green to blue (UART\u2192I2C) or from blue to green (I2C\u2192>UART). Remove the jumper wire from the PGND (or PRB respectively) pin to the TX pin (Do this before removing power! ). Remove power ( VCC ). Apply power ( VCC ). The device is now in the new mode (repeat all steps to switch back to previous mode). Official documentation Atlas Doc","title":"Manually switching circuits to I2C mode"},{"location":"Guides/deployments/Water%20sensors/#connection-to-smartcitizen-kit","text":"After connecting the Tentacle 3 to the SCK power your kit and if youre connected to the shell the autodetecition message should look similar to this (depending on the connected drivers and probes): Urban board detected Enable Atlas Temperature Enable Atlas PH Enable Atlas Conductivity Enable Atlas Specific gravity ... Sensor calibration Make sure to follow our sensor calibration guide for the water sensors .","title":"Connection to Smartcitizen Kit"},{"location":"Guides/deployments/Water%20sensors/#raspberry-setup","text":"Install raspbian Enable I2C with raspi-config, reboot, upgrade. Install packages and reboot. sudo apt-get install python-smbus i2c-tools Connect the shield with the pi off. Test I2C sudo i2cdetect -y 1 Code example https://github.com/AtlasScientific/Raspberry-Pi-sample-code/blob/master/i2c.py","title":"Raspberry setup"},{"location":"Guides/enclosures/Making%20your%20own%20enclosures/","text":"Making your own enclosures \u00b6 This page compiles instructions on how to make your own enclosures. We normally use digital fabrication techniques that can be found in a Fablab such a 3D printing, laser cut or CNC machines. Have a look at the best option for your possibilities. We also encourage you to modify any of them and contribute it back to the community in the enclosures repository . Where to print/cut? Have a look at in 3D Hubs or look for a Fablab near you ! CNC Enclosure \u00b6 This enclosure is made out of a mix of HDPE, acrylic and 3D printed compontents. All the design files can be find in various formats in the enclosures repository . 3D printing parts \u00b6 Clip The SCK and the PMS5003 are held together by a 3D printed clip. No support is needed for this part. The clip is attached to the base with screws. There are two versions of the clip: One for big batteries that uses an o-ring to hold the battery in place. You can also use a rubber band, but it won't last long under the sun - clip_big_batt.stl One for smaller batteries that uses the PMS5003 cable to hold the battery (valid for default battery of 2000mAh) - clip_wo_oring.stl Cable gland There is a small cable gland (part 1 and 2 )that fits into the HDPE blue base to hold the cable in place. It's split into two, so that the USB head can go through. Foam cover An additional foam cover has been included for high humidity environments. The print settings in SliC3r need to be adapted with: 0.2mm layer height Detect thin walls CNC'ed parts \u00b6 CNC milling of 15mm HDPE sheets for the base (we make it in blue), and 10mm for the top (we make it in white). Base The base is made out of a ouble sided milling on blue HDPE. The holes are for self-tightening screws (such as these ones ). The bottom side has a channel for avoid water dripping into the sensors and break the flow. It also has small machined slots for easier disassembly: An additional cap is added to cover the hole in case no cable is needed. Top cover The top cover is a single sided milling in white HDPE. The part has a stepped milling for letting heat out, without letting water in. Sheet metal \u00b6 This plate is meant for attaching the whole system to a wall or pole, as well as supporting the installation of an external power supply in an IP65 box. The sheet is 1mm stainless steel with laser cutting and bent in two edges 90\u00ba. 3D printed Enclosure \u00b6 This enclosure is meant to be fully 3D printed in PLA in a normal desktop 3D printed machine. This design is not aiming to be the best design in the world, but one that anyone can make and modify such as our contributors . Printing settings \u00b6 We have tested the 3D printed components with both PLA or ABS. Good results are achieved with a normal 0.4mm nozzle and 0.2 layer height. No raft or brim are needed. Components \u00b6 Clip The SCK and the PMS5003 are held together by a 3D printed clip . No support is needed for this part. Base and top covers Base and cover parts . Support is not needed for these part. A gasket can be added to the joint with adhesive foam. You can increase the top's thickness if you need better isolation, or use the foam provided with the SCK's box as an insulator. Also, tin foil is quite a good reflective material and helps with sun radiation. Enlarged cover If you want to have some more space in the cover (eg to put a Solar MPPT and an additional battery in it), you can use the File COVER25.ST L. This cover gives you an additional height of 2,5cm. Locks Flexible locks are also provided for better fixation (2 units per enclosure). No support is needed. Cable gland A small cable gland is also design to help improve waterproofness and fix the USB cable. It can be stored in the pocket next to the opening. A very DIY enclosure \u00b6 Warning Keep in mind that casing is designed for short outdoor deployments. If you want a case for long exhibitions abroad, we will soon have a much more rugged enclosure ready! Also, feel free to explore all our enclosures repository for this and other versions of our hardware. Step by step First, you will need the two 3D printed clips. You can download the STL file and print them easily on any RepRap or similar FDM printer. If you don't know how to find a 3D printer, you can look for your nearest Fab Lab or use 3D Hubs . 1.Use scissors to cut an empty plastic bottle at about 12 cm from the top 2.Use the rubber band to fix it using the bottle cap 3.Place the Kit inside and use the rubber band to hold it 4.You have now a simple enclosure to use your Kit outdoors for short measurement periods!","title":"Making your own enclosures"},{"location":"Guides/enclosures/Making%20your%20own%20enclosures/#making-your-own-enclosures","text":"This page compiles instructions on how to make your own enclosures. We normally use digital fabrication techniques that can be found in a Fablab such a 3D printing, laser cut or CNC machines. Have a look at the best option for your possibilities. We also encourage you to modify any of them and contribute it back to the community in the enclosures repository . Where to print/cut? Have a look at in 3D Hubs or look for a Fablab near you !","title":"Making your own enclosures"},{"location":"Guides/enclosures/Making%20your%20own%20enclosures/#cnc-enclosure","text":"This enclosure is made out of a mix of HDPE, acrylic and 3D printed compontents. All the design files can be find in various formats in the enclosures repository .","title":"CNC Enclosure"},{"location":"Guides/enclosures/Making%20your%20own%20enclosures/#3d-printing-parts","text":"Clip The SCK and the PMS5003 are held together by a 3D printed clip. No support is needed for this part. The clip is attached to the base with screws. There are two versions of the clip: One for big batteries that uses an o-ring to hold the battery in place. You can also use a rubber band, but it won't last long under the sun - clip_big_batt.stl One for smaller batteries that uses the PMS5003 cable to hold the battery (valid for default battery of 2000mAh) - clip_wo_oring.stl Cable gland There is a small cable gland (part 1 and 2 )that fits into the HDPE blue base to hold the cable in place. It's split into two, so that the USB head can go through. Foam cover An additional foam cover has been included for high humidity environments. The print settings in SliC3r need to be adapted with: 0.2mm layer height Detect thin walls","title":"3D printing parts"},{"location":"Guides/enclosures/Making%20your%20own%20enclosures/#cnced-parts","text":"CNC milling of 15mm HDPE sheets for the base (we make it in blue), and 10mm for the top (we make it in white). Base The base is made out of a ouble sided milling on blue HDPE. The holes are for self-tightening screws (such as these ones ). The bottom side has a channel for avoid water dripping into the sensors and break the flow. It also has small machined slots for easier disassembly: An additional cap is added to cover the hole in case no cable is needed. Top cover The top cover is a single sided milling in white HDPE. The part has a stepped milling for letting heat out, without letting water in.","title":"CNC'ed parts"},{"location":"Guides/enclosures/Making%20your%20own%20enclosures/#sheet-metal","text":"This plate is meant for attaching the whole system to a wall or pole, as well as supporting the installation of an external power supply in an IP65 box. The sheet is 1mm stainless steel with laser cutting and bent in two edges 90\u00ba.","title":"Sheet metal"},{"location":"Guides/enclosures/Making%20your%20own%20enclosures/#3d-printed-enclosure","text":"This enclosure is meant to be fully 3D printed in PLA in a normal desktop 3D printed machine. This design is not aiming to be the best design in the world, but one that anyone can make and modify such as our contributors .","title":"3D printed Enclosure"},{"location":"Guides/enclosures/Making%20your%20own%20enclosures/#printing-settings","text":"We have tested the 3D printed components with both PLA or ABS. Good results are achieved with a normal 0.4mm nozzle and 0.2 layer height. No raft or brim are needed.","title":"Printing settings"},{"location":"Guides/enclosures/Making%20your%20own%20enclosures/#components","text":"Clip The SCK and the PMS5003 are held together by a 3D printed clip . No support is needed for this part. Base and top covers Base and cover parts . Support is not needed for these part. A gasket can be added to the joint with adhesive foam. You can increase the top's thickness if you need better isolation, or use the foam provided with the SCK's box as an insulator. Also, tin foil is quite a good reflective material and helps with sun radiation. Enlarged cover If you want to have some more space in the cover (eg to put a Solar MPPT and an additional battery in it), you can use the File COVER25.ST L. This cover gives you an additional height of 2,5cm. Locks Flexible locks are also provided for better fixation (2 units per enclosure). No support is needed. Cable gland A small cable gland is also design to help improve waterproofness and fix the USB cable. It can be stored in the pocket next to the opening.","title":"Components"},{"location":"Guides/enclosures/Making%20your%20own%20enclosures/#a-very-diy-enclosure","text":"Warning Keep in mind that casing is designed for short outdoor deployments. If you want a case for long exhibitions abroad, we will soon have a much more rugged enclosure ready! Also, feel free to explore all our enclosures repository for this and other versions of our hardware. Step by step First, you will need the two 3D printed clips. You can download the STL file and print them easily on any RepRap or similar FDM printer. If you don't know how to find a 3D printer, you can look for your nearest Fab Lab or use 3D Hubs . 1.Use scissors to cut an empty plastic bottle at about 12 cm from the top 2.Use the rubber band to fix it using the bottle cap 3.Place the Kit inside and use the rubber band to hold it 4.You have now a simple enclosure to use your Kit outdoors for short measurement periods!","title":"A very DIY enclosure"},{"location":"Guides/firmware/Debug%20the%20firmware/","text":"Introduction \u00b6 Sometimes (many times actually), our code won't do what we want it to do and we need to take a look at what it's doing. By using a debugger we will be able to see what is going on inside another program while it executes or even crashes. This is fairly straight forward when you code for a modern day computer, since most IDEs have a proper interface integrated for it. However, debugging a chip like the SAMD21 can sometimes be tricky and here is where it's interesting to use a debugging kit. To keep it simple: our final target is to be able to interact with the SAMD21 (or the chip) while it's executing the program and tell it to pause the execution, give us the value of some variables and then continue. We will release a fairly extensive report with documentation on this process, but for those interested in reading an overview on how to debug, this post can be a short introduction. So, here we go! The first item we need is the Open On-Chip Debugger (OpenOCD) which provides debugging with the assistance of a debug adapter . This adapter is a small hardware module which helps provide the right kind of electrical signaling to the target being debugged. These are required since the debug host, on which OpenOCD runs (i.e. your computer, a Raspberry PI...) won\u2019t usually have native support for such signaling, or the connector needed to hook up to the target. These adapters are sometimes packaged as discrete dongles, which may generically be called hardware interface dongles (and are quite expensive). Some development boards also integrate them directly, which may let the development board connect directly to the debug host over USB (and sometimes also to power it over USB, like the Arduino Genuino Zero ). In the case of the Smart Smart Citizen Kit , we have a SWD Adapter that supports Serial Wire Debug signaling to communicate with the ARM core . In our approach, using a complete open toolchain , OpenOCD is be running on a Raspberry Pi, and communicating with the SCK's SWD through the GPIO pins of the Pi. Finally, to be able to actually see what is going on inside our firmware while it executes , we need something that is able to read and understand the machine code and hand it over to a human understandable interface. This is where GDB kicks in and helps us by: Starting our program, specifying anything that might affect its behavior. Make our program stop on specified conditions. Examine what has happened when our program has stopped. Change things in our program, so we can experiment with correcting the effects of one bug and go on to learn about another. GDB and OpenOCD will be running in a Raspberry Pi hooked up to the SWD interface of the SCK, and we will see what's going on in them from our computer's terminal via SSH. Fairly simple , right? Now, we can make some changes to our code, make GDB flash it to the SCK and keep debugging in a completely open toolchain! Debugger setup using a Raspberry Pi \u00b6 First download and copy Raspbian Lite to your SDcard, here are the installation docs . Add wifi configuration Create a file name wpa_supplicant.conf on the /boot partition of the SD card, the content of this file should looks like this: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\"wifi_ssid\" psk=\"wifi_password\" } Replacing wifi_ssid and wifi_password with your actual wifi network information. The wpa_supplicant.conf file will be copied to /etc/wpa_supplicant/ directory automatically once the Raspberry Pi is booted up. Enable SSH server. SSH access is disabled as default for security reasons. To enable the SSH server when Raspberry Pi is booted up for the first time: create a file called ssh with no file extension and no contents, and copy it to the /boot partition on the SD card. Find your raspberry on the network In order to find a raspberry pi over the network we can use commands like these: Linux MY_IP_RANGE=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}') && nmap -sn $MY_IP_RANGE && IP=$(arp -na | grep b8:27:eb | grep -Eo '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}') && ssh $IP; Mac MY_RANGE=$(ip addr | grep \"UP\" -A3 | grep '192' -A0 | awk '{print $2}') && nmap -sn $MY_RANGE && arp -na | grep b8:27:eb SSH login without password: If you have never generated a RSA key: ssh-keygen without passphrase Copy the key to the Raspberry: ssh-copy-id -i ~/.ssh/id_rsa.pub raspi-address Once booted, it will connect to the network. The command above ( MY_IP... ) finds it and logs into it via SSH. Once you are logged to your raspberry pi and connected to the internet, do a system upgrade : sudo apt-get install rpi-update sudo rpi-update sudo apt-get update && sudo apt-get dist-upgrade Install some dependencies : sudo apt-get install git autoconf libtool make pkg-config libusb-1.0-0 libusb-1.0-0-dev telnet sshfs Openocd installation \u00b6 Clone openocd repository and compile: git clone git://git.code.sf.net/p/openocd/code openocd-code cd openocd-code ./bootstrap ./configure --enable-sysfsgpio --enable-bcm2835gpio make sudo make install The list of interfaces that openOCD can use is under: /usr/local/share/openocd/scripts/interface . In order to use the SWD connector that the SCK features, by using Bit Banging , we connect it directly to the Raspberry Pi GPIOs: Running OpenOCD on the raspberry pi \u00b6 Once you are logged into the raspberry Pi you need a openOCD config file to start (ej. sck.cfg ) with this content: source [find interface/raspberrypi2-native.cfg] transport select swd set CHIPNAME at91samd21g18 source [find target/at91samdXX.cfg] adapter_nsrst_delay 100 adapter_nsrst_assert_width 100 init targets reset halt You can store this file in OpenOCD scripts dir so it will auto find it sudo mv sck.cfg /usr/local/share/openocd/scripts/ and then run the OpenOCD server with: sudo openocd -f sck.cfg Then you can connect to OpenOCD, if you want to connect from an external computer, replace 127.0.0.1 with your Raspberry Pi IP address. telnet 127.0.0.1 4444 Example On a arduino zero go to the directory where the *.cfg is and: openocd -f arduino_zero.cfg Open On-Chip Debugger 0.10.0 Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html Info : auto-selecting first available session transport \"swd\". To override use 'transport select <transport>'. none separate adapter speed: 400 kHz cortex_m reset_config sysresetreq Info : CMSIS-DAP: SWD Supported Info : CMSIS-DAP: Interface Initialised (SWD) Info : CMSIS-DAP: FW Version = 02.01.0157 Info : SWCLK/TCK = 1 SWDIO/TMS = 1 TDI = 1 TDO = 1 nTRST = 0 nRESET = 1 Info : CMSIS-DAP: Interface ready Info : clock speed 400 kHz Info : SWD DPIDR 0x0bc11477 Info : at91samd21g18.cpu: hardware has 4 breakpoints, 2 watchpoints Using OpenOCD remotely from other computer \u00b6 We need to give the OpenOCD server access to your project files that are remotely stored. To do this you can mount your working directory remotely on the Raspberry Pi via SSH: ssh pi@raspi_address pi$ mkdir working_dir pi$ sshfs user@computer_address:working_path working_dir pi$ cd working_dir pi$ sudo openocd -f sck.cfg Then you can connect to OpenOCD from your computer with: telnet raspi_address 4444 Uploading Arduino original bootloader \u00b6 Get the bootloader file here and build it. Connect to OpenOCD server and run: reset halt at91samd bootloader 0 at91samd chip-erase program samd21_sam_ba.bin verify at91samd bootloader 8192 reset run If you don't see any error youre done! Uploading SCK Firmware \u00b6 Install platformio, download and build SCK firmware Connect to OpenOCD server and run: reset halt flash write_image firmware.bin 8192 verify_image firmware.bin 8192 reset run reset run GDB \u00b6 General description \u00b6 The purpose of a debugger such as GDB is to allow you to see what is going on \u201cinside\u201d another program while it executes\u2014or what another program was doing at the moment it crashed. GDB can do four main kinds of things (plus other things in support of these) to help you catch bugs in the act: * Start your program, specifying anything that might affect its behavior. * Make your program stop on specified conditions. * Examine what has happened, when your program has stopped. * Change things in your program, so you can experiment with correcting the effects of one bug and go on to learn about another. Debugging session with Raspberry Pi as the OpenOCD server \u00b6 Once your raspberry pi is setup with above instructions you can just do: ssh pi@RaspberryAddress sudo openocd -f sck.cfg & cd /platformio_project/path arm-none-eabi-gdb ./pioenvs/zeroUSB/firmware.elf (gdb) target remote RaspberryAddress:3333 (gdb) monitor reset run If you are using platformio , you need to modify the compiling option to avoid optimisation with -0g message to the compiler. In case you are not using platformio , activate verbose compiling output at Arduino IDE and find your compiled .elf directory. [env:zeroUSB] platform = atmelsam board = zeroUSB framework = arduino build_flags = -Og Now we are all set and ready to go. The debugger is waiting for instructions on the execution, which we detail below. Info Quick handy instructions inside GDB environment 1. (gdb) appears in every line and you don't have to type it each time 2. In case you need to exit GDB, just type in quit , but remember always killing the process before, should you have a target running (gdb) kill (gdb) quit 3. RET repeats the previous command GDB commands \u00b6 All commands in gdb during debugging are detailed in the GDB guide, chapter GDB commands in detail (continue and stepping) An extract of some useful commands are detailed below: Continuing and stepping \u00b6 continue [ignore-count] Resumes program execution until next breakpoint. [ignore-count] argument allows to specify a further number of times to ingore a breakpoint. (gdb) continue Continuing. Breakpoint 1, tick () at src/HOLA.cpp:9 9 void tick() { step count Continues running your program until control reaches a different source line , only availabe for source lines and functions compiled with debugging information. count is optional and states the number of steps to be performed before stopping, if no breakpoint arrives earlier. next [count] Continue to the next source line without going into functions . It has the same functionality as step, but it stays in the same stack frame. count works as in step count . As well, it understands jumps calls as in the end of for loops and return to the beginning of the loop. Info set step-mode on/off sets the behaviour of (gdb) when stepping into a function with no debugging information. In the case of step-mode on , it inspects the first line of code of the function, whereas on step-mode off it skips the function completely. finish Continue running until just after function in the selected stack frame returns . until Has the same behaviour as step , but it ignores the jumps between lines due to loops (for, whiles, etc), continuing to the next source code with incremental line number. Breakpoints \u00b6 info breakpoints Retrieve information about breakpoints (gdb) info breakpoints Num Type Disp Enb ress What 1 breakpoint keep y 0x00002140 in tick() at src/HOLA.cpp:9 breakpoint already hit 15 times break Set a breakpoint in a specific function (gdb) break loop Set a breakpoint in a specific line (344) (gdb) break main.cpp:344 Info Use the tbreak command instead of break if you want to stop the program once, and then remove the breakpoint. More breakpoint condition options can be found here you can find watchpoint Set a watchpoint watchpoint to only stop once a variable has a certain value. (gdb) watch timer Info Type in info watchpoints to get information about watchpoints. commands Set a list of actions related to the breakpoint: break main.cpp:50 commands silent printf \"count is %d\\n\",count cont end delete Delete a breakpoint (gdb) delete 1 (gdb) info breakpoints No breakpoints or watchpoints. Printing / setting variables and more \u00b6 loop Read what is around a certain function (gdb) l loop 25 //while (!Serial) { 26 //; // wait for serial port to connect. Needed for native USB port only 27 //} 28 } 29 30 void loop() { 31 // put your main code here, to run repeatedly: 32 Serial.println(\"HOLA\"); 33 tick(); 34 Serial.println(millis()); print Retrieve value of a specific variable (gdb) print timer $12 = 2 set Set variable to a certain value (gdb) set timer = 0 Target commands (load) \u00b6 load filename offset Load it is meant to make filename (an executable) available for debugging on the remote system\u2014by downloading it. load also records the filename symbol table in GDB, like the add-symbol-file command. The file is loaded at whatever address is specified in the executable, also into flash memory. Making changes in the code \u00b6 Anytime we make a change in the code, we don't need to reload the debugging session. We can easily do so by: Compile the code: a. Define Shell build in Sublime Text and configure a build sytem with: \"shell_cmd\": \"cd .. && pio run\" Then, everytime you hit Ctrl+B (Cmd+B) and you use your custom build system, it will automatically use this option. b. Or hit pio run in another terminal located in your project root directory In gdb, load file. This will reload the file defined at the beginning of your debugging session and upload it to the target (gdb) load Loading section .text, size 0x2e50 lma 0x2000 Loading section .ramfunc, size 0x60 lma 0x4e50 Loading section .data, size 0x110 lma 0x4eb0 Start address 0x2910, load size 12224 Transfer rate: 3 KB/sec, 4074 bytes/write. Keep debugging GDB Console \u00b6 TUI \u00b6 GDB has a console GUI option available with the command line option --tui In the upper frame you can see the code that's being executed. GDB init file \u00b6 From this example dashboard we can generate a custom .gdbinit file for the SCK which will be placed in the HOME directory... (ON GOING) Info Would be interesting to generate a custom option for production validation and one for internal debugging purposes For references about where to locate the .gdbinit and more custom behaviour for gdb in general see here . GDB from Sublime Text \u00b6 Setup Platformio project with sublime Text Setup sublimeGDB Reference \u00b6 General GDB references and examples \u00b6 Debugging with GDB - Book Debugging example from GDB and OpenOCD Arduino zero example Additional notes from Platformio configuration \u00b6 How to set other DEBUG FLAGS About project configuration with Platformio init Check here for building an *.ini file with custom build target for debugging and production.","title":"Debug the firmware"},{"location":"Guides/firmware/Debug%20the%20firmware/#introduction","text":"Sometimes (many times actually), our code won't do what we want it to do and we need to take a look at what it's doing. By using a debugger we will be able to see what is going on inside another program while it executes or even crashes. This is fairly straight forward when you code for a modern day computer, since most IDEs have a proper interface integrated for it. However, debugging a chip like the SAMD21 can sometimes be tricky and here is where it's interesting to use a debugging kit. To keep it simple: our final target is to be able to interact with the SAMD21 (or the chip) while it's executing the program and tell it to pause the execution, give us the value of some variables and then continue. We will release a fairly extensive report with documentation on this process, but for those interested in reading an overview on how to debug, this post can be a short introduction. So, here we go! The first item we need is the Open On-Chip Debugger (OpenOCD) which provides debugging with the assistance of a debug adapter . This adapter is a small hardware module which helps provide the right kind of electrical signaling to the target being debugged. These are required since the debug host, on which OpenOCD runs (i.e. your computer, a Raspberry PI...) won\u2019t usually have native support for such signaling, or the connector needed to hook up to the target. These adapters are sometimes packaged as discrete dongles, which may generically be called hardware interface dongles (and are quite expensive). Some development boards also integrate them directly, which may let the development board connect directly to the debug host over USB (and sometimes also to power it over USB, like the Arduino Genuino Zero ). In the case of the Smart Smart Citizen Kit , we have a SWD Adapter that supports Serial Wire Debug signaling to communicate with the ARM core . In our approach, using a complete open toolchain , OpenOCD is be running on a Raspberry Pi, and communicating with the SCK's SWD through the GPIO pins of the Pi. Finally, to be able to actually see what is going on inside our firmware while it executes , we need something that is able to read and understand the machine code and hand it over to a human understandable interface. This is where GDB kicks in and helps us by: Starting our program, specifying anything that might affect its behavior. Make our program stop on specified conditions. Examine what has happened when our program has stopped. Change things in our program, so we can experiment with correcting the effects of one bug and go on to learn about another. GDB and OpenOCD will be running in a Raspberry Pi hooked up to the SWD interface of the SCK, and we will see what's going on in them from our computer's terminal via SSH. Fairly simple , right? Now, we can make some changes to our code, make GDB flash it to the SCK and keep debugging in a completely open toolchain!","title":"Introduction"},{"location":"Guides/firmware/Debug%20the%20firmware/#debugger-setup-using-a-raspberry-pi","text":"First download and copy Raspbian Lite to your SDcard, here are the installation docs . Add wifi configuration Create a file name wpa_supplicant.conf on the /boot partition of the SD card, the content of this file should looks like this: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\"wifi_ssid\" psk=\"wifi_password\" } Replacing wifi_ssid and wifi_password with your actual wifi network information. The wpa_supplicant.conf file will be copied to /etc/wpa_supplicant/ directory automatically once the Raspberry Pi is booted up. Enable SSH server. SSH access is disabled as default for security reasons. To enable the SSH server when Raspberry Pi is booted up for the first time: create a file called ssh with no file extension and no contents, and copy it to the /boot partition on the SD card. Find your raspberry on the network In order to find a raspberry pi over the network we can use commands like these: Linux MY_IP_RANGE=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}') && nmap -sn $MY_IP_RANGE && IP=$(arp -na | grep b8:27:eb | grep -Eo '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}') && ssh $IP; Mac MY_RANGE=$(ip addr | grep \"UP\" -A3 | grep '192' -A0 | awk '{print $2}') && nmap -sn $MY_RANGE && arp -na | grep b8:27:eb SSH login without password: If you have never generated a RSA key: ssh-keygen without passphrase Copy the key to the Raspberry: ssh-copy-id -i ~/.ssh/id_rsa.pub raspi-address Once booted, it will connect to the network. The command above ( MY_IP... ) finds it and logs into it via SSH. Once you are logged to your raspberry pi and connected to the internet, do a system upgrade : sudo apt-get install rpi-update sudo rpi-update sudo apt-get update && sudo apt-get dist-upgrade Install some dependencies : sudo apt-get install git autoconf libtool make pkg-config libusb-1.0-0 libusb-1.0-0-dev telnet sshfs","title":"Debugger setup using a Raspberry Pi"},{"location":"Guides/firmware/Debug%20the%20firmware/#openocd-installation","text":"Clone openocd repository and compile: git clone git://git.code.sf.net/p/openocd/code openocd-code cd openocd-code ./bootstrap ./configure --enable-sysfsgpio --enable-bcm2835gpio make sudo make install The list of interfaces that openOCD can use is under: /usr/local/share/openocd/scripts/interface . In order to use the SWD connector that the SCK features, by using Bit Banging , we connect it directly to the Raspberry Pi GPIOs:","title":"Openocd installation"},{"location":"Guides/firmware/Debug%20the%20firmware/#running-openocd-on-the-raspberry-pi","text":"Once you are logged into the raspberry Pi you need a openOCD config file to start (ej. sck.cfg ) with this content: source [find interface/raspberrypi2-native.cfg] transport select swd set CHIPNAME at91samd21g18 source [find target/at91samdXX.cfg] adapter_nsrst_delay 100 adapter_nsrst_assert_width 100 init targets reset halt You can store this file in OpenOCD scripts dir so it will auto find it sudo mv sck.cfg /usr/local/share/openocd/scripts/ and then run the OpenOCD server with: sudo openocd -f sck.cfg Then you can connect to OpenOCD, if you want to connect from an external computer, replace 127.0.0.1 with your Raspberry Pi IP address. telnet 127.0.0.1 4444 Example On a arduino zero go to the directory where the *.cfg is and: openocd -f arduino_zero.cfg Open On-Chip Debugger 0.10.0 Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html Info : auto-selecting first available session transport \"swd\". To override use 'transport select <transport>'. none separate adapter speed: 400 kHz cortex_m reset_config sysresetreq Info : CMSIS-DAP: SWD Supported Info : CMSIS-DAP: Interface Initialised (SWD) Info : CMSIS-DAP: FW Version = 02.01.0157 Info : SWCLK/TCK = 1 SWDIO/TMS = 1 TDI = 1 TDO = 1 nTRST = 0 nRESET = 1 Info : CMSIS-DAP: Interface ready Info : clock speed 400 kHz Info : SWD DPIDR 0x0bc11477 Info : at91samd21g18.cpu: hardware has 4 breakpoints, 2 watchpoints","title":"Running OpenOCD on the raspberry pi"},{"location":"Guides/firmware/Debug%20the%20firmware/#using-openocd-remotely-from-other-computer","text":"We need to give the OpenOCD server access to your project files that are remotely stored. To do this you can mount your working directory remotely on the Raspberry Pi via SSH: ssh pi@raspi_address pi$ mkdir working_dir pi$ sshfs user@computer_address:working_path working_dir pi$ cd working_dir pi$ sudo openocd -f sck.cfg Then you can connect to OpenOCD from your computer with: telnet raspi_address 4444","title":"Using OpenOCD remotely from other computer"},{"location":"Guides/firmware/Debug%20the%20firmware/#uploading-arduino-original-bootloader","text":"Get the bootloader file here and build it. Connect to OpenOCD server and run: reset halt at91samd bootloader 0 at91samd chip-erase program samd21_sam_ba.bin verify at91samd bootloader 8192 reset run If you don't see any error youre done!","title":"Uploading Arduino original bootloader"},{"location":"Guides/firmware/Debug%20the%20firmware/#uploading-sck-firmware","text":"Install platformio, download and build SCK firmware Connect to OpenOCD server and run: reset halt flash write_image firmware.bin 8192 verify_image firmware.bin 8192 reset run reset run","title":"Uploading SCK Firmware"},{"location":"Guides/firmware/Debug%20the%20firmware/#gdb","text":"","title":"GDB"},{"location":"Guides/firmware/Debug%20the%20firmware/#general-description","text":"The purpose of a debugger such as GDB is to allow you to see what is going on \u201cinside\u201d another program while it executes\u2014or what another program was doing at the moment it crashed. GDB can do four main kinds of things (plus other things in support of these) to help you catch bugs in the act: * Start your program, specifying anything that might affect its behavior. * Make your program stop on specified conditions. * Examine what has happened, when your program has stopped. * Change things in your program, so you can experiment with correcting the effects of one bug and go on to learn about another.","title":"General description"},{"location":"Guides/firmware/Debug%20the%20firmware/#debugging-session-with-raspberry-pi-as-the-openocd-server","text":"Once your raspberry pi is setup with above instructions you can just do: ssh pi@RaspberryAddress sudo openocd -f sck.cfg & cd /platformio_project/path arm-none-eabi-gdb ./pioenvs/zeroUSB/firmware.elf (gdb) target remote RaspberryAddress:3333 (gdb) monitor reset run If you are using platformio , you need to modify the compiling option to avoid optimisation with -0g message to the compiler. In case you are not using platformio , activate verbose compiling output at Arduino IDE and find your compiled .elf directory. [env:zeroUSB] platform = atmelsam board = zeroUSB framework = arduino build_flags = -Og Now we are all set and ready to go. The debugger is waiting for instructions on the execution, which we detail below. Info Quick handy instructions inside GDB environment 1. (gdb) appears in every line and you don't have to type it each time 2. In case you need to exit GDB, just type in quit , but remember always killing the process before, should you have a target running (gdb) kill (gdb) quit 3. RET repeats the previous command","title":"Debugging session with Raspberry Pi as the OpenOCD server"},{"location":"Guides/firmware/Debug%20the%20firmware/#gdb-commands","text":"All commands in gdb during debugging are detailed in the GDB guide, chapter GDB commands in detail (continue and stepping) An extract of some useful commands are detailed below:","title":"GDB commands"},{"location":"Guides/firmware/Debug%20the%20firmware/#continuing-and-stepping","text":"continue [ignore-count] Resumes program execution until next breakpoint. [ignore-count] argument allows to specify a further number of times to ingore a breakpoint. (gdb) continue Continuing. Breakpoint 1, tick () at src/HOLA.cpp:9 9 void tick() { step count Continues running your program until control reaches a different source line , only availabe for source lines and functions compiled with debugging information. count is optional and states the number of steps to be performed before stopping, if no breakpoint arrives earlier. next [count] Continue to the next source line without going into functions . It has the same functionality as step, but it stays in the same stack frame. count works as in step count . As well, it understands jumps calls as in the end of for loops and return to the beginning of the loop. Info set step-mode on/off sets the behaviour of (gdb) when stepping into a function with no debugging information. In the case of step-mode on , it inspects the first line of code of the function, whereas on step-mode off it skips the function completely. finish Continue running until just after function in the selected stack frame returns . until Has the same behaviour as step , but it ignores the jumps between lines due to loops (for, whiles, etc), continuing to the next source code with incremental line number.","title":"Continuing and stepping"},{"location":"Guides/firmware/Debug%20the%20firmware/#breakpoints","text":"info breakpoints Retrieve information about breakpoints (gdb) info breakpoints Num Type Disp Enb ress What 1 breakpoint keep y 0x00002140 in tick() at src/HOLA.cpp:9 breakpoint already hit 15 times break Set a breakpoint in a specific function (gdb) break loop Set a breakpoint in a specific line (344) (gdb) break main.cpp:344 Info Use the tbreak command instead of break if you want to stop the program once, and then remove the breakpoint. More breakpoint condition options can be found here you can find watchpoint Set a watchpoint watchpoint to only stop once a variable has a certain value. (gdb) watch timer Info Type in info watchpoints to get information about watchpoints. commands Set a list of actions related to the breakpoint: break main.cpp:50 commands silent printf \"count is %d\\n\",count cont end delete Delete a breakpoint (gdb) delete 1 (gdb) info breakpoints No breakpoints or watchpoints.","title":"Breakpoints"},{"location":"Guides/firmware/Debug%20the%20firmware/#printing-setting-variables-and-more","text":"loop Read what is around a certain function (gdb) l loop 25 //while (!Serial) { 26 //; // wait for serial port to connect. Needed for native USB port only 27 //} 28 } 29 30 void loop() { 31 // put your main code here, to run repeatedly: 32 Serial.println(\"HOLA\"); 33 tick(); 34 Serial.println(millis()); print Retrieve value of a specific variable (gdb) print timer $12 = 2 set Set variable to a certain value (gdb) set timer = 0","title":"Printing / setting variables and more"},{"location":"Guides/firmware/Debug%20the%20firmware/#target-commands-load","text":"load filename offset Load it is meant to make filename (an executable) available for debugging on the remote system\u2014by downloading it. load also records the filename symbol table in GDB, like the add-symbol-file command. The file is loaded at whatever address is specified in the executable, also into flash memory.","title":"Target commands (load)"},{"location":"Guides/firmware/Debug%20the%20firmware/#making-changes-in-the-code","text":"Anytime we make a change in the code, we don't need to reload the debugging session. We can easily do so by: Compile the code: a. Define Shell build in Sublime Text and configure a build sytem with: \"shell_cmd\": \"cd .. && pio run\" Then, everytime you hit Ctrl+B (Cmd+B) and you use your custom build system, it will automatically use this option. b. Or hit pio run in another terminal located in your project root directory In gdb, load file. This will reload the file defined at the beginning of your debugging session and upload it to the target (gdb) load Loading section .text, size 0x2e50 lma 0x2000 Loading section .ramfunc, size 0x60 lma 0x4e50 Loading section .data, size 0x110 lma 0x4eb0 Start address 0x2910, load size 12224 Transfer rate: 3 KB/sec, 4074 bytes/write. Keep debugging","title":"Making changes in the code"},{"location":"Guides/firmware/Debug%20the%20firmware/#gdb-console","text":"","title":"GDB Console"},{"location":"Guides/firmware/Debug%20the%20firmware/#tui","text":"GDB has a console GUI option available with the command line option --tui In the upper frame you can see the code that's being executed.","title":"TUI"},{"location":"Guides/firmware/Debug%20the%20firmware/#gdb-init-file","text":"From this example dashboard we can generate a custom .gdbinit file for the SCK which will be placed in the HOME directory... (ON GOING) Info Would be interesting to generate a custom option for production validation and one for internal debugging purposes For references about where to locate the .gdbinit and more custom behaviour for gdb in general see here .","title":"GDB init file"},{"location":"Guides/firmware/Debug%20the%20firmware/#gdb-from-sublime-text","text":"Setup Platformio project with sublime Text Setup sublimeGDB","title":"GDB from Sublime Text"},{"location":"Guides/firmware/Debug%20the%20firmware/#reference","text":"","title":"Reference"},{"location":"Guides/firmware/Debug%20the%20firmware/#general-gdb-references-and-examples","text":"Debugging with GDB - Book Debugging example from GDB and OpenOCD Arduino zero example","title":"General GDB references and examples"},{"location":"Guides/firmware/Debug%20the%20firmware/#additional-notes-from-platformio-configuration","text":"How to set other DEBUG FLAGS About project configuration with Platformio init Check here for building an *.ini file with custom build target for debugging and production.","title":"Additional notes from Platformio configuration"},{"location":"Guides/firmware/Edit%20the%20Firmware/","text":"The data board of your Smart Citizen Kit is has two two microcontrollers : The main one is an Atmel SAMD21 , this chip is in charge of all the normal tasks like reading the sensors, saving data, interacting with the user, etc. For this chip we need two software components the bootloader and the main firmware. For communications the SCK has an ESP8266 microcontroler with Wifi capabilities , this chip receives instructions from the SAMD21 via serial port and takes care of publishing the collected data through the network and takes care of serving the web pages for the setup mode configuration server. Prerequisites \u00b6 Getting the firmware \u00b6 The Smart Citizen Kit Firmware is on our repository on github so you will need git software installed . Danger Do not install anything until reading completely this guide. Specially for Windows users, it can be particularly painful and we don't guarantee everything is going to work. Drop us an email at support if you need help. Building the firmware \u00b6 To build the SmartCitizen Kit firmware you need a computer with platformio installed. You don't need the full IDE installation (Atom or VSCode). You can follow these instructions to install only the console version. See below if you don't have python yet (or you don't know it's ok). Advanced For bootloader upload you also need OpenOCD somewhere in your PATH (more advanced). Windows users If you have Windows, the CLI version is available via PowerShell . An environment variable (PATH) needs to be set to give access to pio.exe . It's given in the Platformio instructions . Installing Python \u00b6 Platformio is written in python , and this guide makes use of a lot of python scripts. You need to have at least python=3.6 installed. If not, follow this guide . This guide will asume you use either python , python3 for running scripts, or pip and pip3 for installing things, we will just detail instructions run by python and packages installed by pip , but you should know what it's installed on your computer. Windows users We recommend: Using PowerShell (with admin rights ) Installing Chocolatey and then proceeding with: choco install python Read very carefully the output of the installation . You can check if you have python installed: > which python /usr/bin/python Windows To do this in Windows , you can check the output of python --version Install pip if you don't have it (check pip before): > curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py > python get-pip.py Installing requirements \u00b6 You can use this requirements file to install everything you need to compile the firmware. Alternatively you can follow the steps below or if you want to control each version: Install pyserial : > pip install pyserial==3.5 Install requests : > pip install requests==2.26.0 Install platformio : > pip install platformio==5.1.1 Versions Versions for these packages are tested to work on OSX and Linux. If you can't find the same version for your platform, try to install something similar to the one provided in order to ensure everything works fine Once this is running, you can do either of the ones below. We will use the generic one throughout the guide: Windows/linux/macOS > cd smartcitizen-kit-21 > python make.py -h linux/macOS > cd smartcitizen-kit-21 > ./make.py -h Getting the firmware \u00b6 To get the firmware just run: > git clone --recursive https://github.com/fablabbcn/smartcitizen-kit-21 The bootloader and tools repositories are submodules of the main firmware so you must do a --recursive clone to get them. Info If you download the code manually (with the clone or download button on github) you will not get the bootloader and tools submodules code. To be able to compile the firmware you need to download the tools submodule and place it in the proper folder. Getting latest changes \u00b6 If you want to update firmware, you can do so since the repository is connected with our Github repository via git . You can do so by: cd smartcitizen-kit-21 git pull ... cd tools git pull origin master ... Or simply: cd smartcitizen-kit-21 git pull --recurse-submodules ... SAMD21 bootloader \u00b6 Make sure you need to do this This instructions only are needed if your kit doesn't have the bootloader already flashed. If you don't know what you are doing here, skip to the flashing section . If your kit doesn't have the bootloader already flashed (all the kits that we ship come with it) you will need an ATMEL-ICE programmer. This process can also be done with a Raspberry Pi computer and the proper connector and cables, in this guide you will find information on how to do this. Connect the Atmel-ICE programmer to the 10 pin SWD connector and to your computer. Power the SCK via USB, you can use any USB charger or even your computer. Open a terminal, go to the folder where you cloned the firmware repository and run: > cd smartcitizen-kit-21 > ./make.py boot You will see a lot of output when compiling, the led on the SCK should breath in green and you should see an output similar to this: You are ready for the next step, just remember to disconnect the Atmel-ICE programmer and connect the SCK to your computer with a USB cable. SAMD21 firmware \u00b6 The bootloader we just flashed allows a very simple way of uploading the SCK firmware based on the UF2 format, when you double-click the reset button of your kit it will expose a MSD interface to your computer and a new drive will popup where you can just drag the compiled firmware file (converted to UF2 format). Build script \u00b6 > python make.py You need to specify at least one action!!! USAGE: build.py [options] action[s] target[s] -p port -f options: -v: verbose -k: keep configuration actions: boot (only for sam), build, flash targets: sam, esp [-p port [-f]] -p port [-f]: specify a port instead of scanning -f: option ignores serial device description (must contain Smartcitizen otherwise) You can use the same script used to flash the bootloader ( make.py ) that will do everything for you: compile the firmware, convert the binary to UF2 format and upload it to the kit: > python make.py build flash sam -v You can make each action separate: Build SAMD21 > python make.py build sam -v Flash SAMD21 > python make.py flash sam -v Both > python make.py build flash sam -v SCK not found In some platforms, the SCK doesn't show up as \"Smartcitizen\" in the USB Device Description. This might make the script to fail and not detect it. This can be bypassed by specifying the port in which the SCK is connected. To find out which port it is, check here . Then, run the command below, where is to be replaced: > python make.py flash sam -p <PORT> -v If this is your first time building the software, platformio will take a while installing all the needed dependencies, be patient. If there are no errors you should see an output similar to this: > python make.py build flash sam [0] Smartcitizen Kit S/N: 6E9FE7335150364852202020FF180E30 Building SAM firmware... OK Flashing SAM firmware... OK A copy of the compiled software in UF2 format called SAM_firmware.uf2 will remain in the bin folder. You can use this file to reflash your kit without compiling it again. Info If you have any problem you can enable verbose output by calling build.py script with the -v flag. There is a known issue that causes first compilation to fail, if this happens please just try again. Manual process \u00b6 If you want to install the firmware manually (or you had some problem with the build script) just follow this steps: > cd sam > pio run After a lot of compilation messages you should see an output similar to this: Indexing .pio/build/sck2/libFrameworkArduino.a Linking .pio/build/sck2/firmware.elf Checking size .pio/build/sck2/firmware.elf Building .pio/build/sck2/firmware.bin Advanced Memory Usage is available via \"PlatformIO Home > Project Inspect\" RAM: [======= ] 73.3% (used 24004 bytes from 32768 bytes) Flash: [======== ] 80.7% (used 211548 bytes from 262144 bytes) ====================== [SUCCESS] Took 43.41 seconds ====================== then to convert the binary firmware to UF2 format do: > cd .. > ./tools/uf2conv.py -o SAM_firmware.uf2 sam/.pio/build/sck2/firmware.bin And you should see something like this: Converting to uf2, output size: 423424, start address: 0x2000 Wrote 423424 bytes to SAM_firmware.uf2. Now double-click the reset button of your kit open your favorite file browser and drag the file you just created to the SCK-2.0 drive. The kit will reset and run the new firmware. Info Keep in mind that if your computer is not configured to automount new drives you will need to mount your sck manually ( as any other USB drive ). ESP8266 firmware \u00b6 Just like the other parts of the process this is also covered by our make.py script. So you can just do: Build ESP > python make.py build esp -v Flash ESP > python make.py flash esp -v Both > python make.py build flash esp -v As before, if this is the first time you do it, it will take a while on downloading dependecies and building the firmware. In this case the upload process is different, since the ESP8266 chip is not connected to the USB interface the data must be uploadded through the SAMD21 chip. Our upload script takes care of searching for a SCK on the USB bus, sending a command to the kit so it put's himself in what we call bridge mode (white led) and uploading the firmware. This is the expected output: > python make.py build flash esp [0] Smartcitizen Kit S/N: 6E9FE7335150364852202020FF180E30 Building ESP firmware... OK Flashing ESP firmware... OK Warning Sometimes the ESP8266 and the uploader software don't get synced and the upload fails. Normally if you try again it will work. After first try you don't need to rebuild, you can just do python make.py flash esp . Manual update \u00b6 You can perform a manual update if you only want or can have a small python installation. Another option is possible if you have platformio and you want to use esptool binaries. Using esptool.py \u00b6 Preparation \u00b6 Get esptool.py : > wget https://raw.githubusercontent.com/fablabbcn/smartcitizen-tools/master/esptool.py Get the latest firmware from https://github.com/fablabbcn/smartcitizen-kit-21/releases or ask us at support Flashing \u00b6 Get your usb-port id (check here ): Put the SAM in bridge mode (replace <PORT> with the portname from above). > echo 'esp -flash 115200' > <PORT> echo not working? You can do the same in the Arduino IDE, using the Serial Monitor and writing esp -flash 115200 . Remember to close the Serial Monitor window after it. Now you should see the SCK's LED in WHITE. Flash the esp using esptool.py from before. Make sure the ESP_firmware.bin is also there (replace <PORT> ): > python esptool.py --port <PORT> --baud 115200 write_flash 0x000000 ESP_firmware.bin Using esptool binaries \u00b6 Locate esptool binaries: > cd smartcitizen-kit-21/sam > pio run -t envdump | grep PROJECT_PACKAGES_DIR ... Find PROJECT_PACKAGES_DIR in the output and navigate to (replace <PROJECT_PACKAGES_DIR> ): > cd <PROJECT_PACKAGES_DIR>/tool-esptool > ls ... There you should find a binary file for esptool . Now you should be able to run (replace <PROJECT_PACKAGES_DIR> and <PORT> ): > cd smartcitizen-kit-21 > echo 'esp -flash 115200' > <PORT> > <PROJECT_PACKAGES_DIR>/tool-esptool/esptool -cp <PORT> -cb 115200 -ca 0x000000 -cf bin/ESP_firmware.bin Remember you can put the SAMD21 in bridge mode (white LED) by using Arduino IDE, sending esp -flash 115200 using the Serial Monitor and then closing the Serial Monitor window. Finding the port \u00b6 For Windows, open the device manager and find the SCK in Ports (COM & LPT) . Use that port (normally COM... ). For macOS and linux, normally /dev/* : macOS > ls /dev/* | grep usb linux > ls /dev/* | grep tty","title":"Edit the firmware"},{"location":"Guides/firmware/Edit%20the%20Firmware/#prerequisites","text":"","title":"Prerequisites"},{"location":"Guides/firmware/Edit%20the%20Firmware/#getting-the-firmware","text":"The Smart Citizen Kit Firmware is on our repository on github so you will need git software installed . Danger Do not install anything until reading completely this guide. Specially for Windows users, it can be particularly painful and we don't guarantee everything is going to work. Drop us an email at support if you need help.","title":"Getting the firmware"},{"location":"Guides/firmware/Edit%20the%20Firmware/#building-the-firmware","text":"To build the SmartCitizen Kit firmware you need a computer with platformio installed. You don't need the full IDE installation (Atom or VSCode). You can follow these instructions to install only the console version. See below if you don't have python yet (or you don't know it's ok). Advanced For bootloader upload you also need OpenOCD somewhere in your PATH (more advanced). Windows users If you have Windows, the CLI version is available via PowerShell . An environment variable (PATH) needs to be set to give access to pio.exe . It's given in the Platformio instructions .","title":"Building the firmware"},{"location":"Guides/firmware/Edit%20the%20Firmware/#installing-python","text":"Platformio is written in python , and this guide makes use of a lot of python scripts. You need to have at least python=3.6 installed. If not, follow this guide . This guide will asume you use either python , python3 for running scripts, or pip and pip3 for installing things, we will just detail instructions run by python and packages installed by pip , but you should know what it's installed on your computer. Windows users We recommend: Using PowerShell (with admin rights ) Installing Chocolatey and then proceeding with: choco install python Read very carefully the output of the installation . You can check if you have python installed: > which python /usr/bin/python Windows To do this in Windows , you can check the output of python --version Install pip if you don't have it (check pip before): > curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py > python get-pip.py","title":"Installing Python"},{"location":"Guides/firmware/Edit%20the%20Firmware/#installing-requirements","text":"You can use this requirements file to install everything you need to compile the firmware. Alternatively you can follow the steps below or if you want to control each version: Install pyserial : > pip install pyserial==3.5 Install requests : > pip install requests==2.26.0 Install platformio : > pip install platformio==5.1.1 Versions Versions for these packages are tested to work on OSX and Linux. If you can't find the same version for your platform, try to install something similar to the one provided in order to ensure everything works fine Once this is running, you can do either of the ones below. We will use the generic one throughout the guide: Windows/linux/macOS > cd smartcitizen-kit-21 > python make.py -h linux/macOS > cd smartcitizen-kit-21 > ./make.py -h","title":"Installing requirements"},{"location":"Guides/firmware/Edit%20the%20Firmware/#getting-the-firmware_1","text":"To get the firmware just run: > git clone --recursive https://github.com/fablabbcn/smartcitizen-kit-21 The bootloader and tools repositories are submodules of the main firmware so you must do a --recursive clone to get them. Info If you download the code manually (with the clone or download button on github) you will not get the bootloader and tools submodules code. To be able to compile the firmware you need to download the tools submodule and place it in the proper folder.","title":"Getting the firmware"},{"location":"Guides/firmware/Edit%20the%20Firmware/#getting-latest-changes","text":"If you want to update firmware, you can do so since the repository is connected with our Github repository via git . You can do so by: cd smartcitizen-kit-21 git pull ... cd tools git pull origin master ... Or simply: cd smartcitizen-kit-21 git pull --recurse-submodules ...","title":"Getting latest changes"},{"location":"Guides/firmware/Edit%20the%20Firmware/#samd21-bootloader","text":"Make sure you need to do this This instructions only are needed if your kit doesn't have the bootloader already flashed. If you don't know what you are doing here, skip to the flashing section . If your kit doesn't have the bootloader already flashed (all the kits that we ship come with it) you will need an ATMEL-ICE programmer. This process can also be done with a Raspberry Pi computer and the proper connector and cables, in this guide you will find information on how to do this. Connect the Atmel-ICE programmer to the 10 pin SWD connector and to your computer. Power the SCK via USB, you can use any USB charger or even your computer. Open a terminal, go to the folder where you cloned the firmware repository and run: > cd smartcitizen-kit-21 > ./make.py boot You will see a lot of output when compiling, the led on the SCK should breath in green and you should see an output similar to this: You are ready for the next step, just remember to disconnect the Atmel-ICE programmer and connect the SCK to your computer with a USB cable.","title":"SAMD21 bootloader"},{"location":"Guides/firmware/Edit%20the%20Firmware/#samd21-firmware","text":"The bootloader we just flashed allows a very simple way of uploading the SCK firmware based on the UF2 format, when you double-click the reset button of your kit it will expose a MSD interface to your computer and a new drive will popup where you can just drag the compiled firmware file (converted to UF2 format).","title":"SAMD21 firmware"},{"location":"Guides/firmware/Edit%20the%20Firmware/#build-script","text":"> python make.py You need to specify at least one action!!! USAGE: build.py [options] action[s] target[s] -p port -f options: -v: verbose -k: keep configuration actions: boot (only for sam), build, flash targets: sam, esp [-p port [-f]] -p port [-f]: specify a port instead of scanning -f: option ignores serial device description (must contain Smartcitizen otherwise) You can use the same script used to flash the bootloader ( make.py ) that will do everything for you: compile the firmware, convert the binary to UF2 format and upload it to the kit: > python make.py build flash sam -v You can make each action separate: Build SAMD21 > python make.py build sam -v Flash SAMD21 > python make.py flash sam -v Both > python make.py build flash sam -v SCK not found In some platforms, the SCK doesn't show up as \"Smartcitizen\" in the USB Device Description. This might make the script to fail and not detect it. This can be bypassed by specifying the port in which the SCK is connected. To find out which port it is, check here . Then, run the command below, where is to be replaced: > python make.py flash sam -p <PORT> -v If this is your first time building the software, platformio will take a while installing all the needed dependencies, be patient. If there are no errors you should see an output similar to this: > python make.py build flash sam [0] Smartcitizen Kit S/N: 6E9FE7335150364852202020FF180E30 Building SAM firmware... OK Flashing SAM firmware... OK A copy of the compiled software in UF2 format called SAM_firmware.uf2 will remain in the bin folder. You can use this file to reflash your kit without compiling it again. Info If you have any problem you can enable verbose output by calling build.py script with the -v flag. There is a known issue that causes first compilation to fail, if this happens please just try again.","title":"Build script"},{"location":"Guides/firmware/Edit%20the%20Firmware/#manual-process","text":"If you want to install the firmware manually (or you had some problem with the build script) just follow this steps: > cd sam > pio run After a lot of compilation messages you should see an output similar to this: Indexing .pio/build/sck2/libFrameworkArduino.a Linking .pio/build/sck2/firmware.elf Checking size .pio/build/sck2/firmware.elf Building .pio/build/sck2/firmware.bin Advanced Memory Usage is available via \"PlatformIO Home > Project Inspect\" RAM: [======= ] 73.3% (used 24004 bytes from 32768 bytes) Flash: [======== ] 80.7% (used 211548 bytes from 262144 bytes) ====================== [SUCCESS] Took 43.41 seconds ====================== then to convert the binary firmware to UF2 format do: > cd .. > ./tools/uf2conv.py -o SAM_firmware.uf2 sam/.pio/build/sck2/firmware.bin And you should see something like this: Converting to uf2, output size: 423424, start address: 0x2000 Wrote 423424 bytes to SAM_firmware.uf2. Now double-click the reset button of your kit open your favorite file browser and drag the file you just created to the SCK-2.0 drive. The kit will reset and run the new firmware. Info Keep in mind that if your computer is not configured to automount new drives you will need to mount your sck manually ( as any other USB drive ).","title":"Manual process"},{"location":"Guides/firmware/Edit%20the%20Firmware/#esp8266-firmware","text":"Just like the other parts of the process this is also covered by our make.py script. So you can just do: Build ESP > python make.py build esp -v Flash ESP > python make.py flash esp -v Both > python make.py build flash esp -v As before, if this is the first time you do it, it will take a while on downloading dependecies and building the firmware. In this case the upload process is different, since the ESP8266 chip is not connected to the USB interface the data must be uploadded through the SAMD21 chip. Our upload script takes care of searching for a SCK on the USB bus, sending a command to the kit so it put's himself in what we call bridge mode (white led) and uploading the firmware. This is the expected output: > python make.py build flash esp [0] Smartcitizen Kit S/N: 6E9FE7335150364852202020FF180E30 Building ESP firmware... OK Flashing ESP firmware... OK Warning Sometimes the ESP8266 and the uploader software don't get synced and the upload fails. Normally if you try again it will work. After first try you don't need to rebuild, you can just do python make.py flash esp .","title":"ESP8266 firmware"},{"location":"Guides/firmware/Edit%20the%20Firmware/#manual-update","text":"You can perform a manual update if you only want or can have a small python installation. Another option is possible if you have platformio and you want to use esptool binaries.","title":"Manual update"},{"location":"Guides/firmware/Edit%20the%20Firmware/#using-esptoolpy","text":"","title":"Using esptool.py"},{"location":"Guides/firmware/Edit%20the%20Firmware/#preparation","text":"Get esptool.py : > wget https://raw.githubusercontent.com/fablabbcn/smartcitizen-tools/master/esptool.py Get the latest firmware from https://github.com/fablabbcn/smartcitizen-kit-21/releases or ask us at support","title":"Preparation"},{"location":"Guides/firmware/Edit%20the%20Firmware/#flashing","text":"Get your usb-port id (check here ): Put the SAM in bridge mode (replace <PORT> with the portname from above). > echo 'esp -flash 115200' > <PORT> echo not working? You can do the same in the Arduino IDE, using the Serial Monitor and writing esp -flash 115200 . Remember to close the Serial Monitor window after it. Now you should see the SCK's LED in WHITE. Flash the esp using esptool.py from before. Make sure the ESP_firmware.bin is also there (replace <PORT> ): > python esptool.py --port <PORT> --baud 115200 write_flash 0x000000 ESP_firmware.bin","title":"Flashing"},{"location":"Guides/firmware/Edit%20the%20Firmware/#using-esptool-binaries","text":"Locate esptool binaries: > cd smartcitizen-kit-21/sam > pio run -t envdump | grep PROJECT_PACKAGES_DIR ... Find PROJECT_PACKAGES_DIR in the output and navigate to (replace <PROJECT_PACKAGES_DIR> ): > cd <PROJECT_PACKAGES_DIR>/tool-esptool > ls ... There you should find a binary file for esptool . Now you should be able to run (replace <PROJECT_PACKAGES_DIR> and <PORT> ): > cd smartcitizen-kit-21 > echo 'esp -flash 115200' > <PORT> > <PROJECT_PACKAGES_DIR>/tool-esptool/esptool -cp <PORT> -cb 115200 -ca 0x000000 -cf bin/ESP_firmware.bin Remember you can put the SAMD21 in bridge mode (white LED) by using Arduino IDE, sending esp -flash 115200 using the Serial Monitor and then closing the Serial Monitor window.","title":"Using esptool binaries"},{"location":"Guides/firmware/Edit%20the%20Firmware/#finding-the-port","text":"For Windows, open the device manager and find the SCK in Ports (COM & LPT) . Use that port (normally COM... ). For macOS and linux, normally /dev/* : macOS > ls /dev/* | grep usb linux > ls /dev/* | grep tty","title":"Finding the port"},{"location":"Guides/firmware/Update%20the%20firmware/","text":"When new features are developed or bugs are fixed we will release new versions of the SCK firmware. Make a back-up of your info \u00b6 Info If you already configured your kit on the smartcitizen platform you will need the token that the platform gave you during the onboarding process , to recover it from your kit: Click your kit button until the kit is in setup mode , the led should be red. Connect to the kit with your mobile device as you did during the onboarding process. Write down the token of your kit. After updating the firmware follow this same steps to input the token and wifi credentials, after this your kit will be publishing on the same registered device than before. A note about versions The guide below applies to both, SCK 2.0 and SCK2.1. Updating the SAM firmware \u00b6 The SAMD21 (SAM for short) chip manages the main part of the firmware. This firmware is frequently updated with latest improvements in the official firmware repository . Check the releases pages for more info. Updating your kit is very simple Connect your kit with a micro USB cable to your computer Double click the reset button of your SCK, the SCK led should turn green and a new drive called SCK-20 should appear on your computer file browser Inside the SCK-20 drive you should see some files, double click the INDEX.HTM file and our github releases page will open in your browser Download the new firmware called SAM_firmware_XXX.uf2 and save it to your computer Tip You can backup your current firmware version just saving the file called CURRENT.UF2 . Simply drag the firmware file you downloaded over the SCK-20 drive , your kit led will blink in green and after some seconds it will reset and start with the new version. Updating the ESP firmware \u00b6 The ESP8266 (ESP for short) chip sometimes also needs upgrade to match the lattest version of the SAM firmware. The ESP chip manages all the communications of the SCK with the outer world. The firmware can be found here . Example If your WiFi module needs a firmware update when you connect to your kit to setup the network you will see a screen that will ask for the new file. You can find it in our github releases page , look for the file called ESP_firmware_XXX.bin . If you don't see it, check in a previous release (some releases don't include Wi-Fi firmware) This file needs to be downloaded to the same device (phone or laptop) that is connecting to the SmartCitizen[...] network. If you are using your phone, you will need to download it there Once you have it, you can select the file in the screen below. If it doesn't appear, check the section to force ESP upload below After the update you just did, you can configure your kit as a new device following the onboarding process or use your previous token as explained before Force ESP upload \u00b6 If you want to force the ESP to upload, please, follow the steps below. Force ESP upload If you already have the latest version but for some reason you still want to upload the firmware, you can force by clicking the info button (top right) on the setup screen that you find when conected to your kit in setup mode: And activate the Force allow firmware update : So you will be asked for the firmware file: Doesn't work? Sometimes in the phone the firmware selection screen will not pop up. You can always try to do the developer-way with check this guide here","title":"Update the firmware"},{"location":"Guides/firmware/Update%20the%20firmware/#make-a-back-up-of-your-info","text":"Info If you already configured your kit on the smartcitizen platform you will need the token that the platform gave you during the onboarding process , to recover it from your kit: Click your kit button until the kit is in setup mode , the led should be red. Connect to the kit with your mobile device as you did during the onboarding process. Write down the token of your kit. After updating the firmware follow this same steps to input the token and wifi credentials, after this your kit will be publishing on the same registered device than before. A note about versions The guide below applies to both, SCK 2.0 and SCK2.1.","title":"Make a back-up of your info"},{"location":"Guides/firmware/Update%20the%20firmware/#updating-the-sam-firmware","text":"The SAMD21 (SAM for short) chip manages the main part of the firmware. This firmware is frequently updated with latest improvements in the official firmware repository . Check the releases pages for more info. Updating your kit is very simple Connect your kit with a micro USB cable to your computer Double click the reset button of your SCK, the SCK led should turn green and a new drive called SCK-20 should appear on your computer file browser Inside the SCK-20 drive you should see some files, double click the INDEX.HTM file and our github releases page will open in your browser Download the new firmware called SAM_firmware_XXX.uf2 and save it to your computer Tip You can backup your current firmware version just saving the file called CURRENT.UF2 . Simply drag the firmware file you downloaded over the SCK-20 drive , your kit led will blink in green and after some seconds it will reset and start with the new version.","title":"Updating the SAM firmware"},{"location":"Guides/firmware/Update%20the%20firmware/#updating-the-esp-firmware","text":"The ESP8266 (ESP for short) chip sometimes also needs upgrade to match the lattest version of the SAM firmware. The ESP chip manages all the communications of the SCK with the outer world. The firmware can be found here . Example If your WiFi module needs a firmware update when you connect to your kit to setup the network you will see a screen that will ask for the new file. You can find it in our github releases page , look for the file called ESP_firmware_XXX.bin . If you don't see it, check in a previous release (some releases don't include Wi-Fi firmware) This file needs to be downloaded to the same device (phone or laptop) that is connecting to the SmartCitizen[...] network. If you are using your phone, you will need to download it there Once you have it, you can select the file in the screen below. If it doesn't appear, check the section to force ESP upload below After the update you just did, you can configure your kit as a new device following the onboarding process or use your previous token as explained before","title":"Updating the ESP firmware"},{"location":"Guides/firmware/Update%20the%20firmware/#force-esp-upload","text":"If you want to force the ESP to upload, please, follow the steps below. Force ESP upload If you already have the latest version but for some reason you still want to upload the firmware, you can force by clicking the info button (top right) on the setup screen that you find when conected to your kit in setup mode: And activate the Force allow firmware update : So you will be asked for the firmware file: Doesn't work? Sometimes in the phone the firmware selection screen will not pop up. You can always try to do the developer-way with check this guide here","title":"Force ESP upload"},{"location":"Guides/getting%20started/Debugging%20your%20sensors/","text":"Debugging your sensors \u00b6 This guide will try to summarize the basic steps to debug your sensors whenever there's any problem. Let's be clear, there is no unique reason or point of failure for the sensors to fail, and very likely, if you use them extensively, something will happen, either after 1 month, 1 year, or 5 years. It is key to know how to debug them: Reset the sensor using the hardware reset button . This is either here: or here: If this doesn't solve the problem, you might want to connect to the sensors using the Shell . The next steps would depend on what the actual problem of your sensor is. The most common problems are: Sensors or hardware issues Connectivity or configuration issues Basic steps Reset the kit Follow this guide Check the FAQs Check the forum Ask support with a nice explanation Sensors or hardware issues \u00b6 As said above, there is no single point of failure for the sensors. If the LED is working normally, but there is one or more sensor that is not responding, connect the Shell and type: version Note this for later. If it's an old version of the firmware, it might help to directly upgrade . sensor This should show if all the sensors are being recognised. If one of them is missing from the list, you can try to check the i2c bus (where most of the sensors are connected): i2c If one of the sensors is not shown, it means that there is probably a hardware issue with the sensor itself and that the microcontroller is not recognising it. Now, it would be useful to look for corrosion signs around the sensors and maybe reflash the firmware in case there is a better detection of the sensors in a firmware update. Otherwise, it is likely that the hardware is no longer functioning and it needs replacement. If the LED is static , very likely there is a problem with the detection or electric behaviour of the sensors. For this, it is useful to start disconnecting each component to understand which component fails: Disconnect the power (USB and battery) and disconnect the PMS5003 sensor. Power again and check Disconnect the power (USB and battery) and disconnect the Urban Board. Power again and check If this doesn't help, try to reflash the firmware , as there might be improvements. If it helps, also update and check if it improves. If the sensors heat up too much, there might be an electric issue. Connectivity or configuration issues \u00b6 Normally, configuration or connectivity issues can be due to the following reasons: - Typo during the setup process - Old firmware If not using the Shell, make sure that the information provided for the network is correct by putting the SCK in SETUP mode (RED LED) and accessing the SmartCitizeXXXX network. If using the Shell, you can check the recording configuration by typing: config If you see a problem with the configuration, you can fix each item or the whole thing by typing: config -mode network -wifi \"SSID\" \"PASS\" -token token Note that the token does not have quotes around it and that the SSID and PASS have straight quoutes. In case there is no problem with the configuration, there problem might get solved by a firmware update.","title":"Debugging your sensors"},{"location":"Guides/getting%20started/Debugging%20your%20sensors/#debugging-your-sensors","text":"This guide will try to summarize the basic steps to debug your sensors whenever there's any problem. Let's be clear, there is no unique reason or point of failure for the sensors to fail, and very likely, if you use them extensively, something will happen, either after 1 month, 1 year, or 5 years. It is key to know how to debug them: Reset the sensor using the hardware reset button . This is either here: or here: If this doesn't solve the problem, you might want to connect to the sensors using the Shell . The next steps would depend on what the actual problem of your sensor is. The most common problems are: Sensors or hardware issues Connectivity or configuration issues Basic steps Reset the kit Follow this guide Check the FAQs Check the forum Ask support with a nice explanation","title":"Debugging your sensors"},{"location":"Guides/getting%20started/Debugging%20your%20sensors/#sensors-or-hardware-issues","text":"As said above, there is no single point of failure for the sensors. If the LED is working normally, but there is one or more sensor that is not responding, connect the Shell and type: version Note this for later. If it's an old version of the firmware, it might help to directly upgrade . sensor This should show if all the sensors are being recognised. If one of them is missing from the list, you can try to check the i2c bus (where most of the sensors are connected): i2c If one of the sensors is not shown, it means that there is probably a hardware issue with the sensor itself and that the microcontroller is not recognising it. Now, it would be useful to look for corrosion signs around the sensors and maybe reflash the firmware in case there is a better detection of the sensors in a firmware update. Otherwise, it is likely that the hardware is no longer functioning and it needs replacement. If the LED is static , very likely there is a problem with the detection or electric behaviour of the sensors. For this, it is useful to start disconnecting each component to understand which component fails: Disconnect the power (USB and battery) and disconnect the PMS5003 sensor. Power again and check Disconnect the power (USB and battery) and disconnect the Urban Board. Power again and check If this doesn't help, try to reflash the firmware , as there might be improvements. If it helps, also update and check if it improves. If the sensors heat up too much, there might be an electric issue.","title":"Sensors or hardware issues"},{"location":"Guides/getting%20started/Debugging%20your%20sensors/#connectivity-or-configuration-issues","text":"Normally, configuration or connectivity issues can be due to the following reasons: - Typo during the setup process - Old firmware If not using the Shell, make sure that the information provided for the network is correct by putting the SCK in SETUP mode (RED LED) and accessing the SmartCitizeXXXX network. If using the Shell, you can check the recording configuration by typing: config If you see a problem with the configuration, you can fix each item or the whole thing by typing: config -mode network -wifi \"SSID\" \"PASS\" -token token Note that the token does not have quotes around it and that the SSID and PASS have straight quoutes. In case there is no problem with the configuration, there problem might get solved by a firmware update.","title":"Connectivity or configuration issues"},{"location":"Guides/getting%20started/Downloading%20the%20Data/","text":"Downloading the Data \u00b6 Once you've added your SCK to the platform and it's capturing and sending data correctly, you can interact with the platform in several ways. Visualizing the data, downloading the data and interacting with the data through the API. Download Data \u00b6 If you are interested in use the data captured by your sensors, you can download all the data for later use. To do this, go to your device page, at the bottom there is a button called DOWNLOAD DATA . You will receive an email with a link to download your data on CSV format in a minute or two. And then: API \u00b6 The Smart Citizen API allows you to request back information from your devices and do incredible things with it. It is a REST API and it returns the information in JSON format. This means you can easily access the information from any language like Javascript, PHP, Processing.org, Python, and start doing things with it quickly. Using scripts \u00b6 Python scripts are provided in the scdata python package repository for downloading devices data in a programatic way. Make sure to check the examples in the git repository. Code examples You can also find some examples on smartcitizen-toolkit respository","title":"Downloading platform data"},{"location":"Guides/getting%20started/Downloading%20the%20Data/#downloading-the-data","text":"Once you've added your SCK to the platform and it's capturing and sending data correctly, you can interact with the platform in several ways. Visualizing the data, downloading the data and interacting with the data through the API.","title":"Downloading the Data"},{"location":"Guides/getting%20started/Downloading%20the%20Data/#download-data","text":"If you are interested in use the data captured by your sensors, you can download all the data for later use. To do this, go to your device page, at the bottom there is a button called DOWNLOAD DATA . You will receive an email with a link to download your data on CSV format in a minute or two. And then:","title":"Download Data"},{"location":"Guides/getting%20started/Downloading%20the%20Data/#api","text":"The Smart Citizen API allows you to request back information from your devices and do incredible things with it. It is a REST API and it returns the information in JSON format. This means you can easily access the information from any language like Javascript, PHP, Processing.org, Python, and start doing things with it quickly.","title":"API"},{"location":"Guides/getting%20started/Downloading%20the%20Data/#using-scripts","text":"Python scripts are provided in the scdata python package repository for downloading devices data in a programatic way. Make sure to check the examples in the git repository. Code examples You can also find some examples on smartcitizen-toolkit respository","title":"Using scripts"},{"location":"Guides/getting%20started/Getting%20firmware%20information/","text":"Getting firmware information \u00b6 There are two ways to get the firmware version: Using the shell Following the steps below: Getting firmware information Set your kit in setup mode by pressing the ON/OFF button Connect to the kit with your mobile device as you did during the installation process. You will need to search for a Wi-Fi network called SmartCitizen[\u00b7\u00b7\u00b7] . If you have multiple kits [\u00b7\u00b7\u00b7] is the unique identifier of your kit. Next, go to http://sck.me on your mobile device and click on the top right corner icon: Here you go! Obtain your firmware version remotely (advanced) If you are an advance user managing a big deployment of devices you can obtain remotely the version of all the Kits you have registered by looking at the hardware_info property of each of your devices using the platform API /v0/devices/ . When your Kit is in Wi-Fi mode, it publishes the information daily. \"hardware_info\": { \"id\": \"DFD098A750515157382E3120FF101D12\", \"mac\": \"B6:E6:2D:66:47:6D\", \"time\": \"2020-04-14T03:00:24Z\", \"esp_bd\": \"\", \"hw_ver\": \"2.1\", \"sam_bd\": \"2019-11-27T12:49:13Z\", \"esp_ver\": \"\", \"sam_ver\": \"0.9.6-4e90c77\" } More info in the platform API documentation .","title":"Getting firmware information"},{"location":"Guides/getting%20started/Getting%20firmware%20information/#getting-firmware-information","text":"There are two ways to get the firmware version: Using the shell Following the steps below: Getting firmware information Set your kit in setup mode by pressing the ON/OFF button Connect to the kit with your mobile device as you did during the installation process. You will need to search for a Wi-Fi network called SmartCitizen[\u00b7\u00b7\u00b7] . If you have multiple kits [\u00b7\u00b7\u00b7] is the unique identifier of your kit. Next, go to http://sck.me on your mobile device and click on the top right corner icon: Here you go! Obtain your firmware version remotely (advanced) If you are an advance user managing a big deployment of devices you can obtain remotely the version of all the Kits you have registered by looking at the hardware_info property of each of your devices using the platform API /v0/devices/ . When your Kit is in Wi-Fi mode, it publishes the information daily. \"hardware_info\": { \"id\": \"DFD098A750515157382E3120FF101D12\", \"mac\": \"B6:E6:2D:66:47:6D\", \"time\": \"2020-04-14T03:00:24Z\", \"esp_bd\": \"\", \"hw_ver\": \"2.1\", \"sam_bd\": \"2019-11-27T12:49:13Z\", \"esp_ver\": \"\", \"sam_ver\": \"0.9.6-4e90c77\" } More info in the platform API documentation .","title":"Getting firmware information"},{"location":"Guides/getting%20started/Onboarding%20Sensors/","text":"Onboarding Sensors \u00b6 The onboarding app guides you through the process of the setup using simple language and a friendly graphic language. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. Onboarding app Visit the onboarding app at start.smartcitizen.me . Before you start make sure you have: A computer to visit the onboarding app A smartphone (or tablet, or another computer) to connect to the kit and configure it The welcome page looks like this. For sensors different from the Smart Citizen Kit 2.1, please check the advanced kit selection : You can then follow the steps by pressing on Let's go! . For experienced users, you can press Skip instructions and go to the Configuration page: After this, make sure that the SCK is in Setup Mode (LED is red) and connect with your smartphone to the SmartCitizen[...] network. Depending on the mode selected (Wi-Fi or SD card), proceed with the steps and make sure the LED changes color: blue for Wi-Fi, purple for SD card. Once this is done, register your kit and add it to your user profile following the steps: You can also mark it's location in the map (this doesn't need to be accurate, it's as accurate as you want it to be): Location of the sensor The sensor location is only defined by the user in the registration process. It can be modified afterwards in the kit edit page . The Smart Citizen Kit does not retrieve location unless it has an onboard GPS. In this case, the GPS location never updates the location in the map . You can also add some tags to your sensor: Finally, add the sensor to your user account (if you don't have one you can register now): What is the email used for? The user account and email is only used for sensor data emails and sensor notifications (i.e. notification when the battery is almost empty). It is not used for commercial purposes at all, as stated in our policy You are done! Visit the Kit on the platform. Wait one minute till it publishes data : When the data is available, scroll down to make some basic explorations: More on the data The platform allows you to check the data in a basic way, but if you want to have a deeper look you can: Download the data in CSV Get it from the API Use python to analyse it Advanced Kit Selection \u00b6 The feature below is for users who want to know how to configure new or customized sensor devices: How to choose a custom kit Click the \ud83d\udee0\ufe0f icon in the bottom right corner Choose the blueprint of the device you want to setup Click save and continue the process as normal","title":"Onboarding Sensors"},{"location":"Guides/getting%20started/Onboarding%20Sensors/#onboarding-sensors","text":"The onboarding app guides you through the process of the setup using simple language and a friendly graphic language. It is built as a separate tool from the core Smart Citizen Webpage in order it can be customized for each deployment. Onboarding app Visit the onboarding app at start.smartcitizen.me . Before you start make sure you have: A computer to visit the onboarding app A smartphone (or tablet, or another computer) to connect to the kit and configure it The welcome page looks like this. For sensors different from the Smart Citizen Kit 2.1, please check the advanced kit selection : You can then follow the steps by pressing on Let's go! . For experienced users, you can press Skip instructions and go to the Configuration page: After this, make sure that the SCK is in Setup Mode (LED is red) and connect with your smartphone to the SmartCitizen[...] network. Depending on the mode selected (Wi-Fi or SD card), proceed with the steps and make sure the LED changes color: blue for Wi-Fi, purple for SD card. Once this is done, register your kit and add it to your user profile following the steps: You can also mark it's location in the map (this doesn't need to be accurate, it's as accurate as you want it to be): Location of the sensor The sensor location is only defined by the user in the registration process. It can be modified afterwards in the kit edit page . The Smart Citizen Kit does not retrieve location unless it has an onboard GPS. In this case, the GPS location never updates the location in the map . You can also add some tags to your sensor: Finally, add the sensor to your user account (if you don't have one you can register now): What is the email used for? The user account and email is only used for sensor data emails and sensor notifications (i.e. notification when the battery is almost empty). It is not used for commercial purposes at all, as stated in our policy You are done! Visit the Kit on the platform. Wait one minute till it publishes data : When the data is available, scroll down to make some basic explorations: More on the data The platform allows you to check the data in a basic way, but if you want to have a deeper look you can: Download the data in CSV Get it from the API Use python to analyse it","title":"Onboarding Sensors"},{"location":"Guides/getting%20started/Onboarding%20Sensors/#advanced-kit-selection","text":"The feature below is for users who want to know how to configure new or customized sensor devices: How to choose a custom kit Click the \ud83d\udee0\ufe0f icon in the bottom right corner Choose the blueprint of the device you want to setup Click save and continue the process as normal","title":"Advanced Kit Selection"},{"location":"Guides/getting%20started/Third%20party%20sensors/","text":"This page reflects examples on how to use and implement compatible third party sensors . What are third party sensors ? By third party sensors, we mean sensors that have been developed by others, with no affiliation to the Smart Citizen Team. This page is a digest and updated version of the Making Sense D2.3 Smart Citizen Toolkit report and Making Sense D.24 Smart Citizen Toolkit report updates . Both these reports reflect information for the SCK 1.5 , which is not a commercially available version of the kit. This guide is an update version for the SCK 2.1. Use of already supported sensors \u00b6 The auxiliary port is designed to expand the sensor board by adding new sensors via the common I2C standard. However other protocols are supported, such as SPI or UART. The pins have the following default configuration: PIN PORT Function 1 SCL I2C (by software: 1-WIRE or other) 2 SDA I2C (by software: 1-WIRE or other) 3 VCC Voltage 4 GND Ground By connecting any of the supported sensors to the SCK, it will automatically be detected and data will be logged into the SD-card. You can check the output of the sensor command in the Serial output : > sensor Enabled ---------- Temperature (60 sec) Humidity (60 sec) Ext Temperature (60 sec) Ext Humidity (60 sec) Battery (60 sec) Light (60 sec) Noise dBA (60 sec) Barometric pressure (60 sec) PM 1.0 (60 sec) PM 2.5 (60 sec) PM 10.0 (60 sec) Publishing data using custom devices \u00b6 The Smart Citizen Platform supports data from any sensor that has a numerical digital output . The Smart Citizen API supports other devices to publish data to the platform by previously agreeing with the Smart Citizen terms and conditions. For each device type, a new device blueprint needs to be created. A device blueprint defines the sensors and the metrics that your devices will have. This will include the hardware details of your sensors and the kind of data that will be published to the platform. Custom calibration formulas to be applied to the data when processed in the platform can be also added. How to do it? Once a device blueprint is added to the platform, any user can create as many devices as needed and publish data to them following the standard Smart Citizen API. It is important to note that Device Blueprint currently cannot be created by users and should be requested by contacting support@smartcitizen.me . The minimal Device Blueprint includes all the necessary data that a user might provide in order to create a Kit . It is composed of Components and those can reuse existing Sensors and Measurements definitions. Sensors define the hardware or software component that records the data. Measurements are descriptions of what sensors are recording. Blueprints can be shared across many devices or can be tailored per device in order to provide dedicated calibration formulas per individual sensor. This is achieved with the Components binding. The following example shows a basic Device Blueprint in JSON. This is the minimum of information that a blueprint needs: { \u201cname\u201d: \u201cThe Frog\u201d, \u201cdescription\u201d: \u201cCustom Arduino Humidity Sensor\u201d, \u201cslug\u201d: \u201cms:0,5\u201d, \u201ccomponents\u201d: [{ \u201cmap\u201d: \u201chum\u201d, \u201cequation\u201d: \u201c(125.0 / 65536.0 * x) + 7\u201d, \u201csensor\u201d: { \u201cname\u201d: \u201cHPP828E031\u201d, \u201cdescription\u201d: \u201cHumidity\u201d, \u201cunit\u201d: \u201c%\u201d, \u201cmeasurement\u201d: { \u201cname\u201d: \u201crelative humidity\u201d, \u201cdescription\u201d: \u201cRelative humidity is a measure...\u201d } } }] } The following examples expand the previous Device Blueprint with the complete data model: { \u201cid\u201d: 10, \u201cuuid\u201d: \u201c056e452d-41c4-436d-a640-2157a278037d\u201d, \u201cslug\u201d: \u201cms:0,5\u201d, \u201cname\u201d: \u201cThe Frog\u201d, \u201cdescription\u201d: \u201cCustom Arduino Humidity Sensor\u201d, \u201ccreated_at\u201d: \u201c2016-06-18T16:25:02Z\u201d, \u201cupdated_at\u201d: \u201c2016-06-18T16:25:02Z\u201d, \u201ccomponents\u201d: [{ \u201cid\u201d: 35, \u201cuuid\u201d: \u201c22da9377-5151-4547-a71b-6fd8958e1330\u201d, \u201cequation\u201d: \u201c(125.0 / 65536.0 * x) + 7\u201d, \u201cmap\u201d: \u201chum\u201d, \u201csensor\u201d: { \u201cid\u201d: 13, \u201cuuid\u201d: \u201c1c19ae8f-b995-460f-87a3-a9d0c140abfb\u201d, \u201cparent_id\u201d: 19, \u201cname\u201d: \u201cHPP828E031\u201d, \u201cdescription\u201d: \u201cHumidity\u201d, \u201cunit\u201d: \u201c%\u201d, \u201ccreated_at\u201d: \u201c2015-02-02T18:24:30Z\u201d, \u201cupdated_at\u201d: \u201c2015-07-05T19:54:54Z\u201d, \u201cmeasurement\u201d: { \u201cid\u201d: 2, \u201cuuid\u201d: \u201c9cbbd396-5bd3-44be-adc0-7ffba778072d\u201d, \u201cname\u201d: \u201crelative humidity\u201d, \u201cdescription\u201d: \u201cRelative humidity is a measure of the amount of moisture in the air relative to the total amount of moisture the air can hold. For instance, if the relative humidity was 50%, then the air is only half saturated with moisture.\u201d } } }] } Too much information? Drop an email to support@smartcitizen.me and we will try to help! Using SEEED Studio Grove bricks You can use off-the-shelf sensors from the extensive Grove open hardware sensor library, removing the need to build our own sensor add-ons from scratch. Foto seeed sensors Implementing other sensors \u00b6 This is a WIP This section is under heavy development. Thanks for your patience! Implementation of other sensors goes through the modification of the Firmware . This is an advanced user feature, and previous programming experience in C++ is necessary. The workflow we normally follow for this goes like: Find out if there is an already existing library for the desired sensor. Good places to look at are Adafruit's repository , Sparkfun's repository or a global Github search Implement this library in the firmware. The library needs certain functions to be valid. (More info soon!) If the device needs to log the data on the platform, you can email us at support@smartcitizen.me with a request for a new device blueprint. However, it is easier to simply log the data in SD-card in this case, if the online recording is not fully mandatory. Contribute it back to the community Make a pull request with your contribution back to the firmware so that other can use it!","title":"Third party sensors"},{"location":"Guides/getting%20started/Third%20party%20sensors/#use-of-already-supported-sensors","text":"The auxiliary port is designed to expand the sensor board by adding new sensors via the common I2C standard. However other protocols are supported, such as SPI or UART. The pins have the following default configuration: PIN PORT Function 1 SCL I2C (by software: 1-WIRE or other) 2 SDA I2C (by software: 1-WIRE or other) 3 VCC Voltage 4 GND Ground By connecting any of the supported sensors to the SCK, it will automatically be detected and data will be logged into the SD-card. You can check the output of the sensor command in the Serial output : > sensor Enabled ---------- Temperature (60 sec) Humidity (60 sec) Ext Temperature (60 sec) Ext Humidity (60 sec) Battery (60 sec) Light (60 sec) Noise dBA (60 sec) Barometric pressure (60 sec) PM 1.0 (60 sec) PM 2.5 (60 sec) PM 10.0 (60 sec)","title":"Use of already supported sensors"},{"location":"Guides/getting%20started/Third%20party%20sensors/#publishing-data-using-custom-devices","text":"The Smart Citizen Platform supports data from any sensor that has a numerical digital output . The Smart Citizen API supports other devices to publish data to the platform by previously agreeing with the Smart Citizen terms and conditions. For each device type, a new device blueprint needs to be created. A device blueprint defines the sensors and the metrics that your devices will have. This will include the hardware details of your sensors and the kind of data that will be published to the platform. Custom calibration formulas to be applied to the data when processed in the platform can be also added. How to do it? Once a device blueprint is added to the platform, any user can create as many devices as needed and publish data to them following the standard Smart Citizen API. It is important to note that Device Blueprint currently cannot be created by users and should be requested by contacting support@smartcitizen.me . The minimal Device Blueprint includes all the necessary data that a user might provide in order to create a Kit . It is composed of Components and those can reuse existing Sensors and Measurements definitions. Sensors define the hardware or software component that records the data. Measurements are descriptions of what sensors are recording. Blueprints can be shared across many devices or can be tailored per device in order to provide dedicated calibration formulas per individual sensor. This is achieved with the Components binding. The following example shows a basic Device Blueprint in JSON. This is the minimum of information that a blueprint needs: { \u201cname\u201d: \u201cThe Frog\u201d, \u201cdescription\u201d: \u201cCustom Arduino Humidity Sensor\u201d, \u201cslug\u201d: \u201cms:0,5\u201d, \u201ccomponents\u201d: [{ \u201cmap\u201d: \u201chum\u201d, \u201cequation\u201d: \u201c(125.0 / 65536.0 * x) + 7\u201d, \u201csensor\u201d: { \u201cname\u201d: \u201cHPP828E031\u201d, \u201cdescription\u201d: \u201cHumidity\u201d, \u201cunit\u201d: \u201c%\u201d, \u201cmeasurement\u201d: { \u201cname\u201d: \u201crelative humidity\u201d, \u201cdescription\u201d: \u201cRelative humidity is a measure...\u201d } } }] } The following examples expand the previous Device Blueprint with the complete data model: { \u201cid\u201d: 10, \u201cuuid\u201d: \u201c056e452d-41c4-436d-a640-2157a278037d\u201d, \u201cslug\u201d: \u201cms:0,5\u201d, \u201cname\u201d: \u201cThe Frog\u201d, \u201cdescription\u201d: \u201cCustom Arduino Humidity Sensor\u201d, \u201ccreated_at\u201d: \u201c2016-06-18T16:25:02Z\u201d, \u201cupdated_at\u201d: \u201c2016-06-18T16:25:02Z\u201d, \u201ccomponents\u201d: [{ \u201cid\u201d: 35, \u201cuuid\u201d: \u201c22da9377-5151-4547-a71b-6fd8958e1330\u201d, \u201cequation\u201d: \u201c(125.0 / 65536.0 * x) + 7\u201d, \u201cmap\u201d: \u201chum\u201d, \u201csensor\u201d: { \u201cid\u201d: 13, \u201cuuid\u201d: \u201c1c19ae8f-b995-460f-87a3-a9d0c140abfb\u201d, \u201cparent_id\u201d: 19, \u201cname\u201d: \u201cHPP828E031\u201d, \u201cdescription\u201d: \u201cHumidity\u201d, \u201cunit\u201d: \u201c%\u201d, \u201ccreated_at\u201d: \u201c2015-02-02T18:24:30Z\u201d, \u201cupdated_at\u201d: \u201c2015-07-05T19:54:54Z\u201d, \u201cmeasurement\u201d: { \u201cid\u201d: 2, \u201cuuid\u201d: \u201c9cbbd396-5bd3-44be-adc0-7ffba778072d\u201d, \u201cname\u201d: \u201crelative humidity\u201d, \u201cdescription\u201d: \u201cRelative humidity is a measure of the amount of moisture in the air relative to the total amount of moisture the air can hold. For instance, if the relative humidity was 50%, then the air is only half saturated with moisture.\u201d } } }] } Too much information? Drop an email to support@smartcitizen.me and we will try to help! Using SEEED Studio Grove bricks You can use off-the-shelf sensors from the extensive Grove open hardware sensor library, removing the need to build our own sensor add-ons from scratch. Foto seeed sensors","title":"Publishing data using custom devices"},{"location":"Guides/getting%20started/Third%20party%20sensors/#implementing-other-sensors","text":"This is a WIP This section is under heavy development. Thanks for your patience! Implementation of other sensors goes through the modification of the Firmware . This is an advanced user feature, and previous programming experience in C++ is necessary. The workflow we normally follow for this goes like: Find out if there is an already existing library for the desired sensor. Good places to look at are Adafruit's repository , Sparkfun's repository or a global Github search Implement this library in the firmware. The library needs certain functions to be valid. (More info soon!) If the device needs to log the data on the platform, you can email us at support@smartcitizen.me with a request for a new device blueprint. However, it is easier to simply log the data in SD-card in this case, if the online recording is not fully mandatory. Contribute it back to the community Make a pull request with your contribution back to the firmware so that other can use it!","title":"Implementing other sensors"},{"location":"Guides/getting%20started/Updating%20the%20Wi-Fi/","text":"Updating the Wi-Fi \u00b6 Info This guide will help you update your sensor Wi-Fi settings as well as other parameters, such as the device token Warning The kit supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. But, it does not support WPA/WPA2 Enterprise networks such as EDUROAM or networks with captive portals such as those found in Airports and Hotels Click your kit button until the kit is in setup mode , the LED should be red. Connect to the kit with your mobile device as you did during the installation process. You will need to search for a Wi-Fi network called SmartCitizen[\u00b7\u00b7\u00b7] . If you have multiple kits [\u00b7\u00b7\u00b7] is the unique identifier of your kit. Once connected you should see the Setup App in your phone . If it doesn't show up automatically you can open http://192.168.1.1 on your phone browser. Info The process also works on laptops, desktops and tablets, connected than can connect to the SmartCitizen[\u00b7\u00b7\u00b7] network. On the app choose start to move to the next page. You will see your device key or token . Do not change it and choose next . Set your new Wi-Fi settings on the next screen as you did during the installation process. The LED will go blue and your kit should start to publish again using the new Wi-Fi . You can confirm it by visiting your device on smartcitizen.me/kits . You can repeat the process as many times as you want by going back to step 1. Info If your Kit is not publishing check the LED status chart to know more about it.","title":"Updating the Wi-Fi"},{"location":"Guides/getting%20started/Updating%20the%20Wi-Fi/#updating-the-wi-fi","text":"Info This guide will help you update your sensor Wi-Fi settings as well as other parameters, such as the device token Warning The kit supports Wi-Fi WEP, WPA/WPA2 and open networks that are common networks in domestic environments and small businesses. But, it does not support WPA/WPA2 Enterprise networks such as EDUROAM or networks with captive portals such as those found in Airports and Hotels Click your kit button until the kit is in setup mode , the LED should be red. Connect to the kit with your mobile device as you did during the installation process. You will need to search for a Wi-Fi network called SmartCitizen[\u00b7\u00b7\u00b7] . If you have multiple kits [\u00b7\u00b7\u00b7] is the unique identifier of your kit. Once connected you should see the Setup App in your phone . If it doesn't show up automatically you can open http://192.168.1.1 on your phone browser. Info The process also works on laptops, desktops and tablets, connected than can connect to the SmartCitizen[\u00b7\u00b7\u00b7] network. On the app choose start to move to the next page. You will see your device key or token . Do not change it and choose next . Set your new Wi-Fi settings on the next screen as you did during the installation process. The LED will go blue and your kit should start to publish again using the new Wi-Fi . You can confirm it by visiting your device on smartcitizen.me/kits . You can repeat the process as many times as you want by going back to step 1. Info If your Kit is not publishing check the LED status chart to know more about it.","title":"Updating the Wi-Fi"},{"location":"Guides/getting%20started/Uploading%20SD%20Card%20Data/","text":"Uploading SD Card Data \u00b6 Here some instructions on how to upload CSV files to Smartcitizen platform. First be sure to be logged and go to your profile . Weird files? Check what they mean here Step by step On your kits' list, click on the wheel and then on \"Upload CSV\". Once on the upload page, you can add some files by clicking on the \"Load CSV files\" button. Select some files as much as you like, to be them ready to upload. Then on the drop-down menu select the \"Upload\" option Click on the \"Apply\" button to upload them Congrats! You just uploaded your files CSV files on the Smartcitizen platform.","title":"Uploading SD-card data"},{"location":"Guides/getting%20started/Uploading%20SD%20Card%20Data/#uploading-sd-card-data","text":"Here some instructions on how to upload CSV files to Smartcitizen platform. First be sure to be logged and go to your profile . Weird files? Check what they mean here Step by step On your kits' list, click on the wheel and then on \"Upload CSV\". Once on the upload page, you can add some files by clicking on the \"Load CSV files\" button. Select some files as much as you like, to be them ready to upload. Then on the drop-down menu select the \"Upload\" option Click on the \"Apply\" button to upload them Congrats! You just uploaded your files CSV files on the Smartcitizen platform.","title":"Uploading SD Card Data"},{"location":"Guides/getting%20started/Using%20the%20Shell/","text":"Using the Shell \u00b6 The SCK (from V2.0 onwards) has an integrated command shell over USB to manage all the kits functionalities for advanced users. In this guide, we will cover how to access to this functionality in different platforms, and some examples. What is it? \u00b6 We could define the shell as a text-based interface to access almost any SCK functionality. In terms of hardware, it relies on the serial communication between the SCK and your computer, so any decent USB cable connected between them will do. How to access it? \u00b6 Software-wise, different platforms will have different interfaces. The easiest and most reliable for all of them would be through the Arduino IDE . Using the Arduino IDE Launch the Arduino IDE and select the port under Tools > Port > : Launch the Serial Monitor under Tools > Serial Monitor . Make sure that the dropdowns in the bottom are set as in the image below ( Carriage return and 115200 baud ) Type in help to get started. More advanced users would probably rather use a more rugged interface. In this case, you could use screen in your terminal of choice: > ls /dev/cu | grep usb cu.usbmodem1411 tty.usbmodem1411 > screen /dev/cu.usmodem1411 SCK > ... If you already installed platformio to edit the firmware you can use it here, too > pio device monitor SCK > ... Be patient! The port will take a little time to appear in your list of devices. Normally the LED of your SCK will be static white during that period. Some examples! \u00b6 The help command outputs a quite intuitive explanation of all the commands: SCK > help reset: Resets the SCK version: Shows versions and Hardware ID rcause: Show last reset cause (debug) outlevel: Shows/sets output level: outlevel [0:silent, 1:normal, 2:verbose] help: Duhhhh!! pinmux: Shows SAMD pin mapping status flash: Shows and manage flash memory state [no-param -> info] [-format (be carefull)] [-dump sect-num (0-2040)] [-sector sect-num] [-recover sect-num/all net/sd] sensor: Shows/sets sensor state or interval: sensor sensor-name [-enable or -disable] [-interval interval(seconds)] [-oled] read: Reads sensor: read [sensorName] control: Control sensor: control [sensorName] [command] monitor: Continously read sensor: monitor [-sd] [-notime] [-noms] [-oled] [sensorName[,sensorNameN]] free: Shows the amount of free RAM memory i2c: Search the I2C bus for devices power: Controls/shows power config: power [-info (extra info)] [-batcap mAh] [-otg on/off] [-charge on/off] [-sleep min (0-disable)] config: Shows/sets configuration: config [-defaults] [-mode sdcard/network] [-pubint seconds] [-readint seconds] [-wifi \"ssid\" [\"pass\"]] [-token token] esp: Controls or shows info from ESP: esp [-on -off -sleep -wake -reboot -flash] netinfo: Shows network information time: Shows/sets date and time: time [epoch time] [-sync] hello: Sends MQTT hello to platform debug: Toggle debug messages: debug [-sdcard] [-esp] [-oled] [-flash] [-telnet] [-speed] shell: Shows or sets shell mode: shell [-on] [-off] publish: Publish custom mqtt message: mqtt [\"topic\" \"message\"] offline: Configure offline periods and WiFi retry interval: [-retryint seconds] [-period start-hour end-hour (UTC 0-23)] mqttsrv: Configure mqtt server address and port: [-host serverName] [-port portNum] ntpsrv: Configure ntp server address and port: [-host serverName] [-port portNum] Shell Mode \u00b6 The SCK outputs a lot of information via serial. This can be sometimes confusing while typing commands. You can silent it a bit with this command: SCK > shell -on Shell mode: on This will turn your LED static yellow , and no output except responses to your commands will be given. Remember to turn it off after you are done experimenting! SCK > shell -off Shell mode: off Set the recording configuration \u00b6 If you want to change your recording mode to, for instance, sdcard mode, you could do so by typing: SCK > config -mode sdcard To set it up in network mode: SCK > config -mode network -wifi \"SSID\" \"PASSWORD\" -token 123456 Warning Note that the token is not between quotes since it's always 6 digits To modify your wifi: SCK > config -wifi \"NEWSSID\" \"NEWPASSWORD\" You can check your current configuration by typing config : SCK > config Mode: sdcard Publish interval: 60 Reading interval: 60 Wifi credentials: not configured Token: not configured Mac address: 11:22:33:44:55:66 Set recording and publication intervals \u00b6 In order to understand the reading and publication intervals, it is important to describe how the structure of the measurements is done: Overall reading interval : base period for the SCK to take a measurement Individual sensor reading interval : period for each sensor to take a measurement. It is defined as N times the Overall reading interval Publication interval : time for the SCK to publish to the Smart Citizen Platform, independent of the reading interval. Each of the sensors can be configured independently, with a reading interval N times the overall reading interval . For instance, after the SAM firmware V0.9.7 , all the sensors are read every 60s except the PMS5003, which is read every 5 minutes or 5 times the reading interval. In the case of the publication interval to the Smart Citizen Platform, the default is 3 minutes. Battery calculator This configuration option is very interesting to be used for battery saving. Make sure you check the battery calculator All this can be configured using the shell interface. For instance, to set the publication interval to every 10 minutes, we could do: config -pubint 600 Or to set the reading interval to every 3 minutes: config -readint 180 Or both at 10 minutes: config -pubint 600 -readint 600 If we want to configure one specific sensor, we can do so by typing the following, only remember, that it's rounded to the closest integer multiplier of the overall reading interval : SCK > sensor temp -interval 360 The sensor read interval is calculated as a multiple of general read interval (180) Changing interval of Temperature to 360 Saved configuration on eeprom!! For instance, if we try to do 1.5 times the reading interval of the temperature sensor, we will get: SCK > sensor temp -interval 240 The sensor read interval is calculated as a multiple of general read interval (180) Changing interval of Temperature to 180 Saved configuration on eeprom!! Some limitations apply though: The minimum reading and publish interval is 5s The maximum reading interval is one hour The maximum publish interval is one hour For more customisation, please email or post on the forum . Default configuration At the moment there is no command to return to the default configuration. You should use: config -pubint 300 -readint 60 ... sensor pm -interval 300 Get version data \u00b6 Check your hardware and firmware version data with the command version : SCK > version Hardware Version: 2.1 SAM Hardware ID: 5934C4B550515157382E3120FF151210 SAM version: 0.9.1-30e1776 SAM build date: 2019-05-07T02:45:29Z ESP MAC address: 86:0D:8E:A7:7F:CC ESP version: not synced ESP build date: not synced List/modify the active sensors \u00b6 By typing in sensor , a list of enabled and supported sensors is displayed: SCK > sensor Disabled ---------- PM board Dallas Temperature [...] Enabled ---------- Temperature (60 sec) Humidity (60 sec) Battery (60 sec) Light (60 sec) Noise dBA (60 sec) Barometric pressure (60 sec) VOC Gas CCS811 (60 sec) eCO2 Gas CCS811 (60 sec) PM 1.0 (60 sec) PM 2.5 (60 sec) PM 10.0 (60 sec) To disable one sensor, you can type in part of the sensor name: SCK > sensor Noise -disable Disabling Noise dBA Saved configuration on eeprom!! To enable it, if it's present: SCK > sensor Noise -enable Enabling Noise dBA Saved configuration on eeprom!! Only if available! If the sensor you are trying to connect is not recognised, the kit will complain: SCK > sensor atlas -enable Failed enabling Atlas Temperature Read/Monitor some sensors \u00b6 If one sensor is enabled, you can read it (once) or monitor it (as fast as the SCK can): SCK > read Noise Noise dBA: 53.85 dBA To monitor one sensor : SCK > monitor light Time Miliseconds Light 2019-07-10T17:58:07Z 6 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 136 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:08Z 98 137 2019-07-10T17:58:08Z 108 137 2019-07-10T17:58:08Z 98 136 ... Or all of them, with no arguments: SCK > monitor Time Miliseconds Battery Light Temperature Humidity Noise dBA Barometric pressure VOC Gas CCS811 eCO2 Gas CCS811 PM 1.0 PM 2.5 PM 10.0 2019-07-11T09:13:04Z 5 37 137 28.75 57.72 1.5 101.29 1.00 408.00 1.5 1.5 1.5 2019-07-11T09:13:07Z 3195 37 138 28.78 57.65 1.5 101.30 1.00 408.00 1.5 1.5 1.5 2019-07-11T09:13:08Z 694 37 136 28.77 57.62 1.5 101.29 1.00 408.00 1.5 1.5 1.5 If you don't need to output the miliseconds column (the time since last reading) or the timestamp , you can do so by: SCK > monitor -noms light Time Light 2019-07-10T17:58:58Z 136 2019-07-10T17:58:58Z 136 2019-07-10T17:58:58Z 137 2019-07-10T17:58:58Z 137 2019-07-10T17:58:59Z 136 ... SCK > monitor -notime light Miliseconds Light 6 137 98 137 98 137 99 137 108 137 ... Warning If your kit has no time configured (the LED should be flashing), the output would look like: SCK > monitor Noise Time Miliseconds Noise dBA 0 1 52.83 0 187 50.36 0 187 52.05 0 187 51.95 0 187 48.28 0 187 48.72 0 187 50.81 ... Something cool to do with the monitor , is to log the sensor output into a file for later analysis. For instance, in your terminal you could do: > echo \"monitor pm light\" > /dev/cu.usbmodem1411 && screen -L /dev/cu.usbmodem1411 Then, if we check the contents of the file (normally something like screenlog.X : monitor light Time Miliseconds Light 2019-07-11T09:10:05Z 6 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 99 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 108 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 108 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 98 141 ... This can be useful in case you want to log data as fast as possible, with little delay between readings (~100ms). Changing mqtt or ntp servers \u00b6 If you want to send data to your own server, or there is a firewall in your network, you can use these two commands to change them: mqttsrv: Configure mqtt server address and port: [-host serverName] [-port portNum] ntpsrv: Configure ntp server address and port: [-host serverName] [-port portNum] Check the mqttsrv : SCK > mqttsrv Mqtt Host: mqtt.smartcitizen.me Mqtt Port: 1883 Check the ntpsrv : SCK > ntpsrv NTP Host: ntp.smartcitizen.me NTP Port: 80 Change mqttsrv host and port : SCK > mqttsrv -host mqtt.greatcity.me -port 80 Mqtt Host: mqtt.greatcity.me Mqtt Port: 80 Accessing the flash memory \u00b6 This is an advanced feature and helps to explore the data stored in the onboard flash memory for debugging purposes. Get a complete map of used sectors in the flash memory: SCK > flash Scanning Flash memory (it can take a while!) 0 > |u38(_/_)|u36(_/_)|u34(_/_)|u35(_/_)|u35(_/_)|u34(_/_)|u34(_/_)|u35(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u37(_/_)|u37(_/_)|u37(_/_)| 32 > |u37(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u36(_/_)| ... Format the flash (will take a long time): flash -format Check a sector (see what's inside): SCK > flash -sector 300 Sector 300 in address 1228800 is: Used Sector 300 fully published to network: true Sector 300 fully published to sd-card: true Net published groups: 37 Net un-published groups: 0 Sd saved groups: 37 Sd not saved groups: 0 Total groups: 37 Freespace: 53 bytes First group: 2021-07-08T09:04:19Z Last group: 2021-07-12T07:34:49Z Recover a sector (send it to the platform or save in sdcard, or both - see help command): flash -recover all net Advanced (but cool) example! \u00b6 Making most of the digital microphone The digital microphone in your SCK uses an FFT algorithm to calculate the final sound pressure level (SPL) in different scales (A, C, Z). The FFT spectrum is also available for user analysis. Let's have a look! First, enable it with: SCK > sensor fft -enable Enabling Noise FFT Then, monitor and log it in a file with: echo \"monitor fft\" > /dev/cu.usbmodem1411 && screen -L /dev/cu.usbmodem1411 In this file, we will have something like: 12 15 19 20 0 ... 12 23 2019-07-11T09:30:01Z 5 null ... The values between the dates are the actual FFT spectrum. We will now clean the lines with the dates and then plot the data. For this, we will use a python code to make things easier. You can download the code here . If we run this code in python3 in the same folder where the screenlog from before is: > python spectrum_example.py We will have two outputs: a csv file with the spectrums in rows, and a png image that looks like this! You can see that we were playing with a tone generator to make some high pitch noises at 10kHz and 20kHz.","title":"Using the Shell"},{"location":"Guides/getting%20started/Using%20the%20Shell/#using-the-shell","text":"The SCK (from V2.0 onwards) has an integrated command shell over USB to manage all the kits functionalities for advanced users. In this guide, we will cover how to access to this functionality in different platforms, and some examples.","title":"Using the Shell"},{"location":"Guides/getting%20started/Using%20the%20Shell/#what-is-it","text":"We could define the shell as a text-based interface to access almost any SCK functionality. In terms of hardware, it relies on the serial communication between the SCK and your computer, so any decent USB cable connected between them will do.","title":"What is it?"},{"location":"Guides/getting%20started/Using%20the%20Shell/#how-to-access-it","text":"Software-wise, different platforms will have different interfaces. The easiest and most reliable for all of them would be through the Arduino IDE . Using the Arduino IDE Launch the Arduino IDE and select the port under Tools > Port > : Launch the Serial Monitor under Tools > Serial Monitor . Make sure that the dropdowns in the bottom are set as in the image below ( Carriage return and 115200 baud ) Type in help to get started. More advanced users would probably rather use a more rugged interface. In this case, you could use screen in your terminal of choice: > ls /dev/cu | grep usb cu.usbmodem1411 tty.usbmodem1411 > screen /dev/cu.usmodem1411 SCK > ... If you already installed platformio to edit the firmware you can use it here, too > pio device monitor SCK > ... Be patient! The port will take a little time to appear in your list of devices. Normally the LED of your SCK will be static white during that period.","title":"How to access it?"},{"location":"Guides/getting%20started/Using%20the%20Shell/#some-examples","text":"The help command outputs a quite intuitive explanation of all the commands: SCK > help reset: Resets the SCK version: Shows versions and Hardware ID rcause: Show last reset cause (debug) outlevel: Shows/sets output level: outlevel [0:silent, 1:normal, 2:verbose] help: Duhhhh!! pinmux: Shows SAMD pin mapping status flash: Shows and manage flash memory state [no-param -> info] [-format (be carefull)] [-dump sect-num (0-2040)] [-sector sect-num] [-recover sect-num/all net/sd] sensor: Shows/sets sensor state or interval: sensor sensor-name [-enable or -disable] [-interval interval(seconds)] [-oled] read: Reads sensor: read [sensorName] control: Control sensor: control [sensorName] [command] monitor: Continously read sensor: monitor [-sd] [-notime] [-noms] [-oled] [sensorName[,sensorNameN]] free: Shows the amount of free RAM memory i2c: Search the I2C bus for devices power: Controls/shows power config: power [-info (extra info)] [-batcap mAh] [-otg on/off] [-charge on/off] [-sleep min (0-disable)] config: Shows/sets configuration: config [-defaults] [-mode sdcard/network] [-pubint seconds] [-readint seconds] [-wifi \"ssid\" [\"pass\"]] [-token token] esp: Controls or shows info from ESP: esp [-on -off -sleep -wake -reboot -flash] netinfo: Shows network information time: Shows/sets date and time: time [epoch time] [-sync] hello: Sends MQTT hello to platform debug: Toggle debug messages: debug [-sdcard] [-esp] [-oled] [-flash] [-telnet] [-speed] shell: Shows or sets shell mode: shell [-on] [-off] publish: Publish custom mqtt message: mqtt [\"topic\" \"message\"] offline: Configure offline periods and WiFi retry interval: [-retryint seconds] [-period start-hour end-hour (UTC 0-23)] mqttsrv: Configure mqtt server address and port: [-host serverName] [-port portNum] ntpsrv: Configure ntp server address and port: [-host serverName] [-port portNum]","title":"Some examples!"},{"location":"Guides/getting%20started/Using%20the%20Shell/#shell-mode","text":"The SCK outputs a lot of information via serial. This can be sometimes confusing while typing commands. You can silent it a bit with this command: SCK > shell -on Shell mode: on This will turn your LED static yellow , and no output except responses to your commands will be given. Remember to turn it off after you are done experimenting! SCK > shell -off Shell mode: off","title":"Shell Mode"},{"location":"Guides/getting%20started/Using%20the%20Shell/#set-the-recording-configuration","text":"If you want to change your recording mode to, for instance, sdcard mode, you could do so by typing: SCK > config -mode sdcard To set it up in network mode: SCK > config -mode network -wifi \"SSID\" \"PASSWORD\" -token 123456 Warning Note that the token is not between quotes since it's always 6 digits To modify your wifi: SCK > config -wifi \"NEWSSID\" \"NEWPASSWORD\" You can check your current configuration by typing config : SCK > config Mode: sdcard Publish interval: 60 Reading interval: 60 Wifi credentials: not configured Token: not configured Mac address: 11:22:33:44:55:66","title":"Set the recording configuration"},{"location":"Guides/getting%20started/Using%20the%20Shell/#set-recording-and-publication-intervals","text":"In order to understand the reading and publication intervals, it is important to describe how the structure of the measurements is done: Overall reading interval : base period for the SCK to take a measurement Individual sensor reading interval : period for each sensor to take a measurement. It is defined as N times the Overall reading interval Publication interval : time for the SCK to publish to the Smart Citizen Platform, independent of the reading interval. Each of the sensors can be configured independently, with a reading interval N times the overall reading interval . For instance, after the SAM firmware V0.9.7 , all the sensors are read every 60s except the PMS5003, which is read every 5 minutes or 5 times the reading interval. In the case of the publication interval to the Smart Citizen Platform, the default is 3 minutes. Battery calculator This configuration option is very interesting to be used for battery saving. Make sure you check the battery calculator All this can be configured using the shell interface. For instance, to set the publication interval to every 10 minutes, we could do: config -pubint 600 Or to set the reading interval to every 3 minutes: config -readint 180 Or both at 10 minutes: config -pubint 600 -readint 600 If we want to configure one specific sensor, we can do so by typing the following, only remember, that it's rounded to the closest integer multiplier of the overall reading interval : SCK > sensor temp -interval 360 The sensor read interval is calculated as a multiple of general read interval (180) Changing interval of Temperature to 360 Saved configuration on eeprom!! For instance, if we try to do 1.5 times the reading interval of the temperature sensor, we will get: SCK > sensor temp -interval 240 The sensor read interval is calculated as a multiple of general read interval (180) Changing interval of Temperature to 180 Saved configuration on eeprom!! Some limitations apply though: The minimum reading and publish interval is 5s The maximum reading interval is one hour The maximum publish interval is one hour For more customisation, please email or post on the forum . Default configuration At the moment there is no command to return to the default configuration. You should use: config -pubint 300 -readint 60 ... sensor pm -interval 300","title":"Set recording and publication intervals"},{"location":"Guides/getting%20started/Using%20the%20Shell/#get-version-data","text":"Check your hardware and firmware version data with the command version : SCK > version Hardware Version: 2.1 SAM Hardware ID: 5934C4B550515157382E3120FF151210 SAM version: 0.9.1-30e1776 SAM build date: 2019-05-07T02:45:29Z ESP MAC address: 86:0D:8E:A7:7F:CC ESP version: not synced ESP build date: not synced","title":"Get version data"},{"location":"Guides/getting%20started/Using%20the%20Shell/#listmodify-the-active-sensors","text":"By typing in sensor , a list of enabled and supported sensors is displayed: SCK > sensor Disabled ---------- PM board Dallas Temperature [...] Enabled ---------- Temperature (60 sec) Humidity (60 sec) Battery (60 sec) Light (60 sec) Noise dBA (60 sec) Barometric pressure (60 sec) VOC Gas CCS811 (60 sec) eCO2 Gas CCS811 (60 sec) PM 1.0 (60 sec) PM 2.5 (60 sec) PM 10.0 (60 sec) To disable one sensor, you can type in part of the sensor name: SCK > sensor Noise -disable Disabling Noise dBA Saved configuration on eeprom!! To enable it, if it's present: SCK > sensor Noise -enable Enabling Noise dBA Saved configuration on eeprom!! Only if available! If the sensor you are trying to connect is not recognised, the kit will complain: SCK > sensor atlas -enable Failed enabling Atlas Temperature","title":"List/modify the active sensors"},{"location":"Guides/getting%20started/Using%20the%20Shell/#readmonitor-some-sensors","text":"If one sensor is enabled, you can read it (once) or monitor it (as fast as the SCK can): SCK > read Noise Noise dBA: 53.85 dBA To monitor one sensor : SCK > monitor light Time Miliseconds Light 2019-07-10T17:58:07Z 6 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 136 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:07Z 108 137 2019-07-10T17:58:07Z 98 137 2019-07-10T17:58:08Z 98 137 2019-07-10T17:58:08Z 108 137 2019-07-10T17:58:08Z 98 136 ... Or all of them, with no arguments: SCK > monitor Time Miliseconds Battery Light Temperature Humidity Noise dBA Barometric pressure VOC Gas CCS811 eCO2 Gas CCS811 PM 1.0 PM 2.5 PM 10.0 2019-07-11T09:13:04Z 5 37 137 28.75 57.72 1.5 101.29 1.00 408.00 1.5 1.5 1.5 2019-07-11T09:13:07Z 3195 37 138 28.78 57.65 1.5 101.30 1.00 408.00 1.5 1.5 1.5 2019-07-11T09:13:08Z 694 37 136 28.77 57.62 1.5 101.29 1.00 408.00 1.5 1.5 1.5 If you don't need to output the miliseconds column (the time since last reading) or the timestamp , you can do so by: SCK > monitor -noms light Time Light 2019-07-10T17:58:58Z 136 2019-07-10T17:58:58Z 136 2019-07-10T17:58:58Z 137 2019-07-10T17:58:58Z 137 2019-07-10T17:58:59Z 136 ... SCK > monitor -notime light Miliseconds Light 6 137 98 137 98 137 99 137 108 137 ... Warning If your kit has no time configured (the LED should be flashing), the output would look like: SCK > monitor Noise Time Miliseconds Noise dBA 0 1 52.83 0 187 50.36 0 187 52.05 0 187 51.95 0 187 48.28 0 187 48.72 0 187 50.81 ... Something cool to do with the monitor , is to log the sensor output into a file for later analysis. For instance, in your terminal you could do: > echo \"monitor pm light\" > /dev/cu.usbmodem1411 && screen -L /dev/cu.usbmodem1411 Then, if we check the contents of the file (normally something like screenlog.X : monitor light Time Miliseconds Light 2019-07-11T09:10:05Z 6 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 99 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 108 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:05Z 98 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 108 141 2019-07-11T09:10:06Z 98 141 2019-07-11T09:10:06Z 98 141 ... This can be useful in case you want to log data as fast as possible, with little delay between readings (~100ms).","title":"Read/Monitor some sensors"},{"location":"Guides/getting%20started/Using%20the%20Shell/#changing-mqtt-or-ntp-servers","text":"If you want to send data to your own server, or there is a firewall in your network, you can use these two commands to change them: mqttsrv: Configure mqtt server address and port: [-host serverName] [-port portNum] ntpsrv: Configure ntp server address and port: [-host serverName] [-port portNum] Check the mqttsrv : SCK > mqttsrv Mqtt Host: mqtt.smartcitizen.me Mqtt Port: 1883 Check the ntpsrv : SCK > ntpsrv NTP Host: ntp.smartcitizen.me NTP Port: 80 Change mqttsrv host and port : SCK > mqttsrv -host mqtt.greatcity.me -port 80 Mqtt Host: mqtt.greatcity.me Mqtt Port: 80","title":"Changing mqtt or ntp servers"},{"location":"Guides/getting%20started/Using%20the%20Shell/#accessing-the-flash-memory","text":"This is an advanced feature and helps to explore the data stored in the onboard flash memory for debugging purposes. Get a complete map of used sectors in the flash memory: SCK > flash Scanning Flash memory (it can take a while!) 0 > |u38(_/_)|u36(_/_)|u34(_/_)|u35(_/_)|u35(_/_)|u34(_/_)|u34(_/_)|u35(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u37(_/_)|u37(_/_)|u37(_/_)| 32 > |u37(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u36(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u37(_/_)|u36(_/_)| ... Format the flash (will take a long time): flash -format Check a sector (see what's inside): SCK > flash -sector 300 Sector 300 in address 1228800 is: Used Sector 300 fully published to network: true Sector 300 fully published to sd-card: true Net published groups: 37 Net un-published groups: 0 Sd saved groups: 37 Sd not saved groups: 0 Total groups: 37 Freespace: 53 bytes First group: 2021-07-08T09:04:19Z Last group: 2021-07-12T07:34:49Z Recover a sector (send it to the platform or save in sdcard, or both - see help command): flash -recover all net","title":"Accessing the flash memory"},{"location":"Guides/getting%20started/Using%20the%20Shell/#advanced-but-cool-example","text":"Making most of the digital microphone The digital microphone in your SCK uses an FFT algorithm to calculate the final sound pressure level (SPL) in different scales (A, C, Z). The FFT spectrum is also available for user analysis. Let's have a look! First, enable it with: SCK > sensor fft -enable Enabling Noise FFT Then, monitor and log it in a file with: echo \"monitor fft\" > /dev/cu.usbmodem1411 && screen -L /dev/cu.usbmodem1411 In this file, we will have something like: 12 15 19 20 0 ... 12 23 2019-07-11T09:30:01Z 5 null ... The values between the dates are the actual FFT spectrum. We will now clean the lines with the dates and then plot the data. For this, we will use a python code to make things easier. You can download the code here . If we run this code in python3 in the same folder where the screenlog from before is: > python spectrum_example.py We will have two outputs: a csv file with the spectrums in rows, and a png image that looks like this! You can see that we were playing with a tone generator to make some high pitch noises at 10kHz and 20kHz.","title":"Advanced (but cool) example!"},{"location":"Guides/replacements/Replacing%20PM%20Sensors/","text":"Replacing the PM Sensors \u00b6 Follow these steps to replace the PM Sensors. This guide assumes you have HDPE enclosure. Step-by-step Open the enclosure Remove power from the sensors (both, USB and battery) Extract the SCK and PM sensors by removing the screws Disconnect the 6-way cable from the PM sensor Extract the PM sensor and replace it with the new one Connect back the 6-way cable and put the sticker from the previous sensor on the PM sensor (this ID is related to the Data Board) Put everything back together. No need to update anything else in the SCK. You are good to go!","title":"Replacing PM Sensors"},{"location":"Guides/replacements/Replacing%20PM%20Sensors/#replacing-the-pm-sensors","text":"Follow these steps to replace the PM Sensors. This guide assumes you have HDPE enclosure. Step-by-step Open the enclosure Remove power from the sensors (both, USB and battery) Extract the SCK and PM sensors by removing the screws Disconnect the 6-way cable from the PM sensor Extract the PM sensor and replace it with the new one Connect back the 6-way cable and put the sticker from the previous sensor on the PM sensor (this ID is related to the Data Board) Put everything back together. No need to update anything else in the SCK. You are good to go!","title":"Replacing the PM Sensors"},{"location":"Use%20cases/","text":"Use cases \u00b6 The Smart Citizen project has had the chance to be part of fantastic projects throughout it's brief history. Ranging from public interventions in urban areas to the development of DIY sensors for agriculture, the team has carried out an enormous efforts to develop a technical platform that supports a wide range of communities on the creation of participatory sensing initiatives. This section is a summary of these projects that might inspire you in future actions. They show the vast amount of possibilities offered by the Smart Citizen tools as key enablers of participatory sensing pilots and experiments. By providing meaningful examples of novel appropriations and uses we seek to inspire communities to conduct their own experiments and, hopefully, even their own custom tools. Check our guides All these projects left us with a great amount of experience and knowledge that we have compiled in this documentation. Find out how to use them in our guides section : Create interfaces for your data Use of third party sensors and adding data from other platforms","title":"Main"},{"location":"Use%20cases/#use-cases","text":"The Smart Citizen project has had the chance to be part of fantastic projects throughout it's brief history. Ranging from public interventions in urban areas to the development of DIY sensors for agriculture, the team has carried out an enormous efforts to develop a technical platform that supports a wide range of communities on the creation of participatory sensing initiatives. This section is a summary of these projects that might inspire you in future actions. They show the vast amount of possibilities offered by the Smart Citizen tools as key enablers of participatory sensing pilots and experiments. By providing meaningful examples of novel appropriations and uses we seek to inspire communities to conduct their own experiments and, hopefully, even their own custom tools. Check our guides All these projects left us with a great amount of experience and knowledge that we have compiled in this documentation. Find out how to use them in our guides section : Create interfaces for your data Use of third party sensors and adding data from other platforms","title":"Use cases"},{"location":"Use%20cases/Citizen%20Sensing%20Toolkit/","text":"Citizen Sensing Toolkit \u00b6 The Citizen Sensing Toolkit was produced as part of the Making Sense project, which draws on nine citizen sensing campaigns in Holland, Kosovo and Spain in 2016 and 2017. Based on that experience we developed a framework and methods and tools for citizen participation in environmental monitoring and action. Their approach is bottom-up and participatory, and we call it \"citizen sensing\". Book Sections \u00b6 Tools \u00b6 Scoping Geographical Mapping *Commons Mapping *Collaboration Pilot Schedule Community Building Onboarding Empathy Timeline Recruitment Planning Community Level Indicators Sensing Strategy Canvas Calibration Targeted Measurements Sensing Sensing Guides Data Journals Operation Manual Open Hardware Awareness Awareness Sheet Data Discussion Sheet Data Dashboard Action Digital Presence Future News Paper Co-creation Assemblies Reflection Questionnaires Pilot Appraisal Graduation Ceremony Legacy Storylines Train The Next Generation Case Studies \u00b6 Amsterdam Gammasense Urban airq Kosovo Pilot 1 Pilot 3 Barcelona Beta pilot Gracia sounds pilot","title":"Citizen Sensing Toolkit"},{"location":"Use%20cases/Citizen%20Sensing%20Toolkit/#citizen-sensing-toolkit","text":"The Citizen Sensing Toolkit was produced as part of the Making Sense project, which draws on nine citizen sensing campaigns in Holland, Kosovo and Spain in 2016 and 2017. Based on that experience we developed a framework and methods and tools for citizen participation in environmental monitoring and action. Their approach is bottom-up and participatory, and we call it \"citizen sensing\".","title":"Citizen Sensing Toolkit"},{"location":"Use%20cases/Citizen%20Sensing%20Toolkit/#book-sections","text":"","title":"Book Sections"},{"location":"Use%20cases/Citizen%20Sensing%20Toolkit/#tools","text":"Scoping Geographical Mapping *Commons Mapping *Collaboration Pilot Schedule Community Building Onboarding Empathy Timeline Recruitment Planning Community Level Indicators Sensing Strategy Canvas Calibration Targeted Measurements Sensing Sensing Guides Data Journals Operation Manual Open Hardware Awareness Awareness Sheet Data Discussion Sheet Data Dashboard Action Digital Presence Future News Paper Co-creation Assemblies Reflection Questionnaires Pilot Appraisal Graduation Ceremony Legacy Storylines Train The Next Generation","title":"Tools"},{"location":"Use%20cases/Citizen%20Sensing%20Toolkit/#case-studies","text":"Amsterdam Gammasense Urban airq Kosovo Pilot 1 Pilot 3 Barcelona Beta pilot Gracia sounds pilot","title":"Case Studies"},{"location":"Use%20cases/Education/","text":"Smart Citizen and Education \u00b6 School project in Barcelona? You can have a look here to borrow sensors and SCKs for a period of time with pedagogical guide included. Here there is a compilation of projects that we have done around education, directly or indirectly with other partners: Image credit: DOIT DOIT Toolkit - Measuring our environment (EN)- Future Learning Unit at Fablab Barcelona DOIT Toolkit - Midiendo nuestro entorno (ES)- Future Learning Unit at Fablab Barcelona Atenci\u00f3 Project - Citizen Science empowerment for students Smart Citizen User Guide Bibliolab Science and Healthy City Image credit: DOIT","title":"Education"},{"location":"Use%20cases/Education/#smart-citizen-and-education","text":"School project in Barcelona? You can have a look here to borrow sensors and SCKs for a period of time with pedagogical guide included. Here there is a compilation of projects that we have done around education, directly or indirectly with other partners: Image credit: DOIT DOIT Toolkit - Measuring our environment (EN)- Future Learning Unit at Fablab Barcelona DOIT Toolkit - Midiendo nuestro entorno (ES)- Future Learning Unit at Fablab Barcelona Atenci\u00f3 Project - Citizen Science empowerment for students Smart Citizen User Guide Bibliolab Science and Healthy City Image credit: DOIT","title":"Smart Citizen and Education"},{"location":"Use%20cases/Friends/","text":"Friend projects \u00b6 Below there's a list of similar projects in either philosophy, sensors and ideas: Luftdaten - now sensor.community Purpleair hackAIR VAQUUMS Fiduceo School project in Barcelona? You can have a look here to borrow sensors and SCKs for a period of time with pedagogical guide included.","title":"Friend projects"},{"location":"Use%20cases/Friends/#friend-projects","text":"Below there's a list of similar projects in either philosophy, sensors and ideas: Luftdaten - now sensor.community Purpleair hackAIR VAQUUMS Fiduceo School project in Barcelona? You can have a look here to borrow sensors and SCKs for a period of time with pedagogical guide included.","title":"Friend projects"},{"location":"Use%20cases/Presentations/","text":"GROW Workshop Material - Lisbon, Portual 2019 iScape Summer School - Hasselt, Belgium 2019","title":"Additional material"},{"location":"Use%20cases/Research/","text":"This is a live compilation of our participation and results in some research projects we are/have been involved with: European Commission \u00b6 Making Sense : advances and experiments in participatory sensing. (Grant agreement N\u00ba: 688620) . Making Sense explored how open source software, open source hardware, digital maker practices and open design can be effectively used by local communities to fabricate their own sensing tools, make sense of their environments and address pressing environmental problems in air, water, soil and sound pollution. iScape : Improving the Smart Control of Air Pollution in Europe (Grant agreement N\u00ba: 689954) . iScape works on integrating and advancing the control of air quality and carbon emissions in European cities in the context of climate change through the development of sustainable and passive air pollution remediation strategies, policy interventions and behavioural change initiatives. GROW Observatory : (Grant agreement N\u00ba: 690199) . A citizens' observatory for growers, researchers and decision makers, aiming to build better soil through Citizen Science. Documents and results \u00b6 Making Sense Citizen Sensing A Toolkit book Making Sense D.23 Smart Citizen Toolkit report Making Sense D.24 Smart Citizen Toolkit report updates iScape Results (iScape site) iScape Results (cordis site) ISCAPE D7.8 Sensor monitoring experiences and technological innovations More projects \u00b6 Although not H2020 projects, the projects below have allowed us to further our connections with scientific research institutions, and have contributed to the development of the Smart Citizen project. We are proud to have worked with: Institut Salud Global - iSGlobal : climate shelters project CSIC - UTM - ICM : Pati Cientific Project University of Bologna : Almabike project Fraunhofer institute : https://gis-iq.esri.de/fraunhofer-institut-iao-digital-labor-bad-duerrheim/ Academic publications \u00b6 Find below some of our own publications, or others' that have used the Smart Citizen hardware and software. Special Issue on Open tools for environmental monitoring: Hardware X - 2019 A citizen science approach for enhancing public understanding of air pollution Citizen Sensing: A Toolkit Onboarding Communities to the IoT Laboratory evaluation of particle size-selectivity of optical low-cost particulate matter sensors : study lead by the Finnish Meteorological Institute , as part of the iScape project Mentions \u00b6 The influence of the vegetation cycle on the mitigation of air pollution by a deciduous roadside hedge - Thor-Bj\u00f8rn Ottosen, Prashant Kumar : study lead by the University of Surrey , as part of the iScape project Evaluation of low-cost sensors for quantitative personal exposure monitoring - Sachit Mahajan, PrashantKumar : study lead by the University of Surrey , as part of the iScape project How to get the best from low-cost particulate matter sensors: guidelines and practical recommendations : study lead by the University of Bologna , published as part of the Special Issue for Sensors for Particulate Matter and Air pollution","title":"Research Projects"},{"location":"Use%20cases/Research/#european-commission","text":"Making Sense : advances and experiments in participatory sensing. (Grant agreement N\u00ba: 688620) . Making Sense explored how open source software, open source hardware, digital maker practices and open design can be effectively used by local communities to fabricate their own sensing tools, make sense of their environments and address pressing environmental problems in air, water, soil and sound pollution. iScape : Improving the Smart Control of Air Pollution in Europe (Grant agreement N\u00ba: 689954) . iScape works on integrating and advancing the control of air quality and carbon emissions in European cities in the context of climate change through the development of sustainable and passive air pollution remediation strategies, policy interventions and behavioural change initiatives. GROW Observatory : (Grant agreement N\u00ba: 690199) . A citizens' observatory for growers, researchers and decision makers, aiming to build better soil through Citizen Science.","title":"European Commission"},{"location":"Use%20cases/Research/#documents-and-results","text":"Making Sense Citizen Sensing A Toolkit book Making Sense D.23 Smart Citizen Toolkit report Making Sense D.24 Smart Citizen Toolkit report updates iScape Results (iScape site) iScape Results (cordis site) ISCAPE D7.8 Sensor monitoring experiences and technological innovations","title":"Documents and results"},{"location":"Use%20cases/Research/#more-projects","text":"Although not H2020 projects, the projects below have allowed us to further our connections with scientific research institutions, and have contributed to the development of the Smart Citizen project. We are proud to have worked with: Institut Salud Global - iSGlobal : climate shelters project CSIC - UTM - ICM : Pati Cientific Project University of Bologna : Almabike project Fraunhofer institute : https://gis-iq.esri.de/fraunhofer-institut-iao-digital-labor-bad-duerrheim/","title":"More projects"},{"location":"Use%20cases/Research/#academic-publications","text":"Find below some of our own publications, or others' that have used the Smart Citizen hardware and software. Special Issue on Open tools for environmental monitoring: Hardware X - 2019 A citizen science approach for enhancing public understanding of air pollution Citizen Sensing: A Toolkit Onboarding Communities to the IoT Laboratory evaluation of particle size-selectivity of optical low-cost particulate matter sensors : study lead by the Finnish Meteorological Institute , as part of the iScape project","title":"Academic publications"},{"location":"Use%20cases/Research/#mentions","text":"The influence of the vegetation cycle on the mitigation of air pollution by a deciduous roadside hedge - Thor-Bj\u00f8rn Ottosen, Prashant Kumar : study lead by the University of Surrey , as part of the iScape project Evaluation of low-cost sensors for quantitative personal exposure monitoring - Sachit Mahajan, PrashantKumar : study lead by the University of Surrey , as part of the iScape project How to get the best from low-cost particulate matter sensors: guidelines and practical recommendations : study lead by the University of Bologna , published as part of the Special Issue for Sensors for Particulate Matter and Air pollution","title":"Mentions"},{"location":"assets/notes/electrochemical%20sensors%20methods/","text":"Sensor Calibration \u00b6 The model described in the following section is based on the findings of [^1]. This study uses alphasense's 3-electrode sensors, and here it is further extended to the case of 4-electrode sensors, taking into account the auxiliary electrode. Baseline correction based on temperature \u00b6 The mentioned work described the correction method based on temperature using a baseline correction algorithm which is described in [^2]. This is summarised below: For each day of gas working electrode readings, and for each point in the time series (i), the minimum value of the working electrode value that is contained within the interval (i- \\delta \\delta < i < i+ \\delta \\delta ) is determined, where \\delta \\delta is an interval ranging from 0 to a day length. The outcome of this procedure is an array where each column is a vector of minimum working electrode values calculated for each \\delta_i \\delta_i value (this is, from now on, baseline_{\\delta_i} baseline_{\\delta_i} ). The correlation between each baseline_{\\delta_i} baseline_{\\delta_i} and the temperature is calculated. Relative humidity is not considered in this study since it's generaly inversely correlated with the temperature. The correlation coefficients for each correlation ( R^2_{\\delta_i} R^2_{\\delta_i} ) are calculated. The maximum R^2 R^2 whith this array is obtained. For the equation at which the maximum R^2_{\\delta_i} R^2_{\\delta_i} is found, the temperature reading is used to calculate the corrected baseline. The corrected baseline is substracted from the actual working electrode reading The final pollutant concentration is calculated based on the corrected working electrode reading and the manufacturer's data. The readings are treated in a day-to-day basis in order to avoid non-stationary temperature trends over several days, but still to account for temperature variations within each day. Finally, a background pollutant concentration is assumed from [^3] which is also summarised below for each pollutant. This background concentration is added to the final result. Background concentrations . Source [^3] Application on 4-electrode sensors \u00b6 This algorithm can be used to correct temperature effects on the working electrode based on the temperature in 4-electrode sensors. The results are discussed below for tests validation campaigns performed within the iScape project. These tests are summarized below: University of Bologna : data collected from 23/January to 13/February. The measured pollutants with reference equipments were CO, NO 2 , NO, NOx and O3. Two prototype Smart Citizen Stations were deployed in two different sites, with two Smart Citizen Kits. University College Dublin : data collected from 27/March to 17/April. The measured pollutants with reference equipments were NO, NO 2 and NOX. One prototype Smart Citizen Station was deployed with two Smart Citizen Kits. The results found with this methodology in the reduction sensors (NO 2 , O3) are significant in a daily basis. Two examples of the variation of the correlation coefficient with respect to the delta used to calculate the baseline are shown below: The algorithm is set to apply the best performing correlation function from either a linear or an exponential fit, basing this decission on the one that yields better correlation coefficient. NO 2 and O3 at high concentrations yield better results with an exponential fit, whilst lower concentrations reflect a linear trend: Furthermore, the study from which this methodology is drawn from states that oxidation sensors do not yield a proper baseline correlation methodology and so is validated. The result is indeed far better correlated with the reference measurement if using the manufacturer's methodology: This methodology reads as follows: Concentration \\ [ppm] = {I_{WE}-n(I_{AE}) \\ [nA] \\over Sensitivity \\ [nA/ ppm]} Concentration \\ [ppm] = {I_{WE}-n(I_{AE}) \\ [nA] \\over Sensitivity \\ [nA/ ppm]} Where: I_{WE} (nA) = K (nA/mV) V_{WE} (mV) I_{WE} (nA) = K (nA/mV) V_{WE} (mV) I_{AE} (nA) = K (nA/mV) V_{AE} (mV) I_{AE} (nA) = K (nA/mV) V_{AE} (mV) Where: * I_{PCBWE} I_{PCBWE} and I_{PCBAE} I_{PCBAE} are the electronic offsets for each electrode * n = {I_{0WE} \\over I_{0AE}} n = {I_{0WE} \\over I_{0AE}} , the ratio between alphasense's zero currents * k is a constant convertion factor ( ~ 6.36 in the case of the SCK Gas Pro Board electronics) In the case of NO 2 , the results provided by this baseline correction algorithm yield better results: Both, CO and NO 2 pollutants, using the best method for each calculation, are shown below: Finally, a comparison between the reference measurement results from both methods is detailed below: Manufacturer Method Baseline Method Pollutant RMSE / R2 RMSE / R2 CO (ppm) 0.2-0.3 / 0.3-0.5 >2 / <0.01 NO 2 (ppb) 21-24 / 0.3-0.5 6 - 12 / 0.4 - 0.6 O3 (ppb) 20-40 / 0.1-0.3 4-9 / 0.1 - 0.3 As seen above, the NO 2 correlation with both methods yields significant results for non-corrected signals, whilst the RMSE values are higher in the case of the manufacturer's proposal. Therefore, for this pollutant, the selected methodology will be the baseline method. On the contrary, the CO measurements are highly uncorrelated with the baseline method, whilst the original manufacturer's proposal yields decent results. Finally, the O3 correlation levels are lower than the CO and NO 2 measurements. This is possibly due to the O3 reference measurement equipment used in the Bologna campaing, since it shows an inverse relationship with NO 2 which suggests a biased pollutant calculation in the reference equipment: As well, the results from UCD that are used as a reference for NO 2 , suggest a poor zero/span calibration of the equipment as it yields negative results that could spoil the NO 2 correlation/model errors from those tests: Baseline correction based on auxiliary electrode \u00b6 As seen above, the results from applying this methodology to a low concentration, urban environment measurement with 4-electrode sensors yield significantly correlated results in the case of the reductive sensors. It was also seen that oxidation measurements are significantly correlated with the reference measurements while using the manufacturer's suggested method. However, as detailed in the following section, the use of the auxiliary electrode as the source of the correction yields better results due to: The auxiliary electrode is accounting for both, temperature and absolute humidity. The latter could be discarded if the relative humidity is not considered. Since data is treated in a day to day basis, variations of mean temperatures during different days could provoke significant correlations to be found at different timelapses. This provokes gaps in the prediction during night hours that are reduced by the use of the auxiliary electrode. Finally, it is preferrably to use data contained in a single sensor (such as the auxiliary electrode for the EC sensor) rather than including additional sensors in the algorithm. A comparison between the results using this proposed method and the reference measurement from both test campaigns is seen below: Manufacturer Method Baseline Method With Temperature Baseline Method With Auxiliary Electrode Pollutant RMSE / R2 RMSE / R2 RMSE / R2 CO (ppm) 0.2-0.3 / 0.3-0.5 >2 / <0.1 >2 / <0.01 NO 2 (ppb) 21-24 / 0.3-0.5 6-12/0.1-0.4 6 - 12 / 0.4 - 0.6 O3 (ppb) 20-40 / 0.1-0.3 4-12 / <0.2 4-9 / 0.1 - 0.3","title":"Electrochemical sensors methods"},{"location":"assets/notes/electrochemical%20sensors%20methods/#sensor-calibration","text":"The model described in the following section is based on the findings of [^1]. This study uses alphasense's 3-electrode sensors, and here it is further extended to the case of 4-electrode sensors, taking into account the auxiliary electrode.","title":"Sensor Calibration"},{"location":"assets/notes/electrochemical%20sensors%20methods/#baseline-correction-based-on-temperature","text":"The mentioned work described the correction method based on temperature using a baseline correction algorithm which is described in [^2]. This is summarised below: For each day of gas working electrode readings, and for each point in the time series (i), the minimum value of the working electrode value that is contained within the interval (i- \\delta \\delta < i < i+ \\delta \\delta ) is determined, where \\delta \\delta is an interval ranging from 0 to a day length. The outcome of this procedure is an array where each column is a vector of minimum working electrode values calculated for each \\delta_i \\delta_i value (this is, from now on, baseline_{\\delta_i} baseline_{\\delta_i} ). The correlation between each baseline_{\\delta_i} baseline_{\\delta_i} and the temperature is calculated. Relative humidity is not considered in this study since it's generaly inversely correlated with the temperature. The correlation coefficients for each correlation ( R^2_{\\delta_i} R^2_{\\delta_i} ) are calculated. The maximum R^2 R^2 whith this array is obtained. For the equation at which the maximum R^2_{\\delta_i} R^2_{\\delta_i} is found, the temperature reading is used to calculate the corrected baseline. The corrected baseline is substracted from the actual working electrode reading The final pollutant concentration is calculated based on the corrected working electrode reading and the manufacturer's data. The readings are treated in a day-to-day basis in order to avoid non-stationary temperature trends over several days, but still to account for temperature variations within each day. Finally, a background pollutant concentration is assumed from [^3] which is also summarised below for each pollutant. This background concentration is added to the final result. Background concentrations . Source [^3]","title":"Baseline correction based on temperature"},{"location":"assets/notes/electrochemical%20sensors%20methods/#application-on-4-electrode-sensors","text":"This algorithm can be used to correct temperature effects on the working electrode based on the temperature in 4-electrode sensors. The results are discussed below for tests validation campaigns performed within the iScape project. These tests are summarized below: University of Bologna : data collected from 23/January to 13/February. The measured pollutants with reference equipments were CO, NO 2 , NO, NOx and O3. Two prototype Smart Citizen Stations were deployed in two different sites, with two Smart Citizen Kits. University College Dublin : data collected from 27/March to 17/April. The measured pollutants with reference equipments were NO, NO 2 and NOX. One prototype Smart Citizen Station was deployed with two Smart Citizen Kits. The results found with this methodology in the reduction sensors (NO 2 , O3) are significant in a daily basis. Two examples of the variation of the correlation coefficient with respect to the delta used to calculate the baseline are shown below: The algorithm is set to apply the best performing correlation function from either a linear or an exponential fit, basing this decission on the one that yields better correlation coefficient. NO 2 and O3 at high concentrations yield better results with an exponential fit, whilst lower concentrations reflect a linear trend: Furthermore, the study from which this methodology is drawn from states that oxidation sensors do not yield a proper baseline correlation methodology and so is validated. The result is indeed far better correlated with the reference measurement if using the manufacturer's methodology: This methodology reads as follows: Concentration \\ [ppm] = {I_{WE}-n(I_{AE}) \\ [nA] \\over Sensitivity \\ [nA/ ppm]} Concentration \\ [ppm] = {I_{WE}-n(I_{AE}) \\ [nA] \\over Sensitivity \\ [nA/ ppm]} Where: I_{WE} (nA) = K (nA/mV) V_{WE} (mV) I_{WE} (nA) = K (nA/mV) V_{WE} (mV) I_{AE} (nA) = K (nA/mV) V_{AE} (mV) I_{AE} (nA) = K (nA/mV) V_{AE} (mV) Where: * I_{PCBWE} I_{PCBWE} and I_{PCBAE} I_{PCBAE} are the electronic offsets for each electrode * n = {I_{0WE} \\over I_{0AE}} n = {I_{0WE} \\over I_{0AE}} , the ratio between alphasense's zero currents * k is a constant convertion factor ( ~ 6.36 in the case of the SCK Gas Pro Board electronics) In the case of NO 2 , the results provided by this baseline correction algorithm yield better results: Both, CO and NO 2 pollutants, using the best method for each calculation, are shown below: Finally, a comparison between the reference measurement results from both methods is detailed below: Manufacturer Method Baseline Method Pollutant RMSE / R2 RMSE / R2 CO (ppm) 0.2-0.3 / 0.3-0.5 >2 / <0.01 NO 2 (ppb) 21-24 / 0.3-0.5 6 - 12 / 0.4 - 0.6 O3 (ppb) 20-40 / 0.1-0.3 4-9 / 0.1 - 0.3 As seen above, the NO 2 correlation with both methods yields significant results for non-corrected signals, whilst the RMSE values are higher in the case of the manufacturer's proposal. Therefore, for this pollutant, the selected methodology will be the baseline method. On the contrary, the CO measurements are highly uncorrelated with the baseline method, whilst the original manufacturer's proposal yields decent results. Finally, the O3 correlation levels are lower than the CO and NO 2 measurements. This is possibly due to the O3 reference measurement equipment used in the Bologna campaing, since it shows an inverse relationship with NO 2 which suggests a biased pollutant calculation in the reference equipment: As well, the results from UCD that are used as a reference for NO 2 , suggest a poor zero/span calibration of the equipment as it yields negative results that could spoil the NO 2 correlation/model errors from those tests:","title":"Application on 4-electrode sensors"},{"location":"assets/notes/electrochemical%20sensors%20methods/#baseline-correction-based-on-auxiliary-electrode","text":"As seen above, the results from applying this methodology to a low concentration, urban environment measurement with 4-electrode sensors yield significantly correlated results in the case of the reductive sensors. It was also seen that oxidation measurements are significantly correlated with the reference measurements while using the manufacturer's suggested method. However, as detailed in the following section, the use of the auxiliary electrode as the source of the correction yields better results due to: The auxiliary electrode is accounting for both, temperature and absolute humidity. The latter could be discarded if the relative humidity is not considered. Since data is treated in a day to day basis, variations of mean temperatures during different days could provoke significant correlations to be found at different timelapses. This provokes gaps in the prediction during night hours that are reduced by the use of the auxiliary electrode. Finally, it is preferrably to use data contained in a single sensor (such as the auxiliary electrode for the EC sensor) rather than including additional sensors in the algorithm. A comparison between the results using this proposed method and the reference measurement from both test campaigns is seen below: Manufacturer Method Baseline Method With Temperature Baseline Method With Auxiliary Electrode Pollutant RMSE / R2 RMSE / R2 RMSE / R2 CO (ppm) 0.2-0.3 / 0.3-0.5 >2 / <0.1 >2 / <0.01 NO 2 (ppb) 21-24 / 0.3-0.5 6-12/0.1-0.4 6 - 12 / 0.4 - 0.6 O3 (ppb) 20-40 / 0.1-0.3 4-12 / <0.2 4-9 / 0.1 - 0.3","title":"Baseline correction based on auxiliary electrode"},{"location":"assets/notes/sensor-evaluation-campaign-notes/","text":"Sensor Evaluation Campaign \u00b6 Prior to sensor deployment for the intervention monitoring, some of the Living Lab Stations will be evaluated and compared against reference measurement under different conditions. They will be deployed in several cities among the iScape partners in order to 1. develop models for sensor calibration under different climatic and pollutant exposure conditions and 2. assess data quality. This campaign intends to evaluate the Living Lab Station before it's deployment, and trying to prevent concerns raised about data quality that other low-cost sensor platforms 2 3 4 . This evaluation will focus on the real-world conditions calibration , under wide range of exposure and climatic conditions, rather than developing tests in controlled conditions, as prior studies show discrepancies in the accuracy resulting from evaluation in laboratory conditions, versus that of outdoor conditions 2 5 6 . The tests will be conducted by co-location of at least two stations per site with high-end sensors under the conditions indicated in the test section below. The duration of the tests will be of 2,5 months, with two location changes. This is a compromise between the indications given in 1 for at least 3-months campaign and the availability of high-end sensors for the evaluation. Nevertheless, this campaign intends to cover a range of conditions by the deployment of the Living Lab Station in diverse conditions, not only climatic but also exposure-wise. The location changes will also intend to evaluate how well the sensors are able to adapt to these exposure and climatic changes 10 . The data will be uploaded to the SmartCitizen Platform and will be analysed using the Sensor Analysis Framework . The results of this evaluation in terms of models will be uploaded to a dedicated repository and will be implemented on the SmartCitizen Platform for on-the-fly sensor data processing. This processing aims to provide an open platform for sensor analysis using data analysis techniques, need which has been highlighted by 2 5 6 9 . As well, as stated in 2 10 11 , it is necessary to perform individual field calibration for low-cost sensors if measurements comparable to those of high-end solutions are targeted. However, this calibration might not always be feasible in a wide range of conditions, leading to non-generalised models which can perform badly out of the training datasets. This test campaign also aims to study this concern, with an evaluation for a cross calibration methodology, in which results from a limited subset of observations are applied to the complete dataset 7 . If successful, this would be set ground for the development of calibration strategies where the sensors are co-located with a high-end sensor and posteriorly deployed for citizen-science activities, or long term monitoring of the iScape Living Labs interventions, where high end sensors might not be available. This co-location could be performed in a recurrent manner, performing sequences of calibration-deployment-calibration, using merging calibrations as suggested in 11 . As a summary, this field campaign aims to cover the following points: Assess data quality levels and positioning with respect to the DQO set by the European Air Quality Directive Stablish match scores for the different range of sensors available in the Living Lab Station Validation and assessment of EC sensor methodology for NO2 and O3 compounds in urban conditions (urban background and traffic) in various sites Validation of PMS PM raw data accuracy and effect of climatic conditions Calibration of Alphasense\u2019s EC sensors and PMS PM sensors for model quality improvement accounting for climatic conditions Feasibility assessment for the calibration of metal oxide sensor models with the use of reference data and/or Living Lab station data Validation of climatic sensors of the station itself (temperature, humidity, pressure) Drifts and stability: Drifts and possible root causes for EC sensor sensitivities variations over time Calibration stability for SGX MOS sensors Sensor decay and recoverability of PMS sensors due to dust accumulation or others Test \u00b6 The table below shows a description of the proposed test campaign: Stage Duration Exposure Reference equipment Purpose Pre-test 2 weeks Urban Background No Stabilise electrochemical sensors to urban background on site. and verify overall functioning Low Exposure test 1 month Urban Background Yes Evaluate response in low transient areas and evaluate repeatability of urban background measurements in higher exposure testing phases High Exposure test 1 month Urban with traffic (canyon or junction) Yes Evaluate response in high transient / high concentration areas and validate current model and post-processing approach. Propose further models with more variables The sites at which these calibration deployments are planned are: Site Season Reference equipment Duration Bologna (Italy) Summer YES 1 month Guildford (England) Autumn YES 2.5 months Dublin (Ireland) Autumn YES 2.5 months Bottrop (Germany) Autumn YES 2.5 months Barcelona (Spain) Spring YES >3 months Sensor Installation \u00b6 Guidelines for representativeness of the results are given below: Height Between 2,5 and 3,5m. Not reachable by hand. Reference equipment position Within <2m and with similar exposure, air flow (both either on wall, or lamppost) 7 Desirable measurements Chemical compounds (higher priority above): NO2 CO, O3 NOx, NO NMHC Particulate Matter (higher priority above) PM 2.5 PM 1.0, PM 10 Climatic conditions (higher priority above) Temperature and relative humidity Wind speed and direction Important Guidelines Please, refer to the sensor considerations section for general information about the sensors. As well, take into account the following: Avoid direct exposure to intense sunlight for long periods of time, since this can severely affect the measurements (direct sun or intense transients). Avoid locations where high temperature or humidity transients are present since the sensor response is affected by these rapid changes. Avoid locations with low air flow or with direct exposure to air conditioning exhausts. References \u00b6 Spinelle L., Aleixandre M., Gerboles M. - 2013: Protocol of Evaluation and Calibration of Low-cost Gas Sensors for the Monitoring of Air Pollution. Joint Research Centre (Report EUR 26112 EN) \u21a9 Nuria Castell, Franck R. Dauge, Philipp Schneider, Matthias Vogt, Uri Lerner, Barak Fishbain, David Broday, Alena Bartonova - 2018: Can commercial low-cost sensor platforms contribute to air quality monitoring and exposure estimates? \u21a9 \u21a9 \u21a9 \u21a9 Snyder E., Watkins T., Solomon P., Thoma E.,Williams R., Hagler G., Shelow D., Hindin D., Kilaru V., Preuss P. - 2013: The changing paradigm of air pollution monitoring. Environ. Sci. Technol. 47, 11369\u201311377 \u21a9 Lewis A., Edwards P. - 2016: Validate personal air-pollution sensors \u21a9 Spinelle L., Gerboles M., Villani M.G., Aleixandre M., Bonavitacola F. - 2015: Field calibration of a cluster of low-cost available sensors for air quality monitoring: Part A: Ozone and nitrogen dioxide \u21a9 \u21a9 Spinelle L., Gerboles M., Villani M.G., Aleixandre M., Bonavitacola F. - 2015: Field calibration of a cluster of low-cost available sensors for air quality monitoring: Part B: NO, CO and CO2 \u21a9 \u21a9 David H. Hagan, Gabriel Isaacman-VanWertz, Jonathan P. Franklin, Lisa M. M. Wallace, Benjamin D. Kocar, Colette L. Heald, Jesse H. Kroll - 2018: Calibration and assessment of electrochemical air quality sensors by co-location with regulatory-grade instruments \u21a9 \u21a9 Olalekan A.M.Popoola, Gregor B.Stewart, Mohammed I.Mead, Roderic L.Jones - 2016: Development of a baseline-temperature correction methodology forelectrochemical sensors and its implications for long-term stability \u21a9 Sun L., ChunWong K., Wei P., Ye S., Huang H., Yang F.,Westerdahl D., Louie P.K.K., Luk C.W.Y., Ning Z. - 2016. Development and application of a next generation air sensor network for the Hong Kong Marathon 2015. Air quality monitoring. Sensors 16, 211\u2013229 \u21a9 A. Ripoll , M. Viana, M. Padrosa, X. Querol, A.Minutolo, K.M. Houc, J.M. Barcelo-Ordinas, J. Garcia-Vidal - 2018: Testing the performance of sensors for ozone pollution monitoring in a citizen science approach \u21a9 \u21a9 Philip J. D. Peterson, Amrita Aujla, Kirsty H. Grant, Alex G. Brundle, Martin R. Thompson, Josh Vande Hey and Roland J. Leigh - 2017: Practical Use of Metal Oxide Semiconductor Gas Sensors for Measuring Nitrogen Dioxide and Ozone in Urban Environments, Sensors 2017, 17, 1653 \u21a9 \u21a9","title":"Sensor evaluation campaign notes"},{"location":"assets/notes/sensor-evaluation-campaign-notes/#sensor-evaluation-campaign","text":"Prior to sensor deployment for the intervention monitoring, some of the Living Lab Stations will be evaluated and compared against reference measurement under different conditions. They will be deployed in several cities among the iScape partners in order to 1. develop models for sensor calibration under different climatic and pollutant exposure conditions and 2. assess data quality. This campaign intends to evaluate the Living Lab Station before it's deployment, and trying to prevent concerns raised about data quality that other low-cost sensor platforms 2 3 4 . This evaluation will focus on the real-world conditions calibration , under wide range of exposure and climatic conditions, rather than developing tests in controlled conditions, as prior studies show discrepancies in the accuracy resulting from evaluation in laboratory conditions, versus that of outdoor conditions 2 5 6 . The tests will be conducted by co-location of at least two stations per site with high-end sensors under the conditions indicated in the test section below. The duration of the tests will be of 2,5 months, with two location changes. This is a compromise between the indications given in 1 for at least 3-months campaign and the availability of high-end sensors for the evaluation. Nevertheless, this campaign intends to cover a range of conditions by the deployment of the Living Lab Station in diverse conditions, not only climatic but also exposure-wise. The location changes will also intend to evaluate how well the sensors are able to adapt to these exposure and climatic changes 10 . The data will be uploaded to the SmartCitizen Platform and will be analysed using the Sensor Analysis Framework . The results of this evaluation in terms of models will be uploaded to a dedicated repository and will be implemented on the SmartCitizen Platform for on-the-fly sensor data processing. This processing aims to provide an open platform for sensor analysis using data analysis techniques, need which has been highlighted by 2 5 6 9 . As well, as stated in 2 10 11 , it is necessary to perform individual field calibration for low-cost sensors if measurements comparable to those of high-end solutions are targeted. However, this calibration might not always be feasible in a wide range of conditions, leading to non-generalised models which can perform badly out of the training datasets. This test campaign also aims to study this concern, with an evaluation for a cross calibration methodology, in which results from a limited subset of observations are applied to the complete dataset 7 . If successful, this would be set ground for the development of calibration strategies where the sensors are co-located with a high-end sensor and posteriorly deployed for citizen-science activities, or long term monitoring of the iScape Living Labs interventions, where high end sensors might not be available. This co-location could be performed in a recurrent manner, performing sequences of calibration-deployment-calibration, using merging calibrations as suggested in 11 . As a summary, this field campaign aims to cover the following points: Assess data quality levels and positioning with respect to the DQO set by the European Air Quality Directive Stablish match scores for the different range of sensors available in the Living Lab Station Validation and assessment of EC sensor methodology for NO2 and O3 compounds in urban conditions (urban background and traffic) in various sites Validation of PMS PM raw data accuracy and effect of climatic conditions Calibration of Alphasense\u2019s EC sensors and PMS PM sensors for model quality improvement accounting for climatic conditions Feasibility assessment for the calibration of metal oxide sensor models with the use of reference data and/or Living Lab station data Validation of climatic sensors of the station itself (temperature, humidity, pressure) Drifts and stability: Drifts and possible root causes for EC sensor sensitivities variations over time Calibration stability for SGX MOS sensors Sensor decay and recoverability of PMS sensors due to dust accumulation or others","title":"Sensor Evaluation Campaign"},{"location":"assets/notes/sensor-evaluation-campaign-notes/#test","text":"The table below shows a description of the proposed test campaign: Stage Duration Exposure Reference equipment Purpose Pre-test 2 weeks Urban Background No Stabilise electrochemical sensors to urban background on site. and verify overall functioning Low Exposure test 1 month Urban Background Yes Evaluate response in low transient areas and evaluate repeatability of urban background measurements in higher exposure testing phases High Exposure test 1 month Urban with traffic (canyon or junction) Yes Evaluate response in high transient / high concentration areas and validate current model and post-processing approach. Propose further models with more variables The sites at which these calibration deployments are planned are: Site Season Reference equipment Duration Bologna (Italy) Summer YES 1 month Guildford (England) Autumn YES 2.5 months Dublin (Ireland) Autumn YES 2.5 months Bottrop (Germany) Autumn YES 2.5 months Barcelona (Spain) Spring YES >3 months","title":"Test"},{"location":"assets/notes/sensor-evaluation-campaign-notes/#sensor-installation","text":"Guidelines for representativeness of the results are given below: Height Between 2,5 and 3,5m. Not reachable by hand. Reference equipment position Within <2m and with similar exposure, air flow (both either on wall, or lamppost) 7 Desirable measurements Chemical compounds (higher priority above): NO2 CO, O3 NOx, NO NMHC Particulate Matter (higher priority above) PM 2.5 PM 1.0, PM 10 Climatic conditions (higher priority above) Temperature and relative humidity Wind speed and direction Important Guidelines Please, refer to the sensor considerations section for general information about the sensors. As well, take into account the following: Avoid direct exposure to intense sunlight for long periods of time, since this can severely affect the measurements (direct sun or intense transients). Avoid locations where high temperature or humidity transients are present since the sensor response is affected by these rapid changes. Avoid locations with low air flow or with direct exposure to air conditioning exhausts.","title":"Sensor Installation"},{"location":"assets/notes/sensor-evaluation-campaign-notes/#references","text":"Spinelle L., Aleixandre M., Gerboles M. - 2013: Protocol of Evaluation and Calibration of Low-cost Gas Sensors for the Monitoring of Air Pollution. Joint Research Centre (Report EUR 26112 EN) \u21a9 Nuria Castell, Franck R. Dauge, Philipp Schneider, Matthias Vogt, Uri Lerner, Barak Fishbain, David Broday, Alena Bartonova - 2018: Can commercial low-cost sensor platforms contribute to air quality monitoring and exposure estimates? \u21a9 \u21a9 \u21a9 \u21a9 Snyder E., Watkins T., Solomon P., Thoma E.,Williams R., Hagler G., Shelow D., Hindin D., Kilaru V., Preuss P. - 2013: The changing paradigm of air pollution monitoring. Environ. Sci. Technol. 47, 11369\u201311377 \u21a9 Lewis A., Edwards P. - 2016: Validate personal air-pollution sensors \u21a9 Spinelle L., Gerboles M., Villani M.G., Aleixandre M., Bonavitacola F. - 2015: Field calibration of a cluster of low-cost available sensors for air quality monitoring: Part A: Ozone and nitrogen dioxide \u21a9 \u21a9 Spinelle L., Gerboles M., Villani M.G., Aleixandre M., Bonavitacola F. - 2015: Field calibration of a cluster of low-cost available sensors for air quality monitoring: Part B: NO, CO and CO2 \u21a9 \u21a9 David H. Hagan, Gabriel Isaacman-VanWertz, Jonathan P. Franklin, Lisa M. M. Wallace, Benjamin D. Kocar, Colette L. Heald, Jesse H. Kroll - 2018: Calibration and assessment of electrochemical air quality sensors by co-location with regulatory-grade instruments \u21a9 \u21a9 Olalekan A.M.Popoola, Gregor B.Stewart, Mohammed I.Mead, Roderic L.Jones - 2016: Development of a baseline-temperature correction methodology forelectrochemical sensors and its implications for long-term stability \u21a9 Sun L., ChunWong K., Wei P., Ye S., Huang H., Yang F.,Westerdahl D., Louie P.K.K., Luk C.W.Y., Ning Z. - 2016. Development and application of a next generation air sensor network for the Hong Kong Marathon 2015. Air quality monitoring. Sensors 16, 211\u2013229 \u21a9 A. Ripoll , M. Viana, M. Padrosa, X. Querol, A.Minutolo, K.M. Houc, J.M. Barcelo-Ordinas, J. Garcia-Vidal - 2018: Testing the performance of sensors for ozone pollution monitoring in a citizen science approach \u21a9 \u21a9 Philip J. D. Peterson, Amrita Aujla, Kirsty H. Grant, Alex G. Brundle, Martin R. Thompson, Josh Vande Hey and Roland J. Leigh - 2017: Practical Use of Metal Oxide Semiconductor Gas Sensors for Measuring Nitrogen Dioxide and Ozone in Urban Environments, Sensors 2017, 17, 1653 \u21a9 \u21a9","title":"References"},{"location":"assets/notes/sensor-selection-alphasense/","text":"Sensors selection \u00b6 The following characteristics have been considered for the sensor choice The driver's board designed includes a temperature and humidity sensor for calibrating the temperature dependence of the sensing subsystem. Same technology as the A4 series but more robust when exposed to outdoor environments 24/7. Designed for fixed site air quality networks which demand longer term reliability. Manufacturers provide the baseline resistance calibration values per sensor allowing corrections to be easily applied. Low power consumption The Alphasense EC Sensors were selected to provide a higher linearity, repeatability and resolution with respect to Metal Oxyde sensors found in the Urban Sensor Board. The selection of the sensors was based on the wide variety of literature available on them. Both Penza and EuNetAir Consortium (2014) and Mead et al. (2013) test the NO2A1-A3 against reference instruments, in the laboratory as well as in the field, with well-correlated results. The former concluded that the Data Quality Objective for \"indicative measurements\" (European Parliament and Council of the European Union, 2008) is fulfilled, and the latter report sensitivity in the low ppb region with high linearity. Spinelle et al. tested the Alphasense NO2B4 and O3B4 in a field experiment, with various calibration approaches. Performance evaluation of the same sensors was performed later including a test on a wide range of performance parameters (e.g. response time, calibration function, repeatability, drift, hysteresis effect, and matrix effect) (Spinelle et al. 2017). The experiment found a strong correlation with reference instruments (R 2 > 0.9) and identified some cases with significant hysteresis effect related to humidity. In chamber conditions, the performances of the Alphasense CO-B4 was found to be excellent, with the R 2 values being greater than 0.9 (Castell et al. 2017) (Mead et al. 2013) (Sun et al. 2016). Two field studies reported moderate to excellent R 2 values (0.53--0.97) for the CO-B4 sensor (Castell et al. 2017) (Mead et al. 2013). Finally, some calibration approaches as detailed in Popoola et al. (2016) and Hagan et al. (2018) are used in the post-processing stage as a basis for pollution concentration calculations.","title":"Sensor selection alphasense"},{"location":"assets/notes/sensor-selection-alphasense/#sensors-selection","text":"The following characteristics have been considered for the sensor choice The driver's board designed includes a temperature and humidity sensor for calibrating the temperature dependence of the sensing subsystem. Same technology as the A4 series but more robust when exposed to outdoor environments 24/7. Designed for fixed site air quality networks which demand longer term reliability. Manufacturers provide the baseline resistance calibration values per sensor allowing corrections to be easily applied. Low power consumption The Alphasense EC Sensors were selected to provide a higher linearity, repeatability and resolution with respect to Metal Oxyde sensors found in the Urban Sensor Board. The selection of the sensors was based on the wide variety of literature available on them. Both Penza and EuNetAir Consortium (2014) and Mead et al. (2013) test the NO2A1-A3 against reference instruments, in the laboratory as well as in the field, with well-correlated results. The former concluded that the Data Quality Objective for \"indicative measurements\" (European Parliament and Council of the European Union, 2008) is fulfilled, and the latter report sensitivity in the low ppb region with high linearity. Spinelle et al. tested the Alphasense NO2B4 and O3B4 in a field experiment, with various calibration approaches. Performance evaluation of the same sensors was performed later including a test on a wide range of performance parameters (e.g. response time, calibration function, repeatability, drift, hysteresis effect, and matrix effect) (Spinelle et al. 2017). The experiment found a strong correlation with reference instruments (R 2 > 0.9) and identified some cases with significant hysteresis effect related to humidity. In chamber conditions, the performances of the Alphasense CO-B4 was found to be excellent, with the R 2 values being greater than 0.9 (Castell et al. 2017) (Mead et al. 2013) (Sun et al. 2016). Two field studies reported moderate to excellent R 2 values (0.53--0.97) for the CO-B4 sensor (Castell et al. 2017) (Mead et al. 2013). Finally, some calibration approaches as detailed in Popoola et al. (2016) and Hagan et al. (2018) are used in the post-processing stage as a basis for pollution concentration calculations.","title":"Sensors selection"}]}